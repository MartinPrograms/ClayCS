/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040300
#define SWIGCSHARP

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 *
 * Note that SWIG expects __cplusplus to be defined to the appropriate C++ standard.
 * MSVC users are urged to check and examine the /Zc:__cplusplus compiler option.
 * See https://learn.microsoft.com/en-us/cpp/build/reference/zc-cplusplus.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_ClayLibrary(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_ClayLibrary(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_ClayLibrary(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif



#define CLAY_IMPLEMENTATION

#include "clay.h"

size_t Clay_ChildAlignment_size_t() { 
    return sizeof(Clay_ChildAlignment); 
}

size_t Clay_SizingMinMax_size_t() { 
    return sizeof(Clay_SizingMinMax); 
}

size_t Clay_SizingAxis_size_t() { 
    return sizeof(Clay_SizingAxis); 
}

size_t Clay_Sizing_size_t() { 
    return sizeof(Clay_Sizing); 
}

size_t Clay_Padding_size_t() { 
    return sizeof(Clay_Padding); 
}

size_t Clay_LayoutConfig_size_t() { 
    return sizeof(Clay_LayoutConfig); 
}

size_t Clay_RectangleElementConfig_size_t() { 
    return sizeof(Clay_RectangleElementConfig); 
}

size_t Clay_TextElementConfig_size_t() { 
    return sizeof(Clay_TextElementConfig); 
}

size_t Clay_ImageElementConfig_size_t() { 
    return sizeof(Clay_ImageElementConfig); 
}

size_t Clay_FloatingAttachPoints_size_t() { 
    return sizeof(Clay_FloatingAttachPoints); 
}

size_t Clay_FloatingElementConfig_size_t() { 
    return sizeof(Clay_FloatingElementConfig); 
}

size_t Clay_CustomElementConfig_size_t() { 
    return sizeof(Clay_CustomElementConfig); 
}

size_t Clay_ScrollElementConfig_size_t() { 
    return sizeof(Clay_ScrollElementConfig); 
}

size_t Clay_Border_size_t() { 
    return sizeof(Clay_Border); 
}

size_t Clay_BorderElementConfig_size_t() { 
    return sizeof(Clay_BorderElementConfig); 
}

size_t Clay_ElementConfigUnion_size_t() { 
    return sizeof(Clay_ElementConfigUnion); 
}

size_t Clay_ElementConfig_size_t() { 
    return sizeof(Clay_ElementConfig); 
}

size_t Clay_ScrollContainerData_size_t() { 
    return sizeof(Clay_ScrollContainerData); 
}

size_t Clay_RenderCommand_size_t() { 
    return sizeof(Clay_RenderCommand); 
}

size_t Clay_RenderCommandArray_size_t() { 
    return sizeof(Clay_RenderCommandArray); 
}

size_t Clay_PointerData_size_t() { 
    return sizeof(Clay_PointerData); 
}

size_t Clay_String_size_t() { 
    return sizeof(Clay_String); 
}

size_t Clay__StringArray_size_t() { 
    return sizeof(Clay__StringArray); 
}

size_t Clay_Arena_size_t() { 
    return sizeof(Clay_Arena); 
}

size_t Clay_Dimensions_size_t() { 
    return sizeof(Clay_Dimensions); 
}

size_t Clay_Vector2_size_t() { 
    return sizeof(Clay_Vector2); 
}

size_t Clay_Color_size_t() { 
    return sizeof(Clay_Color); 
}

size_t Clay_BoundingBox_size_t() { 
    return sizeof(Clay_BoundingBox); 
}

size_t Clay_ElementId_size_t() { 
    return sizeof(Clay_ElementId); 
}

size_t Clay_CornerRadius_size_t() { 
    return sizeof(Clay_CornerRadius); 
}

// create a delegate with the following signature, Clay_Dimensions delegate(Clay_String *text, Clay_TextElementConfig *config)
// This is used to measure text in the layout engine

typedef Clay_Dimensions (*MeasureTextDelegate)(Clay_String* str, Clay_TextElementConfig* config);

extern "C" SWIGEXPORT void SWIGSTDCALL SetMeasureText(MeasureTextDelegate measureText) {
    
    Clay_SetMeasureTextFunction(measureText);
}


#include <string.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_CLAY__ELEMENT_DEFINITION_LATCH_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  CLAY__ELEMENT_DEFINITION_LATCH = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CLAY__ELEMENT_DEFINITION_LATCH_get() {
  int jresult ;
  int result;
  
  result = (int)CLAY__ELEMENT_DEFINITION_LATCH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_String_length_set(void * jarg1, int jarg2) {
  Clay_String *arg1 = (Clay_String *) 0 ;
  int arg2 ;
  
  arg1 = (Clay_String *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Clay_String_length_get(void * jarg1) {
  int jresult ;
  Clay_String *arg1 = (Clay_String *) 0 ;
  int result;
  
  arg1 = (Clay_String *)jarg1; 
  result = (int) ((arg1)->length);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_String_chars_set(void * jarg1, char * jarg2) {
  Clay_String *arg1 = (Clay_String *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Clay_String *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->chars = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->chars, (const char *)arg2);
    } else {
      arg1->chars = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Clay_String_chars_get(void * jarg1) {
  char * jresult ;
  Clay_String *arg1 = (Clay_String *) 0 ;
  char *result = 0 ;
  
  arg1 = (Clay_String *)jarg1; 
  result = (char *) ((arg1)->chars);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_String() {
  void * jresult ;
  Clay_String *result = 0 ;
  
  result = (Clay_String *)new Clay_String();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_String(void * jarg1) {
  Clay_String *arg1 = (Clay_String *) 0 ;
  
  arg1 = (Clay_String *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__StringArray_capacity_set(void * jarg1, unsigned int jarg2) {
  Clay__StringArray *arg1 = (Clay__StringArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__StringArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->capacity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__StringArray_capacity_get(void * jarg1) {
  unsigned int jresult ;
  Clay__StringArray *arg1 = (Clay__StringArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__StringArray *)jarg1; 
  result = (unsigned int) ((arg1)->capacity);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__StringArray_length_set(void * jarg1, unsigned int jarg2) {
  Clay__StringArray *arg1 = (Clay__StringArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__StringArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__StringArray_length_get(void * jarg1) {
  unsigned int jresult ;
  Clay__StringArray *arg1 = (Clay__StringArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__StringArray *)jarg1; 
  result = (unsigned int) ((arg1)->length);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__StringArray_internalArray_set(void * jarg1, void * jarg2) {
  Clay__StringArray *arg1 = (Clay__StringArray *) 0 ;
  Clay_String *arg2 = (Clay_String *) 0 ;
  
  arg1 = (Clay__StringArray *)jarg1; 
  arg2 = (Clay_String *)jarg2; 
  if (arg1) (arg1)->internalArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__StringArray_internalArray_get(void * jarg1) {
  void * jresult ;
  Clay__StringArray *arg1 = (Clay__StringArray *) 0 ;
  Clay_String *result = 0 ;
  
  arg1 = (Clay__StringArray *)jarg1; 
  result = (Clay_String *) ((arg1)->internalArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__StringArray() {
  void * jresult ;
  Clay__StringArray *result = 0 ;
  
  result = (Clay__StringArray *)new Clay__StringArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__StringArray(void * jarg1) {
  Clay__StringArray *arg1 = (Clay__StringArray *) 0 ;
  
  arg1 = (Clay__StringArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_Arena_label_set(void * jarg1, void * jarg2) {
  Clay_Arena *arg1 = (Clay_Arena *) 0 ;
  Clay_String *arg2 = (Clay_String *) 0 ;
  
  arg1 = (Clay_Arena *)jarg1; 
  arg2 = (Clay_String *)jarg2; 
  if (arg1) (arg1)->label = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_Arena_label_get(void * jarg1) {
  void * jresult ;
  Clay_Arena *arg1 = (Clay_Arena *) 0 ;
  Clay_String *result = 0 ;
  
  arg1 = (Clay_Arena *)jarg1; 
  result = (Clay_String *)& ((arg1)->label);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_Arena_nextAllocation_set(void * jarg1, unsigned long long jarg2) {
  Clay_Arena *arg1 = (Clay_Arena *) 0 ;
  unsigned long long arg2 ;
  
  arg1 = (Clay_Arena *)jarg1; 
  arg2 = (unsigned long long)jarg2; 
  if (arg1) (arg1)->nextAllocation = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_Clay_Arena_nextAllocation_get(void * jarg1) {
  unsigned long long jresult ;
  Clay_Arena *arg1 = (Clay_Arena *) 0 ;
  unsigned long long result;
  
  arg1 = (Clay_Arena *)jarg1; 
  result = (unsigned long long) ((arg1)->nextAllocation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_Arena_capacity_set(void * jarg1, unsigned long long jarg2) {
  Clay_Arena *arg1 = (Clay_Arena *) 0 ;
  unsigned long long arg2 ;
  
  arg1 = (Clay_Arena *)jarg1; 
  arg2 = (unsigned long long)jarg2; 
  if (arg1) (arg1)->capacity = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_Clay_Arena_capacity_get(void * jarg1) {
  unsigned long long jresult ;
  Clay_Arena *arg1 = (Clay_Arena *) 0 ;
  unsigned long long result;
  
  arg1 = (Clay_Arena *)jarg1; 
  result = (unsigned long long) ((arg1)->capacity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_Arena_memory_set(void * jarg1, char * jarg2) {
  Clay_Arena *arg1 = (Clay_Arena *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Clay_Arena *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->memory;
    if (arg2) {
      arg1->memory = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->memory, (const char *)arg2);
    } else {
      arg1->memory = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Clay_Arena_memory_get(void * jarg1) {
  char * jresult ;
  Clay_Arena *arg1 = (Clay_Arena *) 0 ;
  char *result = 0 ;
  
  arg1 = (Clay_Arena *)jarg1; 
  result = (char *) ((arg1)->memory);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_Arena() {
  void * jresult ;
  Clay_Arena *result = 0 ;
  
  result = (Clay_Arena *)new Clay_Arena();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_Arena(void * jarg1) {
  Clay_Arena *arg1 = (Clay_Arena *) 0 ;
  
  arg1 = (Clay_Arena *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_Dimensions_width_set(void * jarg1, float jarg2) {
  Clay_Dimensions *arg1 = (Clay_Dimensions *) 0 ;
  float arg2 ;
  
  arg1 = (Clay_Dimensions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Clay_Dimensions_width_get(void * jarg1) {
  float jresult ;
  Clay_Dimensions *arg1 = (Clay_Dimensions *) 0 ;
  float result;
  
  arg1 = (Clay_Dimensions *)jarg1; 
  result = (float) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_Dimensions_height_set(void * jarg1, float jarg2) {
  Clay_Dimensions *arg1 = (Clay_Dimensions *) 0 ;
  float arg2 ;
  
  arg1 = (Clay_Dimensions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Clay_Dimensions_height_get(void * jarg1) {
  float jresult ;
  Clay_Dimensions *arg1 = (Clay_Dimensions *) 0 ;
  float result;
  
  arg1 = (Clay_Dimensions *)jarg1; 
  result = (float) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_Dimensions() {
  void * jresult ;
  Clay_Dimensions *result = 0 ;
  
  result = (Clay_Dimensions *)new Clay_Dimensions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_Dimensions(void * jarg1) {
  Clay_Dimensions *arg1 = (Clay_Dimensions *) 0 ;
  
  arg1 = (Clay_Dimensions *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_Vector2_x_set(void * jarg1, float jarg2) {
  Clay_Vector2 *arg1 = (Clay_Vector2 *) 0 ;
  float arg2 ;
  
  arg1 = (Clay_Vector2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Clay_Vector2_x_get(void * jarg1) {
  float jresult ;
  Clay_Vector2 *arg1 = (Clay_Vector2 *) 0 ;
  float result;
  
  arg1 = (Clay_Vector2 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_Vector2_y_set(void * jarg1, float jarg2) {
  Clay_Vector2 *arg1 = (Clay_Vector2 *) 0 ;
  float arg2 ;
  
  arg1 = (Clay_Vector2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Clay_Vector2_y_get(void * jarg1) {
  float jresult ;
  Clay_Vector2 *arg1 = (Clay_Vector2 *) 0 ;
  float result;
  
  arg1 = (Clay_Vector2 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_Vector2() {
  void * jresult ;
  Clay_Vector2 *result = 0 ;
  
  result = (Clay_Vector2 *)new Clay_Vector2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_Vector2(void * jarg1) {
  Clay_Vector2 *arg1 = (Clay_Vector2 *) 0 ;
  
  arg1 = (Clay_Vector2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_Color_r_set(void * jarg1, float jarg2) {
  Clay_Color *arg1 = (Clay_Color *) 0 ;
  float arg2 ;
  
  arg1 = (Clay_Color *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Clay_Color_r_get(void * jarg1) {
  float jresult ;
  Clay_Color *arg1 = (Clay_Color *) 0 ;
  float result;
  
  arg1 = (Clay_Color *)jarg1; 
  result = (float) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_Color_g_set(void * jarg1, float jarg2) {
  Clay_Color *arg1 = (Clay_Color *) 0 ;
  float arg2 ;
  
  arg1 = (Clay_Color *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Clay_Color_g_get(void * jarg1) {
  float jresult ;
  Clay_Color *arg1 = (Clay_Color *) 0 ;
  float result;
  
  arg1 = (Clay_Color *)jarg1; 
  result = (float) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_Color_b_set(void * jarg1, float jarg2) {
  Clay_Color *arg1 = (Clay_Color *) 0 ;
  float arg2 ;
  
  arg1 = (Clay_Color *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Clay_Color_b_get(void * jarg1) {
  float jresult ;
  Clay_Color *arg1 = (Clay_Color *) 0 ;
  float result;
  
  arg1 = (Clay_Color *)jarg1; 
  result = (float) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_Color_a_set(void * jarg1, float jarg2) {
  Clay_Color *arg1 = (Clay_Color *) 0 ;
  float arg2 ;
  
  arg1 = (Clay_Color *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Clay_Color_a_get(void * jarg1) {
  float jresult ;
  Clay_Color *arg1 = (Clay_Color *) 0 ;
  float result;
  
  arg1 = (Clay_Color *)jarg1; 
  result = (float) ((arg1)->a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_Color() {
  void * jresult ;
  Clay_Color *result = 0 ;
  
  result = (Clay_Color *)new Clay_Color();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_Color(void * jarg1) {
  Clay_Color *arg1 = (Clay_Color *) 0 ;
  
  arg1 = (Clay_Color *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_BoundingBox_x_set(void * jarg1, float jarg2) {
  Clay_BoundingBox *arg1 = (Clay_BoundingBox *) 0 ;
  float arg2 ;
  
  arg1 = (Clay_BoundingBox *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Clay_BoundingBox_x_get(void * jarg1) {
  float jresult ;
  Clay_BoundingBox *arg1 = (Clay_BoundingBox *) 0 ;
  float result;
  
  arg1 = (Clay_BoundingBox *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_BoundingBox_y_set(void * jarg1, float jarg2) {
  Clay_BoundingBox *arg1 = (Clay_BoundingBox *) 0 ;
  float arg2 ;
  
  arg1 = (Clay_BoundingBox *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Clay_BoundingBox_y_get(void * jarg1) {
  float jresult ;
  Clay_BoundingBox *arg1 = (Clay_BoundingBox *) 0 ;
  float result;
  
  arg1 = (Clay_BoundingBox *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_BoundingBox_width_set(void * jarg1, float jarg2) {
  Clay_BoundingBox *arg1 = (Clay_BoundingBox *) 0 ;
  float arg2 ;
  
  arg1 = (Clay_BoundingBox *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Clay_BoundingBox_width_get(void * jarg1) {
  float jresult ;
  Clay_BoundingBox *arg1 = (Clay_BoundingBox *) 0 ;
  float result;
  
  arg1 = (Clay_BoundingBox *)jarg1; 
  result = (float) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_BoundingBox_height_set(void * jarg1, float jarg2) {
  Clay_BoundingBox *arg1 = (Clay_BoundingBox *) 0 ;
  float arg2 ;
  
  arg1 = (Clay_BoundingBox *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Clay_BoundingBox_height_get(void * jarg1) {
  float jresult ;
  Clay_BoundingBox *arg1 = (Clay_BoundingBox *) 0 ;
  float result;
  
  arg1 = (Clay_BoundingBox *)jarg1; 
  result = (float) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_BoundingBox() {
  void * jresult ;
  Clay_BoundingBox *result = 0 ;
  
  result = (Clay_BoundingBox *)new Clay_BoundingBox();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_BoundingBox(void * jarg1) {
  Clay_BoundingBox *arg1 = (Clay_BoundingBox *) 0 ;
  
  arg1 = (Clay_BoundingBox *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_ElementId_id_set(void * jarg1, unsigned int jarg2) {
  Clay_ElementId *arg1 = (Clay_ElementId *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay_ElementId *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_ElementId_id_get(void * jarg1) {
  unsigned int jresult ;
  Clay_ElementId *arg1 = (Clay_ElementId *) 0 ;
  unsigned int result;
  
  arg1 = (Clay_ElementId *)jarg1; 
  result = (unsigned int) ((arg1)->id);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_ElementId_offset_set(void * jarg1, unsigned int jarg2) {
  Clay_ElementId *arg1 = (Clay_ElementId *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay_ElementId *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_ElementId_offset_get(void * jarg1) {
  unsigned int jresult ;
  Clay_ElementId *arg1 = (Clay_ElementId *) 0 ;
  unsigned int result;
  
  arg1 = (Clay_ElementId *)jarg1; 
  result = (unsigned int) ((arg1)->offset);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_ElementId_baseId_set(void * jarg1, unsigned int jarg2) {
  Clay_ElementId *arg1 = (Clay_ElementId *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay_ElementId *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->baseId = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_ElementId_baseId_get(void * jarg1) {
  unsigned int jresult ;
  Clay_ElementId *arg1 = (Clay_ElementId *) 0 ;
  unsigned int result;
  
  arg1 = (Clay_ElementId *)jarg1; 
  result = (unsigned int) ((arg1)->baseId);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_ElementId_stringId_set(void * jarg1, void * jarg2) {
  Clay_ElementId *arg1 = (Clay_ElementId *) 0 ;
  Clay_String *arg2 = (Clay_String *) 0 ;
  
  arg1 = (Clay_ElementId *)jarg1; 
  arg2 = (Clay_String *)jarg2; 
  if (arg1) (arg1)->stringId = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_ElementId_stringId_get(void * jarg1) {
  void * jresult ;
  Clay_ElementId *arg1 = (Clay_ElementId *) 0 ;
  Clay_String *result = 0 ;
  
  arg1 = (Clay_ElementId *)jarg1; 
  result = (Clay_String *)& ((arg1)->stringId);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_ElementId() {
  void * jresult ;
  Clay_ElementId *result = 0 ;
  
  result = (Clay_ElementId *)new Clay_ElementId();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_ElementId(void * jarg1) {
  Clay_ElementId *arg1 = (Clay_ElementId *) 0 ;
  
  arg1 = (Clay_ElementId *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_CornerRadius_topLeft_set(void * jarg1, float jarg2) {
  Clay_CornerRadius *arg1 = (Clay_CornerRadius *) 0 ;
  float arg2 ;
  
  arg1 = (Clay_CornerRadius *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->topLeft = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Clay_CornerRadius_topLeft_get(void * jarg1) {
  float jresult ;
  Clay_CornerRadius *arg1 = (Clay_CornerRadius *) 0 ;
  float result;
  
  arg1 = (Clay_CornerRadius *)jarg1; 
  result = (float) ((arg1)->topLeft);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_CornerRadius_topRight_set(void * jarg1, float jarg2) {
  Clay_CornerRadius *arg1 = (Clay_CornerRadius *) 0 ;
  float arg2 ;
  
  arg1 = (Clay_CornerRadius *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->topRight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Clay_CornerRadius_topRight_get(void * jarg1) {
  float jresult ;
  Clay_CornerRadius *arg1 = (Clay_CornerRadius *) 0 ;
  float result;
  
  arg1 = (Clay_CornerRadius *)jarg1; 
  result = (float) ((arg1)->topRight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_CornerRadius_bottomLeft_set(void * jarg1, float jarg2) {
  Clay_CornerRadius *arg1 = (Clay_CornerRadius *) 0 ;
  float arg2 ;
  
  arg1 = (Clay_CornerRadius *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->bottomLeft = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Clay_CornerRadius_bottomLeft_get(void * jarg1) {
  float jresult ;
  Clay_CornerRadius *arg1 = (Clay_CornerRadius *) 0 ;
  float result;
  
  arg1 = (Clay_CornerRadius *)jarg1; 
  result = (float) ((arg1)->bottomLeft);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_CornerRadius_bottomRight_set(void * jarg1, float jarg2) {
  Clay_CornerRadius *arg1 = (Clay_CornerRadius *) 0 ;
  float arg2 ;
  
  arg1 = (Clay_CornerRadius *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->bottomRight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Clay_CornerRadius_bottomRight_get(void * jarg1) {
  float jresult ;
  Clay_CornerRadius *arg1 = (Clay_CornerRadius *) 0 ;
  float result;
  
  arg1 = (Clay_CornerRadius *)jarg1; 
  result = (float) ((arg1)->bottomRight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_CornerRadius() {
  void * jresult ;
  Clay_CornerRadius *result = 0 ;
  
  result = (Clay_CornerRadius *)new Clay_CornerRadius();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_CornerRadius(void * jarg1) {
  Clay_CornerRadius *arg1 = (Clay_CornerRadius *) 0 ;
  
  arg1 = (Clay_CornerRadius *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_ChildAlignment_x_set(void * jarg1, int jarg2) {
  Clay_ChildAlignment *arg1 = (Clay_ChildAlignment *) 0 ;
  Clay_LayoutAlignmentX arg2 ;
  
  arg1 = (Clay_ChildAlignment *)jarg1; 
  arg2 = (Clay_LayoutAlignmentX)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Clay_ChildAlignment_x_get(void * jarg1) {
  int jresult ;
  Clay_ChildAlignment *arg1 = (Clay_ChildAlignment *) 0 ;
  Clay_LayoutAlignmentX result;
  
  arg1 = (Clay_ChildAlignment *)jarg1; 
  result = (Clay_LayoutAlignmentX) ((arg1)->x);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_ChildAlignment_y_set(void * jarg1, int jarg2) {
  Clay_ChildAlignment *arg1 = (Clay_ChildAlignment *) 0 ;
  Clay_LayoutAlignmentY arg2 ;
  
  arg1 = (Clay_ChildAlignment *)jarg1; 
  arg2 = (Clay_LayoutAlignmentY)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Clay_ChildAlignment_y_get(void * jarg1) {
  int jresult ;
  Clay_ChildAlignment *arg1 = (Clay_ChildAlignment *) 0 ;
  Clay_LayoutAlignmentY result;
  
  arg1 = (Clay_ChildAlignment *)jarg1; 
  result = (Clay_LayoutAlignmentY) ((arg1)->y);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_ChildAlignment() {
  void * jresult ;
  Clay_ChildAlignment *result = 0 ;
  
  result = (Clay_ChildAlignment *)new Clay_ChildAlignment();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_ChildAlignment(void * jarg1) {
  Clay_ChildAlignment *arg1 = (Clay_ChildAlignment *) 0 ;
  
  arg1 = (Clay_ChildAlignment *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_SizingMinMax_min_set(void * jarg1, float jarg2) {
  Clay_SizingMinMax *arg1 = (Clay_SizingMinMax *) 0 ;
  float arg2 ;
  
  arg1 = (Clay_SizingMinMax *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->min = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Clay_SizingMinMax_min_get(void * jarg1) {
  float jresult ;
  Clay_SizingMinMax *arg1 = (Clay_SizingMinMax *) 0 ;
  float result;
  
  arg1 = (Clay_SizingMinMax *)jarg1; 
  result = (float) ((arg1)->min);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_SizingMinMax_max_set(void * jarg1, float jarg2) {
  Clay_SizingMinMax *arg1 = (Clay_SizingMinMax *) 0 ;
  float arg2 ;
  
  arg1 = (Clay_SizingMinMax *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->max = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Clay_SizingMinMax_max_get(void * jarg1) {
  float jresult ;
  Clay_SizingMinMax *arg1 = (Clay_SizingMinMax *) 0 ;
  float result;
  
  arg1 = (Clay_SizingMinMax *)jarg1; 
  result = (float) ((arg1)->max);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_SizingMinMax() {
  void * jresult ;
  Clay_SizingMinMax *result = 0 ;
  
  result = (Clay_SizingMinMax *)new Clay_SizingMinMax();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_SizingMinMax(void * jarg1) {
  Clay_SizingMinMax *arg1 = (Clay_SizingMinMax *) 0 ;
  
  arg1 = (Clay_SizingMinMax *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_SizingAxis_sizeMinMax_set(void * jarg1, void * jarg2) {
  Clay_SizingAxis *arg1 = (Clay_SizingAxis *) 0 ;
  Clay_SizingMinMax *arg2 = (Clay_SizingMinMax *) 0 ;
  
  arg1 = (Clay_SizingAxis *)jarg1; 
  arg2 = (Clay_SizingMinMax *)jarg2; 
  if (arg1) (arg1)->sizeMinMax = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_SizingAxis_sizeMinMax_get(void * jarg1) {
  void * jresult ;
  Clay_SizingAxis *arg1 = (Clay_SizingAxis *) 0 ;
  Clay_SizingMinMax *result = 0 ;
  
  arg1 = (Clay_SizingAxis *)jarg1; 
  result = (Clay_SizingMinMax *)& ((arg1)->sizeMinMax);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_SizingAxis_sizePercent_set(void * jarg1, float jarg2) {
  Clay_SizingAxis *arg1 = (Clay_SizingAxis *) 0 ;
  float arg2 ;
  
  arg1 = (Clay_SizingAxis *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->sizePercent = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Clay_SizingAxis_sizePercent_get(void * jarg1) {
  float jresult ;
  Clay_SizingAxis *arg1 = (Clay_SizingAxis *) 0 ;
  float result;
  
  arg1 = (Clay_SizingAxis *)jarg1; 
  result = (float) ((arg1)->sizePercent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_SizingAxis_type_set(void * jarg1, int jarg2) {
  Clay_SizingAxis *arg1 = (Clay_SizingAxis *) 0 ;
  Clay__SizingType arg2 ;
  
  arg1 = (Clay_SizingAxis *)jarg1; 
  arg2 = (Clay__SizingType)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Clay_SizingAxis_type_get(void * jarg1) {
  int jresult ;
  Clay_SizingAxis *arg1 = (Clay_SizingAxis *) 0 ;
  Clay__SizingType result;
  
  arg1 = (Clay_SizingAxis *)jarg1; 
  result = (Clay__SizingType) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_SizingAxis() {
  void * jresult ;
  Clay_SizingAxis *result = 0 ;
  
  result = (Clay_SizingAxis *)new Clay_SizingAxis();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_SizingAxis(void * jarg1) {
  Clay_SizingAxis *arg1 = (Clay_SizingAxis *) 0 ;
  
  arg1 = (Clay_SizingAxis *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_Sizing_width_set(void * jarg1, void * jarg2) {
  Clay_Sizing *arg1 = (Clay_Sizing *) 0 ;
  Clay_SizingAxis *arg2 = (Clay_SizingAxis *) 0 ;
  
  arg1 = (Clay_Sizing *)jarg1; 
  arg2 = (Clay_SizingAxis *)jarg2; 
  if (arg1) (arg1)->width = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_Sizing_width_get(void * jarg1) {
  void * jresult ;
  Clay_Sizing *arg1 = (Clay_Sizing *) 0 ;
  Clay_SizingAxis *result = 0 ;
  
  arg1 = (Clay_Sizing *)jarg1; 
  result = (Clay_SizingAxis *)& ((arg1)->width);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_Sizing_height_set(void * jarg1, void * jarg2) {
  Clay_Sizing *arg1 = (Clay_Sizing *) 0 ;
  Clay_SizingAxis *arg2 = (Clay_SizingAxis *) 0 ;
  
  arg1 = (Clay_Sizing *)jarg1; 
  arg2 = (Clay_SizingAxis *)jarg2; 
  if (arg1) (arg1)->height = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_Sizing_height_get(void * jarg1) {
  void * jresult ;
  Clay_Sizing *arg1 = (Clay_Sizing *) 0 ;
  Clay_SizingAxis *result = 0 ;
  
  arg1 = (Clay_Sizing *)jarg1; 
  result = (Clay_SizingAxis *)& ((arg1)->height);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_Sizing() {
  void * jresult ;
  Clay_Sizing *result = 0 ;
  
  result = (Clay_Sizing *)new Clay_Sizing();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_Sizing(void * jarg1) {
  Clay_Sizing *arg1 = (Clay_Sizing *) 0 ;
  
  arg1 = (Clay_Sizing *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_Padding_x_set(void * jarg1, unsigned short jarg2) {
  Clay_Padding *arg1 = (Clay_Padding *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (Clay_Padding *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Clay_Padding_x_get(void * jarg1) {
  unsigned short jresult ;
  Clay_Padding *arg1 = (Clay_Padding *) 0 ;
  unsigned short result;
  
  arg1 = (Clay_Padding *)jarg1; 
  result = (unsigned short) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_Padding_y_set(void * jarg1, unsigned short jarg2) {
  Clay_Padding *arg1 = (Clay_Padding *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (Clay_Padding *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Clay_Padding_y_get(void * jarg1) {
  unsigned short jresult ;
  Clay_Padding *arg1 = (Clay_Padding *) 0 ;
  unsigned short result;
  
  arg1 = (Clay_Padding *)jarg1; 
  result = (unsigned short) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_Padding() {
  void * jresult ;
  Clay_Padding *result = 0 ;
  
  result = (Clay_Padding *)new Clay_Padding();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_Padding(void * jarg1) {
  Clay_Padding *arg1 = (Clay_Padding *) 0 ;
  
  arg1 = (Clay_Padding *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_LayoutConfig_sizing_set(void * jarg1, void * jarg2) {
  Clay_LayoutConfig *arg1 = (Clay_LayoutConfig *) 0 ;
  Clay_Sizing *arg2 = (Clay_Sizing *) 0 ;
  
  arg1 = (Clay_LayoutConfig *)jarg1; 
  arg2 = (Clay_Sizing *)jarg2; 
  if (arg1) (arg1)->sizing = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_LayoutConfig_sizing_get(void * jarg1) {
  void * jresult ;
  Clay_LayoutConfig *arg1 = (Clay_LayoutConfig *) 0 ;
  Clay_Sizing *result = 0 ;
  
  arg1 = (Clay_LayoutConfig *)jarg1; 
  result = (Clay_Sizing *)& ((arg1)->sizing);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_LayoutConfig_padding_set(void * jarg1, void * jarg2) {
  Clay_LayoutConfig *arg1 = (Clay_LayoutConfig *) 0 ;
  Clay_Padding *arg2 = (Clay_Padding *) 0 ;
  
  arg1 = (Clay_LayoutConfig *)jarg1; 
  arg2 = (Clay_Padding *)jarg2; 
  if (arg1) (arg1)->padding = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_LayoutConfig_padding_get(void * jarg1) {
  void * jresult ;
  Clay_LayoutConfig *arg1 = (Clay_LayoutConfig *) 0 ;
  Clay_Padding *result = 0 ;
  
  arg1 = (Clay_LayoutConfig *)jarg1; 
  result = (Clay_Padding *)& ((arg1)->padding);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_LayoutConfig_childGap_set(void * jarg1, unsigned short jarg2) {
  Clay_LayoutConfig *arg1 = (Clay_LayoutConfig *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (Clay_LayoutConfig *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->childGap = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Clay_LayoutConfig_childGap_get(void * jarg1) {
  unsigned short jresult ;
  Clay_LayoutConfig *arg1 = (Clay_LayoutConfig *) 0 ;
  unsigned short result;
  
  arg1 = (Clay_LayoutConfig *)jarg1; 
  result = (unsigned short) ((arg1)->childGap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_LayoutConfig_childAlignment_set(void * jarg1, void * jarg2) {
  Clay_LayoutConfig *arg1 = (Clay_LayoutConfig *) 0 ;
  Clay_ChildAlignment *arg2 = (Clay_ChildAlignment *) 0 ;
  
  arg1 = (Clay_LayoutConfig *)jarg1; 
  arg2 = (Clay_ChildAlignment *)jarg2; 
  if (arg1) (arg1)->childAlignment = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_LayoutConfig_childAlignment_get(void * jarg1) {
  void * jresult ;
  Clay_LayoutConfig *arg1 = (Clay_LayoutConfig *) 0 ;
  Clay_ChildAlignment *result = 0 ;
  
  arg1 = (Clay_LayoutConfig *)jarg1; 
  result = (Clay_ChildAlignment *)& ((arg1)->childAlignment);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_LayoutConfig_layoutDirection_set(void * jarg1, int jarg2) {
  Clay_LayoutConfig *arg1 = (Clay_LayoutConfig *) 0 ;
  Clay_LayoutDirection arg2 ;
  
  arg1 = (Clay_LayoutConfig *)jarg1; 
  arg2 = (Clay_LayoutDirection)jarg2; 
  if (arg1) (arg1)->layoutDirection = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Clay_LayoutConfig_layoutDirection_get(void * jarg1) {
  int jresult ;
  Clay_LayoutConfig *arg1 = (Clay_LayoutConfig *) 0 ;
  Clay_LayoutDirection result;
  
  arg1 = (Clay_LayoutConfig *)jarg1; 
  result = (Clay_LayoutDirection) ((arg1)->layoutDirection);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_LayoutConfig() {
  void * jresult ;
  Clay_LayoutConfig *result = 0 ;
  
  result = (Clay_LayoutConfig *)new Clay_LayoutConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_LayoutConfig(void * jarg1) {
  Clay_LayoutConfig *arg1 = (Clay_LayoutConfig *) 0 ;
  
  arg1 = (Clay_LayoutConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLAY_LAYOUT_DEFAULT_set(void * jarg1) {
  Clay_LayoutConfig *arg1 = (Clay_LayoutConfig *) 0 ;
  
  arg1 = (Clay_LayoutConfig *)jarg1; 
  CLAY_LAYOUT_DEFAULT = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CLAY_LAYOUT_DEFAULT_get() {
  void * jresult ;
  Clay_LayoutConfig *result = 0 ;
  
  result = (Clay_LayoutConfig *)&CLAY_LAYOUT_DEFAULT;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_RectangleElementConfig_color_set(void * jarg1, void * jarg2) {
  Clay_RectangleElementConfig *arg1 = (Clay_RectangleElementConfig *) 0 ;
  Clay_Color *arg2 = (Clay_Color *) 0 ;
  
  arg1 = (Clay_RectangleElementConfig *)jarg1; 
  arg2 = (Clay_Color *)jarg2; 
  if (arg1) (arg1)->color = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_RectangleElementConfig_color_get(void * jarg1) {
  void * jresult ;
  Clay_RectangleElementConfig *arg1 = (Clay_RectangleElementConfig *) 0 ;
  Clay_Color *result = 0 ;
  
  arg1 = (Clay_RectangleElementConfig *)jarg1; 
  result = (Clay_Color *)& ((arg1)->color);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_RectangleElementConfig_cornerRadius_set(void * jarg1, void * jarg2) {
  Clay_RectangleElementConfig *arg1 = (Clay_RectangleElementConfig *) 0 ;
  Clay_CornerRadius *arg2 = (Clay_CornerRadius *) 0 ;
  
  arg1 = (Clay_RectangleElementConfig *)jarg1; 
  arg2 = (Clay_CornerRadius *)jarg2; 
  if (arg1) (arg1)->cornerRadius = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_RectangleElementConfig_cornerRadius_get(void * jarg1) {
  void * jresult ;
  Clay_RectangleElementConfig *arg1 = (Clay_RectangleElementConfig *) 0 ;
  Clay_CornerRadius *result = 0 ;
  
  arg1 = (Clay_RectangleElementConfig *)jarg1; 
  result = (Clay_CornerRadius *)& ((arg1)->cornerRadius);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_RectangleElementConfig() {
  void * jresult ;
  Clay_RectangleElementConfig *result = 0 ;
  
  result = (Clay_RectangleElementConfig *)new Clay_RectangleElementConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_RectangleElementConfig(void * jarg1) {
  Clay_RectangleElementConfig *arg1 = (Clay_RectangleElementConfig *) 0 ;
  
  arg1 = (Clay_RectangleElementConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_TextElementConfig_textColor_set(void * jarg1, void * jarg2) {
  Clay_TextElementConfig *arg1 = (Clay_TextElementConfig *) 0 ;
  Clay_Color *arg2 = (Clay_Color *) 0 ;
  
  arg1 = (Clay_TextElementConfig *)jarg1; 
  arg2 = (Clay_Color *)jarg2; 
  if (arg1) (arg1)->textColor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_TextElementConfig_textColor_get(void * jarg1) {
  void * jresult ;
  Clay_TextElementConfig *arg1 = (Clay_TextElementConfig *) 0 ;
  Clay_Color *result = 0 ;
  
  arg1 = (Clay_TextElementConfig *)jarg1; 
  result = (Clay_Color *)& ((arg1)->textColor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_TextElementConfig_fontId_set(void * jarg1, unsigned short jarg2) {
  Clay_TextElementConfig *arg1 = (Clay_TextElementConfig *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (Clay_TextElementConfig *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->fontId = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Clay_TextElementConfig_fontId_get(void * jarg1) {
  unsigned short jresult ;
  Clay_TextElementConfig *arg1 = (Clay_TextElementConfig *) 0 ;
  unsigned short result;
  
  arg1 = (Clay_TextElementConfig *)jarg1; 
  result = (unsigned short) ((arg1)->fontId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_TextElementConfig_fontSize_set(void * jarg1, unsigned short jarg2) {
  Clay_TextElementConfig *arg1 = (Clay_TextElementConfig *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (Clay_TextElementConfig *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->fontSize = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Clay_TextElementConfig_fontSize_get(void * jarg1) {
  unsigned short jresult ;
  Clay_TextElementConfig *arg1 = (Clay_TextElementConfig *) 0 ;
  unsigned short result;
  
  arg1 = (Clay_TextElementConfig *)jarg1; 
  result = (unsigned short) ((arg1)->fontSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_TextElementConfig_letterSpacing_set(void * jarg1, unsigned short jarg2) {
  Clay_TextElementConfig *arg1 = (Clay_TextElementConfig *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (Clay_TextElementConfig *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->letterSpacing = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Clay_TextElementConfig_letterSpacing_get(void * jarg1) {
  unsigned short jresult ;
  Clay_TextElementConfig *arg1 = (Clay_TextElementConfig *) 0 ;
  unsigned short result;
  
  arg1 = (Clay_TextElementConfig *)jarg1; 
  result = (unsigned short) ((arg1)->letterSpacing);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_TextElementConfig_lineHeight_set(void * jarg1, unsigned short jarg2) {
  Clay_TextElementConfig *arg1 = (Clay_TextElementConfig *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (Clay_TextElementConfig *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->lineHeight = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Clay_TextElementConfig_lineHeight_get(void * jarg1) {
  unsigned short jresult ;
  Clay_TextElementConfig *arg1 = (Clay_TextElementConfig *) 0 ;
  unsigned short result;
  
  arg1 = (Clay_TextElementConfig *)jarg1; 
  result = (unsigned short) ((arg1)->lineHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_TextElementConfig_wrapMode_set(void * jarg1, int jarg2) {
  Clay_TextElementConfig *arg1 = (Clay_TextElementConfig *) 0 ;
  Clay_TextElementConfigWrapMode arg2 ;
  
  arg1 = (Clay_TextElementConfig *)jarg1; 
  arg2 = (Clay_TextElementConfigWrapMode)jarg2; 
  if (arg1) (arg1)->wrapMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Clay_TextElementConfig_wrapMode_get(void * jarg1) {
  int jresult ;
  Clay_TextElementConfig *arg1 = (Clay_TextElementConfig *) 0 ;
  Clay_TextElementConfigWrapMode result;
  
  arg1 = (Clay_TextElementConfig *)jarg1; 
  result = (Clay_TextElementConfigWrapMode) ((arg1)->wrapMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_TextElementConfig() {
  void * jresult ;
  Clay_TextElementConfig *result = 0 ;
  
  result = (Clay_TextElementConfig *)new Clay_TextElementConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_TextElementConfig(void * jarg1) {
  Clay_TextElementConfig *arg1 = (Clay_TextElementConfig *) 0 ;
  
  arg1 = (Clay_TextElementConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_ImageElementConfig_imageData_set(void * jarg1, void * jarg2) {
  Clay_ImageElementConfig *arg1 = (Clay_ImageElementConfig *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (Clay_ImageElementConfig *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->imageData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_ImageElementConfig_imageData_get(void * jarg1) {
  void * jresult ;
  Clay_ImageElementConfig *arg1 = (Clay_ImageElementConfig *) 0 ;
  void *result = 0 ;
  
  arg1 = (Clay_ImageElementConfig *)jarg1; 
  result = (void *) ((arg1)->imageData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_ImageElementConfig_sourceDimensions_set(void * jarg1, void * jarg2) {
  Clay_ImageElementConfig *arg1 = (Clay_ImageElementConfig *) 0 ;
  Clay_Dimensions *arg2 = (Clay_Dimensions *) 0 ;
  
  arg1 = (Clay_ImageElementConfig *)jarg1; 
  arg2 = (Clay_Dimensions *)jarg2; 
  if (arg1) (arg1)->sourceDimensions = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_ImageElementConfig_sourceDimensions_get(void * jarg1) {
  void * jresult ;
  Clay_ImageElementConfig *arg1 = (Clay_ImageElementConfig *) 0 ;
  Clay_Dimensions *result = 0 ;
  
  arg1 = (Clay_ImageElementConfig *)jarg1; 
  result = (Clay_Dimensions *)& ((arg1)->sourceDimensions);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_ImageElementConfig() {
  void * jresult ;
  Clay_ImageElementConfig *result = 0 ;
  
  result = (Clay_ImageElementConfig *)new Clay_ImageElementConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_ImageElementConfig(void * jarg1) {
  Clay_ImageElementConfig *arg1 = (Clay_ImageElementConfig *) 0 ;
  
  arg1 = (Clay_ImageElementConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_FloatingAttachPoints_element_set(void * jarg1, int jarg2) {
  Clay_FloatingAttachPoints *arg1 = (Clay_FloatingAttachPoints *) 0 ;
  Clay_FloatingAttachPointType arg2 ;
  
  arg1 = (Clay_FloatingAttachPoints *)jarg1; 
  arg2 = (Clay_FloatingAttachPointType)jarg2; 
  if (arg1) (arg1)->element = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Clay_FloatingAttachPoints_element_get(void * jarg1) {
  int jresult ;
  Clay_FloatingAttachPoints *arg1 = (Clay_FloatingAttachPoints *) 0 ;
  Clay_FloatingAttachPointType result;
  
  arg1 = (Clay_FloatingAttachPoints *)jarg1; 
  result = (Clay_FloatingAttachPointType) ((arg1)->element);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_FloatingAttachPoints_parent_set(void * jarg1, int jarg2) {
  Clay_FloatingAttachPoints *arg1 = (Clay_FloatingAttachPoints *) 0 ;
  Clay_FloatingAttachPointType arg2 ;
  
  arg1 = (Clay_FloatingAttachPoints *)jarg1; 
  arg2 = (Clay_FloatingAttachPointType)jarg2; 
  if (arg1) (arg1)->parent = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Clay_FloatingAttachPoints_parent_get(void * jarg1) {
  int jresult ;
  Clay_FloatingAttachPoints *arg1 = (Clay_FloatingAttachPoints *) 0 ;
  Clay_FloatingAttachPointType result;
  
  arg1 = (Clay_FloatingAttachPoints *)jarg1; 
  result = (Clay_FloatingAttachPointType) ((arg1)->parent);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_FloatingAttachPoints() {
  void * jresult ;
  Clay_FloatingAttachPoints *result = 0 ;
  
  result = (Clay_FloatingAttachPoints *)new Clay_FloatingAttachPoints();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_FloatingAttachPoints(void * jarg1) {
  Clay_FloatingAttachPoints *arg1 = (Clay_FloatingAttachPoints *) 0 ;
  
  arg1 = (Clay_FloatingAttachPoints *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_FloatingElementConfig_offset_set(void * jarg1, void * jarg2) {
  Clay_FloatingElementConfig *arg1 = (Clay_FloatingElementConfig *) 0 ;
  Clay_Vector2 *arg2 = (Clay_Vector2 *) 0 ;
  
  arg1 = (Clay_FloatingElementConfig *)jarg1; 
  arg2 = (Clay_Vector2 *)jarg2; 
  if (arg1) (arg1)->offset = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_FloatingElementConfig_offset_get(void * jarg1) {
  void * jresult ;
  Clay_FloatingElementConfig *arg1 = (Clay_FloatingElementConfig *) 0 ;
  Clay_Vector2 *result = 0 ;
  
  arg1 = (Clay_FloatingElementConfig *)jarg1; 
  result = (Clay_Vector2 *)& ((arg1)->offset);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_FloatingElementConfig_expand_set(void * jarg1, void * jarg2) {
  Clay_FloatingElementConfig *arg1 = (Clay_FloatingElementConfig *) 0 ;
  Clay_Dimensions *arg2 = (Clay_Dimensions *) 0 ;
  
  arg1 = (Clay_FloatingElementConfig *)jarg1; 
  arg2 = (Clay_Dimensions *)jarg2; 
  if (arg1) (arg1)->expand = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_FloatingElementConfig_expand_get(void * jarg1) {
  void * jresult ;
  Clay_FloatingElementConfig *arg1 = (Clay_FloatingElementConfig *) 0 ;
  Clay_Dimensions *result = 0 ;
  
  arg1 = (Clay_FloatingElementConfig *)jarg1; 
  result = (Clay_Dimensions *)& ((arg1)->expand);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_FloatingElementConfig_zIndex_set(void * jarg1, unsigned short jarg2) {
  Clay_FloatingElementConfig *arg1 = (Clay_FloatingElementConfig *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (Clay_FloatingElementConfig *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->zIndex = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Clay_FloatingElementConfig_zIndex_get(void * jarg1) {
  unsigned short jresult ;
  Clay_FloatingElementConfig *arg1 = (Clay_FloatingElementConfig *) 0 ;
  unsigned short result;
  
  arg1 = (Clay_FloatingElementConfig *)jarg1; 
  result = (unsigned short) ((arg1)->zIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_FloatingElementConfig_parentId_set(void * jarg1, unsigned int jarg2) {
  Clay_FloatingElementConfig *arg1 = (Clay_FloatingElementConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay_FloatingElementConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->parentId = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_FloatingElementConfig_parentId_get(void * jarg1) {
  unsigned int jresult ;
  Clay_FloatingElementConfig *arg1 = (Clay_FloatingElementConfig *) 0 ;
  unsigned int result;
  
  arg1 = (Clay_FloatingElementConfig *)jarg1; 
  result = (unsigned int) ((arg1)->parentId);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_FloatingElementConfig_attachment_set(void * jarg1, void * jarg2) {
  Clay_FloatingElementConfig *arg1 = (Clay_FloatingElementConfig *) 0 ;
  Clay_FloatingAttachPoints *arg2 = (Clay_FloatingAttachPoints *) 0 ;
  
  arg1 = (Clay_FloatingElementConfig *)jarg1; 
  arg2 = (Clay_FloatingAttachPoints *)jarg2; 
  if (arg1) (arg1)->attachment = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_FloatingElementConfig_attachment_get(void * jarg1) {
  void * jresult ;
  Clay_FloatingElementConfig *arg1 = (Clay_FloatingElementConfig *) 0 ;
  Clay_FloatingAttachPoints *result = 0 ;
  
  arg1 = (Clay_FloatingElementConfig *)jarg1; 
  result = (Clay_FloatingAttachPoints *)& ((arg1)->attachment);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_FloatingElementConfig_pointerCaptureMode_set(void * jarg1, int jarg2) {
  Clay_FloatingElementConfig *arg1 = (Clay_FloatingElementConfig *) 0 ;
  Clay_PointerCaptureMode arg2 ;
  
  arg1 = (Clay_FloatingElementConfig *)jarg1; 
  arg2 = (Clay_PointerCaptureMode)jarg2; 
  if (arg1) (arg1)->pointerCaptureMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Clay_FloatingElementConfig_pointerCaptureMode_get(void * jarg1) {
  int jresult ;
  Clay_FloatingElementConfig *arg1 = (Clay_FloatingElementConfig *) 0 ;
  Clay_PointerCaptureMode result;
  
  arg1 = (Clay_FloatingElementConfig *)jarg1; 
  result = (Clay_PointerCaptureMode) ((arg1)->pointerCaptureMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_FloatingElementConfig() {
  void * jresult ;
  Clay_FloatingElementConfig *result = 0 ;
  
  result = (Clay_FloatingElementConfig *)new Clay_FloatingElementConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_FloatingElementConfig(void * jarg1) {
  Clay_FloatingElementConfig *arg1 = (Clay_FloatingElementConfig *) 0 ;
  
  arg1 = (Clay_FloatingElementConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_CustomElementConfig_customData_set(void * jarg1, void * jarg2) {
  Clay_CustomElementConfig *arg1 = (Clay_CustomElementConfig *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (Clay_CustomElementConfig *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->customData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_CustomElementConfig_customData_get(void * jarg1) {
  void * jresult ;
  Clay_CustomElementConfig *arg1 = (Clay_CustomElementConfig *) 0 ;
  void *result = 0 ;
  
  arg1 = (Clay_CustomElementConfig *)jarg1; 
  result = (void *) ((arg1)->customData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_CustomElementConfig() {
  void * jresult ;
  Clay_CustomElementConfig *result = 0 ;
  
  result = (Clay_CustomElementConfig *)new Clay_CustomElementConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_CustomElementConfig(void * jarg1) {
  Clay_CustomElementConfig *arg1 = (Clay_CustomElementConfig *) 0 ;
  
  arg1 = (Clay_CustomElementConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_ScrollElementConfig_horizontal_set(void * jarg1, unsigned int jarg2) {
  Clay_ScrollElementConfig *arg1 = (Clay_ScrollElementConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (Clay_ScrollElementConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->horizontal = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_ScrollElementConfig_horizontal_get(void * jarg1) {
  unsigned int jresult ;
  Clay_ScrollElementConfig *arg1 = (Clay_ScrollElementConfig *) 0 ;
  bool result;
  
  arg1 = (Clay_ScrollElementConfig *)jarg1; 
  result = (bool) ((arg1)->horizontal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_ScrollElementConfig_vertical_set(void * jarg1, unsigned int jarg2) {
  Clay_ScrollElementConfig *arg1 = (Clay_ScrollElementConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (Clay_ScrollElementConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->vertical = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_ScrollElementConfig_vertical_get(void * jarg1) {
  unsigned int jresult ;
  Clay_ScrollElementConfig *arg1 = (Clay_ScrollElementConfig *) 0 ;
  bool result;
  
  arg1 = (Clay_ScrollElementConfig *)jarg1; 
  result = (bool) ((arg1)->vertical);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_ScrollElementConfig() {
  void * jresult ;
  Clay_ScrollElementConfig *result = 0 ;
  
  result = (Clay_ScrollElementConfig *)new Clay_ScrollElementConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_ScrollElementConfig(void * jarg1) {
  Clay_ScrollElementConfig *arg1 = (Clay_ScrollElementConfig *) 0 ;
  
  arg1 = (Clay_ScrollElementConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_Border_width_set(void * jarg1, unsigned int jarg2) {
  Clay_Border *arg1 = (Clay_Border *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay_Border *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_Border_width_get(void * jarg1) {
  unsigned int jresult ;
  Clay_Border *arg1 = (Clay_Border *) 0 ;
  unsigned int result;
  
  arg1 = (Clay_Border *)jarg1; 
  result = (unsigned int) ((arg1)->width);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_Border_color_set(void * jarg1, void * jarg2) {
  Clay_Border *arg1 = (Clay_Border *) 0 ;
  Clay_Color *arg2 = (Clay_Color *) 0 ;
  
  arg1 = (Clay_Border *)jarg1; 
  arg2 = (Clay_Color *)jarg2; 
  if (arg1) (arg1)->color = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_Border_color_get(void * jarg1) {
  void * jresult ;
  Clay_Border *arg1 = (Clay_Border *) 0 ;
  Clay_Color *result = 0 ;
  
  arg1 = (Clay_Border *)jarg1; 
  result = (Clay_Color *)& ((arg1)->color);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_Border() {
  void * jresult ;
  Clay_Border *result = 0 ;
  
  result = (Clay_Border *)new Clay_Border();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_Border(void * jarg1) {
  Clay_Border *arg1 = (Clay_Border *) 0 ;
  
  arg1 = (Clay_Border *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_BorderElementConfig_left_set(void * jarg1, void * jarg2) {
  Clay_BorderElementConfig *arg1 = (Clay_BorderElementConfig *) 0 ;
  Clay_Border *arg2 = (Clay_Border *) 0 ;
  
  arg1 = (Clay_BorderElementConfig *)jarg1; 
  arg2 = (Clay_Border *)jarg2; 
  if (arg1) (arg1)->left = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_BorderElementConfig_left_get(void * jarg1) {
  void * jresult ;
  Clay_BorderElementConfig *arg1 = (Clay_BorderElementConfig *) 0 ;
  Clay_Border *result = 0 ;
  
  arg1 = (Clay_BorderElementConfig *)jarg1; 
  result = (Clay_Border *)& ((arg1)->left);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_BorderElementConfig_right_set(void * jarg1, void * jarg2) {
  Clay_BorderElementConfig *arg1 = (Clay_BorderElementConfig *) 0 ;
  Clay_Border *arg2 = (Clay_Border *) 0 ;
  
  arg1 = (Clay_BorderElementConfig *)jarg1; 
  arg2 = (Clay_Border *)jarg2; 
  if (arg1) (arg1)->right = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_BorderElementConfig_right_get(void * jarg1) {
  void * jresult ;
  Clay_BorderElementConfig *arg1 = (Clay_BorderElementConfig *) 0 ;
  Clay_Border *result = 0 ;
  
  arg1 = (Clay_BorderElementConfig *)jarg1; 
  result = (Clay_Border *)& ((arg1)->right);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_BorderElementConfig_top_set(void * jarg1, void * jarg2) {
  Clay_BorderElementConfig *arg1 = (Clay_BorderElementConfig *) 0 ;
  Clay_Border *arg2 = (Clay_Border *) 0 ;
  
  arg1 = (Clay_BorderElementConfig *)jarg1; 
  arg2 = (Clay_Border *)jarg2; 
  if (arg1) (arg1)->top = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_BorderElementConfig_top_get(void * jarg1) {
  void * jresult ;
  Clay_BorderElementConfig *arg1 = (Clay_BorderElementConfig *) 0 ;
  Clay_Border *result = 0 ;
  
  arg1 = (Clay_BorderElementConfig *)jarg1; 
  result = (Clay_Border *)& ((arg1)->top);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_BorderElementConfig_bottom_set(void * jarg1, void * jarg2) {
  Clay_BorderElementConfig *arg1 = (Clay_BorderElementConfig *) 0 ;
  Clay_Border *arg2 = (Clay_Border *) 0 ;
  
  arg1 = (Clay_BorderElementConfig *)jarg1; 
  arg2 = (Clay_Border *)jarg2; 
  if (arg1) (arg1)->bottom = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_BorderElementConfig_bottom_get(void * jarg1) {
  void * jresult ;
  Clay_BorderElementConfig *arg1 = (Clay_BorderElementConfig *) 0 ;
  Clay_Border *result = 0 ;
  
  arg1 = (Clay_BorderElementConfig *)jarg1; 
  result = (Clay_Border *)& ((arg1)->bottom);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_BorderElementConfig_betweenChildren_set(void * jarg1, void * jarg2) {
  Clay_BorderElementConfig *arg1 = (Clay_BorderElementConfig *) 0 ;
  Clay_Border *arg2 = (Clay_Border *) 0 ;
  
  arg1 = (Clay_BorderElementConfig *)jarg1; 
  arg2 = (Clay_Border *)jarg2; 
  if (arg1) (arg1)->betweenChildren = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_BorderElementConfig_betweenChildren_get(void * jarg1) {
  void * jresult ;
  Clay_BorderElementConfig *arg1 = (Clay_BorderElementConfig *) 0 ;
  Clay_Border *result = 0 ;
  
  arg1 = (Clay_BorderElementConfig *)jarg1; 
  result = (Clay_Border *)& ((arg1)->betweenChildren);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_BorderElementConfig_cornerRadius_set(void * jarg1, void * jarg2) {
  Clay_BorderElementConfig *arg1 = (Clay_BorderElementConfig *) 0 ;
  Clay_CornerRadius *arg2 = (Clay_CornerRadius *) 0 ;
  
  arg1 = (Clay_BorderElementConfig *)jarg1; 
  arg2 = (Clay_CornerRadius *)jarg2; 
  if (arg1) (arg1)->cornerRadius = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_BorderElementConfig_cornerRadius_get(void * jarg1) {
  void * jresult ;
  Clay_BorderElementConfig *arg1 = (Clay_BorderElementConfig *) 0 ;
  Clay_CornerRadius *result = 0 ;
  
  arg1 = (Clay_BorderElementConfig *)jarg1; 
  result = (Clay_CornerRadius *)& ((arg1)->cornerRadius);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_BorderElementConfig() {
  void * jresult ;
  Clay_BorderElementConfig *result = 0 ;
  
  result = (Clay_BorderElementConfig *)new Clay_BorderElementConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_BorderElementConfig(void * jarg1) {
  Clay_BorderElementConfig *arg1 = (Clay_BorderElementConfig *) 0 ;
  
  arg1 = (Clay_BorderElementConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_ElementConfigUnion_rectangleElementConfig_set(void * jarg1, void * jarg2) {
  Clay_ElementConfigUnion *arg1 = (Clay_ElementConfigUnion *) 0 ;
  Clay_RectangleElementConfig *arg2 = (Clay_RectangleElementConfig *) 0 ;
  
  arg1 = (Clay_ElementConfigUnion *)jarg1; 
  arg2 = (Clay_RectangleElementConfig *)jarg2; 
  if (arg1) (arg1)->rectangleElementConfig = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_ElementConfigUnion_rectangleElementConfig_get(void * jarg1) {
  void * jresult ;
  Clay_ElementConfigUnion *arg1 = (Clay_ElementConfigUnion *) 0 ;
  Clay_RectangleElementConfig *result = 0 ;
  
  arg1 = (Clay_ElementConfigUnion *)jarg1; 
  result = (Clay_RectangleElementConfig *) ((arg1)->rectangleElementConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_ElementConfigUnion_textElementConfig_set(void * jarg1, void * jarg2) {
  Clay_ElementConfigUnion *arg1 = (Clay_ElementConfigUnion *) 0 ;
  Clay_TextElementConfig *arg2 = (Clay_TextElementConfig *) 0 ;
  
  arg1 = (Clay_ElementConfigUnion *)jarg1; 
  arg2 = (Clay_TextElementConfig *)jarg2; 
  if (arg1) (arg1)->textElementConfig = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_ElementConfigUnion_textElementConfig_get(void * jarg1) {
  void * jresult ;
  Clay_ElementConfigUnion *arg1 = (Clay_ElementConfigUnion *) 0 ;
  Clay_TextElementConfig *result = 0 ;
  
  arg1 = (Clay_ElementConfigUnion *)jarg1; 
  result = (Clay_TextElementConfig *) ((arg1)->textElementConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_ElementConfigUnion_imageElementConfig_set(void * jarg1, void * jarg2) {
  Clay_ElementConfigUnion *arg1 = (Clay_ElementConfigUnion *) 0 ;
  Clay_ImageElementConfig *arg2 = (Clay_ImageElementConfig *) 0 ;
  
  arg1 = (Clay_ElementConfigUnion *)jarg1; 
  arg2 = (Clay_ImageElementConfig *)jarg2; 
  if (arg1) (arg1)->imageElementConfig = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_ElementConfigUnion_imageElementConfig_get(void * jarg1) {
  void * jresult ;
  Clay_ElementConfigUnion *arg1 = (Clay_ElementConfigUnion *) 0 ;
  Clay_ImageElementConfig *result = 0 ;
  
  arg1 = (Clay_ElementConfigUnion *)jarg1; 
  result = (Clay_ImageElementConfig *) ((arg1)->imageElementConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_ElementConfigUnion_floatingElementConfig_set(void * jarg1, void * jarg2) {
  Clay_ElementConfigUnion *arg1 = (Clay_ElementConfigUnion *) 0 ;
  Clay_FloatingElementConfig *arg2 = (Clay_FloatingElementConfig *) 0 ;
  
  arg1 = (Clay_ElementConfigUnion *)jarg1; 
  arg2 = (Clay_FloatingElementConfig *)jarg2; 
  if (arg1) (arg1)->floatingElementConfig = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_ElementConfigUnion_floatingElementConfig_get(void * jarg1) {
  void * jresult ;
  Clay_ElementConfigUnion *arg1 = (Clay_ElementConfigUnion *) 0 ;
  Clay_FloatingElementConfig *result = 0 ;
  
  arg1 = (Clay_ElementConfigUnion *)jarg1; 
  result = (Clay_FloatingElementConfig *) ((arg1)->floatingElementConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_ElementConfigUnion_customElementConfig_set(void * jarg1, void * jarg2) {
  Clay_ElementConfigUnion *arg1 = (Clay_ElementConfigUnion *) 0 ;
  Clay_CustomElementConfig *arg2 = (Clay_CustomElementConfig *) 0 ;
  
  arg1 = (Clay_ElementConfigUnion *)jarg1; 
  arg2 = (Clay_CustomElementConfig *)jarg2; 
  if (arg1) (arg1)->customElementConfig = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_ElementConfigUnion_customElementConfig_get(void * jarg1) {
  void * jresult ;
  Clay_ElementConfigUnion *arg1 = (Clay_ElementConfigUnion *) 0 ;
  Clay_CustomElementConfig *result = 0 ;
  
  arg1 = (Clay_ElementConfigUnion *)jarg1; 
  result = (Clay_CustomElementConfig *) ((arg1)->customElementConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_ElementConfigUnion_scrollElementConfig_set(void * jarg1, void * jarg2) {
  Clay_ElementConfigUnion *arg1 = (Clay_ElementConfigUnion *) 0 ;
  Clay_ScrollElementConfig *arg2 = (Clay_ScrollElementConfig *) 0 ;
  
  arg1 = (Clay_ElementConfigUnion *)jarg1; 
  arg2 = (Clay_ScrollElementConfig *)jarg2; 
  if (arg1) (arg1)->scrollElementConfig = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_ElementConfigUnion_scrollElementConfig_get(void * jarg1) {
  void * jresult ;
  Clay_ElementConfigUnion *arg1 = (Clay_ElementConfigUnion *) 0 ;
  Clay_ScrollElementConfig *result = 0 ;
  
  arg1 = (Clay_ElementConfigUnion *)jarg1; 
  result = (Clay_ScrollElementConfig *) ((arg1)->scrollElementConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_ElementConfigUnion_borderElementConfig_set(void * jarg1, void * jarg2) {
  Clay_ElementConfigUnion *arg1 = (Clay_ElementConfigUnion *) 0 ;
  Clay_BorderElementConfig *arg2 = (Clay_BorderElementConfig *) 0 ;
  
  arg1 = (Clay_ElementConfigUnion *)jarg1; 
  arg2 = (Clay_BorderElementConfig *)jarg2; 
  if (arg1) (arg1)->borderElementConfig = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_ElementConfigUnion_borderElementConfig_get(void * jarg1) {
  void * jresult ;
  Clay_ElementConfigUnion *arg1 = (Clay_ElementConfigUnion *) 0 ;
  Clay_BorderElementConfig *result = 0 ;
  
  arg1 = (Clay_ElementConfigUnion *)jarg1; 
  result = (Clay_BorderElementConfig *) ((arg1)->borderElementConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_ElementConfigUnion() {
  void * jresult ;
  Clay_ElementConfigUnion *result = 0 ;
  
  result = (Clay_ElementConfigUnion *)new Clay_ElementConfigUnion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_ElementConfigUnion(void * jarg1) {
  Clay_ElementConfigUnion *arg1 = (Clay_ElementConfigUnion *) 0 ;
  
  arg1 = (Clay_ElementConfigUnion *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_ElementConfig_type_set(void * jarg1, int jarg2) {
  Clay_ElementConfig *arg1 = (Clay_ElementConfig *) 0 ;
  Clay__ElementConfigType arg2 ;
  
  arg1 = (Clay_ElementConfig *)jarg1; 
  arg2 = (Clay__ElementConfigType)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Clay_ElementConfig_type_get(void * jarg1) {
  int jresult ;
  Clay_ElementConfig *arg1 = (Clay_ElementConfig *) 0 ;
  Clay__ElementConfigType result;
  
  arg1 = (Clay_ElementConfig *)jarg1; 
  result = (Clay__ElementConfigType) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_ElementConfig_config_set(void * jarg1, void * jarg2) {
  Clay_ElementConfig *arg1 = (Clay_ElementConfig *) 0 ;
  Clay_ElementConfigUnion *arg2 = (Clay_ElementConfigUnion *) 0 ;
  
  arg1 = (Clay_ElementConfig *)jarg1; 
  arg2 = (Clay_ElementConfigUnion *)jarg2; 
  if (arg1) (arg1)->config = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_ElementConfig_config_get(void * jarg1) {
  void * jresult ;
  Clay_ElementConfig *arg1 = (Clay_ElementConfig *) 0 ;
  Clay_ElementConfigUnion *result = 0 ;
  
  arg1 = (Clay_ElementConfig *)jarg1; 
  result = (Clay_ElementConfigUnion *)& ((arg1)->config);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_ElementConfig() {
  void * jresult ;
  Clay_ElementConfig *result = 0 ;
  
  result = (Clay_ElementConfig *)new Clay_ElementConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_ElementConfig(void * jarg1) {
  Clay_ElementConfig *arg1 = (Clay_ElementConfig *) 0 ;
  
  arg1 = (Clay_ElementConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_ScrollContainerData_scrollPosition_set(void * jarg1, void * jarg2) {
  Clay_ScrollContainerData *arg1 = (Clay_ScrollContainerData *) 0 ;
  Clay_Vector2 *arg2 = (Clay_Vector2 *) 0 ;
  
  arg1 = (Clay_ScrollContainerData *)jarg1; 
  arg2 = (Clay_Vector2 *)jarg2; 
  if (arg1) (arg1)->scrollPosition = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_ScrollContainerData_scrollPosition_get(void * jarg1) {
  void * jresult ;
  Clay_ScrollContainerData *arg1 = (Clay_ScrollContainerData *) 0 ;
  Clay_Vector2 *result = 0 ;
  
  arg1 = (Clay_ScrollContainerData *)jarg1; 
  result = (Clay_Vector2 *) ((arg1)->scrollPosition);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_ScrollContainerData_scrollContainerDimensions_set(void * jarg1, void * jarg2) {
  Clay_ScrollContainerData *arg1 = (Clay_ScrollContainerData *) 0 ;
  Clay_Dimensions *arg2 = (Clay_Dimensions *) 0 ;
  
  arg1 = (Clay_ScrollContainerData *)jarg1; 
  arg2 = (Clay_Dimensions *)jarg2; 
  if (arg1) (arg1)->scrollContainerDimensions = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_ScrollContainerData_scrollContainerDimensions_get(void * jarg1) {
  void * jresult ;
  Clay_ScrollContainerData *arg1 = (Clay_ScrollContainerData *) 0 ;
  Clay_Dimensions *result = 0 ;
  
  arg1 = (Clay_ScrollContainerData *)jarg1; 
  result = (Clay_Dimensions *)& ((arg1)->scrollContainerDimensions);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_ScrollContainerData_contentDimensions_set(void * jarg1, void * jarg2) {
  Clay_ScrollContainerData *arg1 = (Clay_ScrollContainerData *) 0 ;
  Clay_Dimensions *arg2 = (Clay_Dimensions *) 0 ;
  
  arg1 = (Clay_ScrollContainerData *)jarg1; 
  arg2 = (Clay_Dimensions *)jarg2; 
  if (arg1) (arg1)->contentDimensions = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_ScrollContainerData_contentDimensions_get(void * jarg1) {
  void * jresult ;
  Clay_ScrollContainerData *arg1 = (Clay_ScrollContainerData *) 0 ;
  Clay_Dimensions *result = 0 ;
  
  arg1 = (Clay_ScrollContainerData *)jarg1; 
  result = (Clay_Dimensions *)& ((arg1)->contentDimensions);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_ScrollContainerData_config_set(void * jarg1, void * jarg2) {
  Clay_ScrollContainerData *arg1 = (Clay_ScrollContainerData *) 0 ;
  Clay_ScrollElementConfig *arg2 = (Clay_ScrollElementConfig *) 0 ;
  
  arg1 = (Clay_ScrollContainerData *)jarg1; 
  arg2 = (Clay_ScrollElementConfig *)jarg2; 
  if (arg1) (arg1)->config = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_ScrollContainerData_config_get(void * jarg1) {
  void * jresult ;
  Clay_ScrollContainerData *arg1 = (Clay_ScrollContainerData *) 0 ;
  Clay_ScrollElementConfig *result = 0 ;
  
  arg1 = (Clay_ScrollContainerData *)jarg1; 
  result = (Clay_ScrollElementConfig *)& ((arg1)->config);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_ScrollContainerData_found_set(void * jarg1, unsigned int jarg2) {
  Clay_ScrollContainerData *arg1 = (Clay_ScrollContainerData *) 0 ;
  bool arg2 ;
  
  arg1 = (Clay_ScrollContainerData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->found = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_ScrollContainerData_found_get(void * jarg1) {
  unsigned int jresult ;
  Clay_ScrollContainerData *arg1 = (Clay_ScrollContainerData *) 0 ;
  bool result;
  
  arg1 = (Clay_ScrollContainerData *)jarg1; 
  result = (bool) ((arg1)->found);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_ScrollContainerData() {
  void * jresult ;
  Clay_ScrollContainerData *result = 0 ;
  
  result = (Clay_ScrollContainerData *)new Clay_ScrollContainerData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_ScrollContainerData(void * jarg1) {
  Clay_ScrollContainerData *arg1 = (Clay_ScrollContainerData *) 0 ;
  
  arg1 = (Clay_ScrollContainerData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_RenderCommand_boundingBox_set(void * jarg1, void * jarg2) {
  Clay_RenderCommand *arg1 = (Clay_RenderCommand *) 0 ;
  Clay_BoundingBox *arg2 = (Clay_BoundingBox *) 0 ;
  
  arg1 = (Clay_RenderCommand *)jarg1; 
  arg2 = (Clay_BoundingBox *)jarg2; 
  if (arg1) (arg1)->boundingBox = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_RenderCommand_boundingBox_get(void * jarg1) {
  void * jresult ;
  Clay_RenderCommand *arg1 = (Clay_RenderCommand *) 0 ;
  Clay_BoundingBox *result = 0 ;
  
  arg1 = (Clay_RenderCommand *)jarg1; 
  result = (Clay_BoundingBox *)& ((arg1)->boundingBox);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_RenderCommand_config_set(void * jarg1, void * jarg2) {
  Clay_RenderCommand *arg1 = (Clay_RenderCommand *) 0 ;
  Clay_ElementConfigUnion *arg2 = (Clay_ElementConfigUnion *) 0 ;
  
  arg1 = (Clay_RenderCommand *)jarg1; 
  arg2 = (Clay_ElementConfigUnion *)jarg2; 
  if (arg1) (arg1)->config = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_RenderCommand_config_get(void * jarg1) {
  void * jresult ;
  Clay_RenderCommand *arg1 = (Clay_RenderCommand *) 0 ;
  Clay_ElementConfigUnion *result = 0 ;
  
  arg1 = (Clay_RenderCommand *)jarg1; 
  result = (Clay_ElementConfigUnion *)& ((arg1)->config);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_RenderCommand_text_set(void * jarg1, void * jarg2) {
  Clay_RenderCommand *arg1 = (Clay_RenderCommand *) 0 ;
  Clay_String *arg2 = (Clay_String *) 0 ;
  
  arg1 = (Clay_RenderCommand *)jarg1; 
  arg2 = (Clay_String *)jarg2; 
  if (arg1) (arg1)->text = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_RenderCommand_text_get(void * jarg1) {
  void * jresult ;
  Clay_RenderCommand *arg1 = (Clay_RenderCommand *) 0 ;
  Clay_String *result = 0 ;
  
  arg1 = (Clay_RenderCommand *)jarg1; 
  result = (Clay_String *)& ((arg1)->text);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_RenderCommand_id_set(void * jarg1, unsigned int jarg2) {
  Clay_RenderCommand *arg1 = (Clay_RenderCommand *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay_RenderCommand *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_RenderCommand_id_get(void * jarg1) {
  unsigned int jresult ;
  Clay_RenderCommand *arg1 = (Clay_RenderCommand *) 0 ;
  unsigned int result;
  
  arg1 = (Clay_RenderCommand *)jarg1; 
  result = (unsigned int) ((arg1)->id);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_RenderCommand_commandType_set(void * jarg1, int jarg2) {
  Clay_RenderCommand *arg1 = (Clay_RenderCommand *) 0 ;
  Clay_RenderCommandType arg2 ;
  
  arg1 = (Clay_RenderCommand *)jarg1; 
  arg2 = (Clay_RenderCommandType)jarg2; 
  if (arg1) (arg1)->commandType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Clay_RenderCommand_commandType_get(void * jarg1) {
  int jresult ;
  Clay_RenderCommand *arg1 = (Clay_RenderCommand *) 0 ;
  Clay_RenderCommandType result;
  
  arg1 = (Clay_RenderCommand *)jarg1; 
  result = (Clay_RenderCommandType) ((arg1)->commandType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_RenderCommand() {
  void * jresult ;
  Clay_RenderCommand *result = 0 ;
  
  result = (Clay_RenderCommand *)new Clay_RenderCommand();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_RenderCommand(void * jarg1) {
  Clay_RenderCommand *arg1 = (Clay_RenderCommand *) 0 ;
  
  arg1 = (Clay_RenderCommand *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_RenderCommandArray_capacity_set(void * jarg1, unsigned int jarg2) {
  Clay_RenderCommandArray *arg1 = (Clay_RenderCommandArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay_RenderCommandArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->capacity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_RenderCommandArray_capacity_get(void * jarg1) {
  unsigned int jresult ;
  Clay_RenderCommandArray *arg1 = (Clay_RenderCommandArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay_RenderCommandArray *)jarg1; 
  result = (unsigned int) ((arg1)->capacity);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_RenderCommandArray_length_set(void * jarg1, unsigned int jarg2) {
  Clay_RenderCommandArray *arg1 = (Clay_RenderCommandArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay_RenderCommandArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_RenderCommandArray_length_get(void * jarg1) {
  unsigned int jresult ;
  Clay_RenderCommandArray *arg1 = (Clay_RenderCommandArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay_RenderCommandArray *)jarg1; 
  result = (unsigned int) ((arg1)->length);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_RenderCommandArray_internalArray_set(void * jarg1, void * jarg2) {
  Clay_RenderCommandArray *arg1 = (Clay_RenderCommandArray *) 0 ;
  Clay_RenderCommand *arg2 = (Clay_RenderCommand *) 0 ;
  
  arg1 = (Clay_RenderCommandArray *)jarg1; 
  arg2 = (Clay_RenderCommand *)jarg2; 
  if (arg1) (arg1)->internalArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_RenderCommandArray_internalArray_get(void * jarg1) {
  void * jresult ;
  Clay_RenderCommandArray *arg1 = (Clay_RenderCommandArray *) 0 ;
  Clay_RenderCommand *result = 0 ;
  
  arg1 = (Clay_RenderCommandArray *)jarg1; 
  result = (Clay_RenderCommand *) ((arg1)->internalArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_RenderCommandArray() {
  void * jresult ;
  Clay_RenderCommandArray *result = 0 ;
  
  result = (Clay_RenderCommandArray *)new Clay_RenderCommandArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_RenderCommandArray(void * jarg1) {
  Clay_RenderCommandArray *arg1 = (Clay_RenderCommandArray *) 0 ;
  
  arg1 = (Clay_RenderCommandArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_PointerData_position_set(void * jarg1, void * jarg2) {
  Clay_PointerData *arg1 = (Clay_PointerData *) 0 ;
  Clay_Vector2 *arg2 = (Clay_Vector2 *) 0 ;
  
  arg1 = (Clay_PointerData *)jarg1; 
  arg2 = (Clay_Vector2 *)jarg2; 
  if (arg1) (arg1)->position = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_PointerData_position_get(void * jarg1) {
  void * jresult ;
  Clay_PointerData *arg1 = (Clay_PointerData *) 0 ;
  Clay_Vector2 *result = 0 ;
  
  arg1 = (Clay_PointerData *)jarg1; 
  result = (Clay_Vector2 *)& ((arg1)->position);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_PointerData_state_set(void * jarg1, int jarg2) {
  Clay_PointerData *arg1 = (Clay_PointerData *) 0 ;
  Clay_PointerDataInteractionState arg2 ;
  
  arg1 = (Clay_PointerData *)jarg1; 
  arg2 = (Clay_PointerDataInteractionState)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Clay_PointerData_state_get(void * jarg1) {
  int jresult ;
  Clay_PointerData *arg1 = (Clay_PointerData *) 0 ;
  Clay_PointerDataInteractionState result;
  
  arg1 = (Clay_PointerData *)jarg1; 
  result = (Clay_PointerDataInteractionState) ((arg1)->state);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_PointerData() {
  void * jresult ;
  Clay_PointerData *result = 0 ;
  
  result = (Clay_PointerData *)new Clay_PointerData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_PointerData(void * jarg1) {
  Clay_PointerData *arg1 = (Clay_PointerData *) 0 ;
  
  arg1 = (Clay_PointerData *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_MinMemorySize() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)Clay_MinMemorySize();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_CreateArenaWithCapacityAndMemory(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  void *arg2 = (void *) 0 ;
  Clay_Arena result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (void *)jarg2; 
  result = Clay_CreateArenaWithCapacityAndMemory(arg1,arg2);
  jresult = new Clay_Arena(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_SetPointerState(void * jarg1, unsigned int jarg2) {
  Clay_Vector2 arg1 ;
  bool arg2 ;
  Clay_Vector2 *argp1 ;
  
  argp1 = (Clay_Vector2 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_Vector2", 0);
    return ;
  }
  arg1 = *argp1; 
  arg2 = jarg2 ? true : false; 
  Clay_SetPointerState(SWIG_STD_MOVE(arg1),arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_Initialize(void * jarg1, void * jarg2) {
  Clay_Arena arg1 ;
  Clay_Dimensions arg2 ;
  Clay_Arena *argp1 ;
  Clay_Dimensions *argp2 ;
  
  argp1 = (Clay_Arena *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_Arena", 0);
    return ;
  }
  arg1 = *argp1; 
  argp2 = (Clay_Dimensions *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_Dimensions", 0);
    return ;
  }
  arg2 = *argp2; 
  Clay_Initialize(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_UpdateScrollContainers(unsigned int jarg1, void * jarg2, float jarg3) {
  bool arg1 ;
  Clay_Vector2 arg2 ;
  float arg3 ;
  Clay_Vector2 *argp2 ;
  
  arg1 = jarg1 ? true : false; 
  argp2 = (Clay_Vector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_Vector2", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (float)jarg3; 
  Clay_UpdateScrollContainers(arg1,SWIG_STD_MOVE(arg2),arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_SetLayoutDimensions(void * jarg1) {
  Clay_Dimensions arg1 ;
  Clay_Dimensions *argp1 ;
  
  argp1 = (Clay_Dimensions *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_Dimensions", 0);
    return ;
  }
  arg1 = *argp1; 
  Clay_SetLayoutDimensions(SWIG_STD_MOVE(arg1));
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_BeginLayout() {
  Clay_BeginLayout();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_EndLayout() {
  void * jresult ;
  Clay_RenderCommandArray result;
  
  result = Clay_EndLayout();
  jresult = new Clay_RenderCommandArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_GetElementId(void * jarg1) {
  void * jresult ;
  Clay_String arg1 ;
  Clay_String *argp1 ;
  Clay_ElementId result;
  
  argp1 = (Clay_String *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_String", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = Clay_GetElementId(SWIG_STD_MOVE(arg1));
  jresult = new Clay_ElementId(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_GetElementIdWithIndex(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Clay_String arg1 ;
  unsigned int arg2 ;
  Clay_String *argp1 ;
  Clay_ElementId result;
  
  argp1 = (Clay_String *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_String", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  result = Clay_GetElementIdWithIndex(SWIG_STD_MOVE(arg1),arg2);
  jresult = new Clay_ElementId(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_Hovered() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Clay_Hovered();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_OnHover(void * jarg1, void * jarg2) {
  void (*arg1)(Clay_ElementId,Clay_PointerData,intptr_t) = (void (*)(Clay_ElementId,Clay_PointerData,intptr_t)) 0 ;
  intptr_t arg2 ;
  intptr_t *argp2 ;
  
  arg1 = (void (*)(Clay_ElementId,Clay_PointerData,intptr_t))jarg1; 
  argp2 = (intptr_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null intptr_t", 0);
    return ;
  }
  arg2 = *argp2; 
  Clay_OnHover(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_GetScrollContainerData(void * jarg1) {
  void * jresult ;
  Clay_ElementId arg1 ;
  Clay_ElementId *argp1 ;
  Clay_ScrollContainerData result;
  
  argp1 = (Clay_ElementId *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_ElementId", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = Clay_GetScrollContainerData(SWIG_STD_MOVE(arg1));
  jresult = new Clay_ScrollContainerData(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_SetMeasureTextFunction(void * jarg1) {
  Clay_Dimensions (*arg1)(Clay_String *,Clay_TextElementConfig *) = (Clay_Dimensions (*)(Clay_String *,Clay_TextElementConfig *)) 0 ;
  
  arg1 = (Clay_Dimensions (*)(Clay_String *,Clay_TextElementConfig *))jarg1; 
  Clay_SetMeasureTextFunction(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_SetQueryScrollOffsetFunction(void * jarg1) {
  Clay_Vector2 (*arg1)(unsigned int) = (Clay_Vector2 (*)(unsigned int)) 0 ;
  
  arg1 = (Clay_Vector2 (*)(unsigned int))jarg1; 
  Clay_SetQueryScrollOffsetFunction(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_RenderCommandArray_Get(void * jarg1, int jarg2) {
  void * jresult ;
  Clay_RenderCommandArray *arg1 = (Clay_RenderCommandArray *) 0 ;
  int arg2 ;
  Clay_RenderCommand *result = 0 ;
  
  arg1 = (Clay_RenderCommandArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Clay_RenderCommand *)Clay_RenderCommandArray_Get(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_SetDebugModeEnabled(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Clay_SetDebugModeEnabled(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_SetCullingEnabled(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Clay_SetCullingEnabled(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__OpenElement() {
  Clay__OpenElement();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__CloseElement() {
  Clay__CloseElement();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__StoreLayoutConfig(void * jarg1) {
  void * jresult ;
  Clay_LayoutConfig arg1 ;
  Clay_LayoutConfig *argp1 ;
  Clay_LayoutConfig *result = 0 ;
  
  argp1 = (Clay_LayoutConfig *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_LayoutConfig", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (Clay_LayoutConfig *)Clay__StoreLayoutConfig(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__ElementPostConfiguration() {
  Clay__ElementPostConfiguration();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__AttachId(void * jarg1) {
  Clay_ElementId arg1 ;
  Clay_ElementId *argp1 ;
  
  argp1 = (Clay_ElementId *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_ElementId", 0);
    return ;
  }
  arg1 = *argp1; 
  Clay__AttachId(SWIG_STD_MOVE(arg1));
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__AttachLayoutConfig(void * jarg1) {
  Clay_LayoutConfig *arg1 = (Clay_LayoutConfig *) 0 ;
  
  arg1 = (Clay_LayoutConfig *)jarg1; 
  Clay__AttachLayoutConfig(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__AttachElementConfig(void * jarg1, int jarg2) {
  Clay_ElementConfigUnion arg1 ;
  Clay__ElementConfigType arg2 ;
  Clay_ElementConfigUnion *argp1 ;
  
  argp1 = (Clay_ElementConfigUnion *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_ElementConfigUnion", 0);
    return ;
  }
  arg1 = *argp1; 
  arg2 = (Clay__ElementConfigType)jarg2; 
  Clay__AttachElementConfig(SWIG_STD_MOVE(arg1),arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__StoreRectangleElementConfig(void * jarg1) {
  void * jresult ;
  Clay_RectangleElementConfig arg1 ;
  Clay_RectangleElementConfig *argp1 ;
  Clay_RectangleElementConfig *result = 0 ;
  
  argp1 = (Clay_RectangleElementConfig *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_RectangleElementConfig", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (Clay_RectangleElementConfig *)Clay__StoreRectangleElementConfig(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__StoreTextElementConfig(void * jarg1) {
  void * jresult ;
  Clay_TextElementConfig arg1 ;
  Clay_TextElementConfig *argp1 ;
  Clay_TextElementConfig *result = 0 ;
  
  argp1 = (Clay_TextElementConfig *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_TextElementConfig", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (Clay_TextElementConfig *)Clay__StoreTextElementConfig(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__StoreImageElementConfig(void * jarg1) {
  void * jresult ;
  Clay_ImageElementConfig arg1 ;
  Clay_ImageElementConfig *argp1 ;
  Clay_ImageElementConfig *result = 0 ;
  
  argp1 = (Clay_ImageElementConfig *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_ImageElementConfig", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (Clay_ImageElementConfig *)Clay__StoreImageElementConfig(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__StoreFloatingElementConfig(void * jarg1) {
  void * jresult ;
  Clay_FloatingElementConfig arg1 ;
  Clay_FloatingElementConfig *argp1 ;
  Clay_FloatingElementConfig *result = 0 ;
  
  argp1 = (Clay_FloatingElementConfig *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_FloatingElementConfig", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (Clay_FloatingElementConfig *)Clay__StoreFloatingElementConfig(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__StoreCustomElementConfig(void * jarg1) {
  void * jresult ;
  Clay_CustomElementConfig arg1 ;
  Clay_CustomElementConfig *argp1 ;
  Clay_CustomElementConfig *result = 0 ;
  
  argp1 = (Clay_CustomElementConfig *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_CustomElementConfig", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (Clay_CustomElementConfig *)Clay__StoreCustomElementConfig(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__StoreScrollElementConfig(void * jarg1) {
  void * jresult ;
  Clay_ScrollElementConfig arg1 ;
  Clay_ScrollElementConfig *argp1 ;
  Clay_ScrollElementConfig *result = 0 ;
  
  argp1 = (Clay_ScrollElementConfig *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_ScrollElementConfig", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (Clay_ScrollElementConfig *)Clay__StoreScrollElementConfig(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__StoreBorderElementConfig(void * jarg1) {
  void * jresult ;
  Clay_BorderElementConfig arg1 ;
  Clay_BorderElementConfig *argp1 ;
  Clay_BorderElementConfig *result = 0 ;
  
  argp1 = (Clay_BorderElementConfig *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_BorderElementConfig", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (Clay_BorderElementConfig *)Clay__StoreBorderElementConfig(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__HashString__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  Clay_String arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  Clay_String *argp1 ;
  Clay_ElementId result;
  
  argp1 = (Clay_String *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_String", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = Clay__HashString(SWIG_STD_MOVE(arg1),arg2,arg3);
  jresult = new Clay_ElementId(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__Noop() {
  Clay__Noop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__OpenTextElement(void * jarg1, void * jarg2) {
  Clay_String arg1 ;
  Clay_TextElementConfig *arg2 = (Clay_TextElementConfig *) 0 ;
  Clay_String *argp1 ;
  
  argp1 = (Clay_String *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_String", 0);
    return ;
  }
  arg1 = *argp1; 
  arg2 = (Clay_TextElementConfig *)jarg2; 
  Clay__OpenTextElement(SWIG_STD_MOVE(arg1),arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__debugViewHighlightColor_set(void * jarg1) {
  Clay_Color *arg1 = (Clay_Color *) 0 ;
  
  arg1 = (Clay_Color *)jarg1; 
  Clay__debugViewHighlightColor = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__debugViewHighlightColor_get() {
  void * jresult ;
  Clay_Color *result = 0 ;
  
  result = (Clay_Color *)&Clay__debugViewHighlightColor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__debugViewWidth_set(unsigned int jarg1) {
  unsigned int arg1 ;
  
  arg1 = (unsigned int)jarg1; 
  Clay__debugViewWidth = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__debugViewWidth_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)Clay__debugViewWidth;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__debugMaxElementsLatch_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Clay__debugMaxElementsLatch = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__debugMaxElementsLatch_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Clay__debugMaxElementsLatch;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CLAY_MAX_ELEMENT_COUNT_get() {
  int jresult ;
  int result;
  
  result = (int)(8192);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CLAY__TEXT_MEASURE_HASH_BUCKET_COUNT_get() {
  int jresult ;
  int result;
  
  result = (int)(128);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CLAY_MEASURE_TEXT_CACHE_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(8192*2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CLAY__NULL_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CLAY__MAXFLOAT_get() {
  float jresult ;
  float result;
  
  result = (float)(3.40282346638528859812e+38F);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__warningsEnabled_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Clay__warningsEnabled = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__warningsEnabled_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Clay__warningsEnabled;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLAY__SPACECHAR_set(void * jarg1) {
  Clay_String *arg1 = (Clay_String *) 0 ;
  
  arg1 = (Clay_String *)jarg1; 
  CLAY__SPACECHAR = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CLAY__SPACECHAR_get() {
  void * jresult ;
  Clay_String *result = 0 ;
  
  result = (Clay_String *)&CLAY__SPACECHAR;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLAY__STRING_DEFAULT_set(void * jarg1) {
  Clay_String *arg1 = (Clay_String *) 0 ;
  
  arg1 = (Clay_String *)jarg1; 
  CLAY__STRING_DEFAULT = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CLAY__STRING_DEFAULT_get() {
  void * jresult ;
  Clay_String *result = 0 ;
  
  result = (Clay_String *)&CLAY__STRING_DEFAULT;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_BooleanWarnings_maxElementsExceeded_set(void * jarg1, unsigned int jarg2) {
  Clay_BooleanWarnings *arg1 = (Clay_BooleanWarnings *) 0 ;
  bool arg2 ;
  
  arg1 = (Clay_BooleanWarnings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->maxElementsExceeded = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_BooleanWarnings_maxElementsExceeded_get(void * jarg1) {
  unsigned int jresult ;
  Clay_BooleanWarnings *arg1 = (Clay_BooleanWarnings *) 0 ;
  bool result;
  
  arg1 = (Clay_BooleanWarnings *)jarg1; 
  result = (bool) ((arg1)->maxElementsExceeded);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_BooleanWarnings_maxRenderCommandsExceeded_set(void * jarg1, unsigned int jarg2) {
  Clay_BooleanWarnings *arg1 = (Clay_BooleanWarnings *) 0 ;
  bool arg2 ;
  
  arg1 = (Clay_BooleanWarnings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->maxRenderCommandsExceeded = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_BooleanWarnings_maxRenderCommandsExceeded_get(void * jarg1) {
  unsigned int jresult ;
  Clay_BooleanWarnings *arg1 = (Clay_BooleanWarnings *) 0 ;
  bool result;
  
  arg1 = (Clay_BooleanWarnings *)jarg1; 
  result = (bool) ((arg1)->maxRenderCommandsExceeded);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_BooleanWarnings_maxStringMeasureCacheExceeded_set(void * jarg1, unsigned int jarg2) {
  Clay_BooleanWarnings *arg1 = (Clay_BooleanWarnings *) 0 ;
  bool arg2 ;
  
  arg1 = (Clay_BooleanWarnings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->maxStringMeasureCacheExceeded = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_BooleanWarnings_maxStringMeasureCacheExceeded_get(void * jarg1) {
  unsigned int jresult ;
  Clay_BooleanWarnings *arg1 = (Clay_BooleanWarnings *) 0 ;
  bool result;
  
  arg1 = (Clay_BooleanWarnings *)jarg1; 
  result = (bool) ((arg1)->maxStringMeasureCacheExceeded);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_BooleanWarnings() {
  void * jresult ;
  Clay_BooleanWarnings *result = 0 ;
  
  result = (Clay_BooleanWarnings *)new Clay_BooleanWarnings();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_BooleanWarnings(void * jarg1) {
  Clay_BooleanWarnings *arg1 = (Clay_BooleanWarnings *) 0 ;
  
  arg1 = (Clay_BooleanWarnings *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__booleanWarnings_set(void * jarg1) {
  Clay_BooleanWarnings *arg1 = (Clay_BooleanWarnings *) 0 ;
  
  arg1 = (Clay_BooleanWarnings *)jarg1; 
  Clay__booleanWarnings = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__booleanWarnings_get() {
  void * jresult ;
  Clay_BooleanWarnings *result = 0 ;
  
  result = (Clay_BooleanWarnings *)&Clay__booleanWarnings;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__Warning_baseMessage_set(void * jarg1, void * jarg2) {
  Clay__Warning *arg1 = (Clay__Warning *) 0 ;
  Clay_String *arg2 = (Clay_String *) 0 ;
  
  arg1 = (Clay__Warning *)jarg1; 
  arg2 = (Clay_String *)jarg2; 
  if (arg1) (arg1)->baseMessage = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__Warning_baseMessage_get(void * jarg1) {
  void * jresult ;
  Clay__Warning *arg1 = (Clay__Warning *) 0 ;
  Clay_String *result = 0 ;
  
  arg1 = (Clay__Warning *)jarg1; 
  result = (Clay_String *)& ((arg1)->baseMessage);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__Warning_dynamicMessage_set(void * jarg1, void * jarg2) {
  Clay__Warning *arg1 = (Clay__Warning *) 0 ;
  Clay_String *arg2 = (Clay_String *) 0 ;
  
  arg1 = (Clay__Warning *)jarg1; 
  arg2 = (Clay_String *)jarg2; 
  if (arg1) (arg1)->dynamicMessage = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__Warning_dynamicMessage_get(void * jarg1) {
  void * jresult ;
  Clay__Warning *arg1 = (Clay__Warning *) 0 ;
  Clay_String *result = 0 ;
  
  arg1 = (Clay__Warning *)jarg1; 
  result = (Clay_String *)& ((arg1)->dynamicMessage);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__Warning() {
  void * jresult ;
  Clay__Warning *result = 0 ;
  
  result = (Clay__Warning *)new Clay__Warning();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__Warning(void * jarg1) {
  Clay__Warning *arg1 = (Clay__Warning *) 0 ;
  
  arg1 = (Clay__Warning *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLAY__WARNING_DEFAULT_set(void * jarg1) {
  Clay__Warning *arg1 = (Clay__Warning *) 0 ;
  
  arg1 = (Clay__Warning *)jarg1; 
  CLAY__WARNING_DEFAULT = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CLAY__WARNING_DEFAULT_get() {
  void * jresult ;
  Clay__Warning *result = 0 ;
  
  result = (Clay__Warning *)&CLAY__WARNING_DEFAULT;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__WarningArray_capacity_set(void * jarg1, unsigned int jarg2) {
  Clay__WarningArray *arg1 = (Clay__WarningArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__WarningArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->capacity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__WarningArray_capacity_get(void * jarg1) {
  unsigned int jresult ;
  Clay__WarningArray *arg1 = (Clay__WarningArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__WarningArray *)jarg1; 
  result = (unsigned int) ((arg1)->capacity);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__WarningArray_length_set(void * jarg1, unsigned int jarg2) {
  Clay__WarningArray *arg1 = (Clay__WarningArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__WarningArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__WarningArray_length_get(void * jarg1) {
  unsigned int jresult ;
  Clay__WarningArray *arg1 = (Clay__WarningArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__WarningArray *)jarg1; 
  result = (unsigned int) ((arg1)->length);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__WarningArray_internalArray_set(void * jarg1, void * jarg2) {
  Clay__WarningArray *arg1 = (Clay__WarningArray *) 0 ;
  Clay__Warning *arg2 = (Clay__Warning *) 0 ;
  
  arg1 = (Clay__WarningArray *)jarg1; 
  arg2 = (Clay__Warning *)jarg2; 
  if (arg1) (arg1)->internalArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__WarningArray_internalArray_get(void * jarg1) {
  void * jresult ;
  Clay__WarningArray *arg1 = (Clay__WarningArray *) 0 ;
  Clay__Warning *result = 0 ;
  
  arg1 = (Clay__WarningArray *)jarg1; 
  result = (Clay__Warning *) ((arg1)->internalArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__WarningArray() {
  void * jresult ;
  Clay__WarningArray *result = 0 ;
  
  result = (Clay__WarningArray *)new Clay__WarningArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__WarningArray(void * jarg1) {
  Clay__WarningArray *arg1 = (Clay__WarningArray *) 0 ;
  
  arg1 = (Clay__WarningArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__WarningArray_Allocate_Arena(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  Clay_Arena *arg2 = (Clay_Arena *) 0 ;
  Clay__WarningArray result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (Clay_Arena *)jarg2; 
  result = Clay__WarningArray_Allocate_Arena(arg1,arg2);
  jresult = new Clay__WarningArray(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_warnings_set(void * jarg1) {
  Clay__WarningArray *arg1 = (Clay__WarningArray *) 0 ;
  
  arg1 = (Clay__WarningArray *)jarg1; 
  Clay_warnings = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_warnings_get() {
  void * jresult ;
  Clay__WarningArray *result = 0 ;
  
  result = (Clay__WarningArray *)&Clay_warnings;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__WarningArray_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Clay__WarningArray *arg1 = (Clay__WarningArray *) 0 ;
  Clay__Warning arg2 ;
  Clay__Warning *argp2 ;
  Clay__Warning *result = 0 ;
  
  arg1 = (Clay__WarningArray *)jarg1; 
  argp2 = (Clay__Warning *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay__Warning", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (Clay__Warning *)Clay__WarningArray_Add(arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__Array_Allocate_Arena(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  Clay_Arena *arg4 = (Clay_Arena *) 0 ;
  void *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (Clay_Arena *)jarg4; 
  result = (void *)Clay__Array_Allocate_Arena(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__Array_RangeCheck(int jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  int arg1 ;
  unsigned int arg2 ;
  bool result;
  
  arg1 = (int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)Clay__Array_RangeCheck(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__Array_IncrementCapacityCheck(unsigned int jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  bool result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)Clay__Array_IncrementCapacityCheck(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLAY__BOOL_DEFAULT_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  CLAY__BOOL_DEFAULT = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CLAY__BOOL_DEFAULT_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)CLAY__BOOL_DEFAULT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__BoolArray_capacity_set(void * jarg1, unsigned int jarg2) {
  Clay__BoolArray *arg1 = (Clay__BoolArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__BoolArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->capacity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__BoolArray_capacity_get(void * jarg1) {
  unsigned int jresult ;
  Clay__BoolArray *arg1 = (Clay__BoolArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__BoolArray *)jarg1; 
  result = (unsigned int) ((arg1)->capacity);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__BoolArray_length_set(void * jarg1, unsigned int jarg2) {
  Clay__BoolArray *arg1 = (Clay__BoolArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__BoolArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__BoolArray_length_get(void * jarg1) {
  unsigned int jresult ;
  Clay__BoolArray *arg1 = (Clay__BoolArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__BoolArray *)jarg1; 
  result = (unsigned int) ((arg1)->length);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__BoolArray_internalArray_set(void * jarg1, void * jarg2) {
  Clay__BoolArray *arg1 = (Clay__BoolArray *) 0 ;
  bool *arg2 = (bool *) 0 ;
  
  arg1 = (Clay__BoolArray *)jarg1; 
  arg2 = (bool *)jarg2; 
  if (arg1) (arg1)->internalArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__BoolArray_internalArray_get(void * jarg1) {
  void * jresult ;
  Clay__BoolArray *arg1 = (Clay__BoolArray *) 0 ;
  bool *result = 0 ;
  
  arg1 = (Clay__BoolArray *)jarg1; 
  result = (bool *) ((arg1)->internalArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__BoolArray() {
  void * jresult ;
  Clay__BoolArray *result = 0 ;
  
  result = (Clay__BoolArray *)new Clay__BoolArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__BoolArray(void * jarg1) {
  Clay__BoolArray *arg1 = (Clay__BoolArray *) 0 ;
  
  arg1 = (Clay__BoolArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__BoolArray_Allocate_Arena(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  Clay_Arena *arg2 = (Clay_Arena *) 0 ;
  Clay__BoolArray result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (Clay_Arena *)jarg2; 
  result = Clay__BoolArray_Allocate_Arena(arg1,arg2);
  jresult = new Clay__BoolArray(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLAY__ELEMENT_ID_DEFAULT_set(void * jarg1) {
  Clay_ElementId *arg1 = (Clay_ElementId *) 0 ;
  
  arg1 = (Clay_ElementId *)jarg1; 
  CLAY__ELEMENT_ID_DEFAULT = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CLAY__ELEMENT_ID_DEFAULT_get() {
  void * jresult ;
  Clay_ElementId *result = 0 ;
  
  result = (Clay_ElementId *)&CLAY__ELEMENT_ID_DEFAULT;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__ElementIdArray_capacity_set(void * jarg1, unsigned int jarg2) {
  Clay__ElementIdArray *arg1 = (Clay__ElementIdArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__ElementIdArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->capacity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__ElementIdArray_capacity_get(void * jarg1) {
  unsigned int jresult ;
  Clay__ElementIdArray *arg1 = (Clay__ElementIdArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__ElementIdArray *)jarg1; 
  result = (unsigned int) ((arg1)->capacity);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__ElementIdArray_length_set(void * jarg1, unsigned int jarg2) {
  Clay__ElementIdArray *arg1 = (Clay__ElementIdArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__ElementIdArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__ElementIdArray_length_get(void * jarg1) {
  unsigned int jresult ;
  Clay__ElementIdArray *arg1 = (Clay__ElementIdArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__ElementIdArray *)jarg1; 
  result = (unsigned int) ((arg1)->length);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__ElementIdArray_internalArray_set(void * jarg1, void * jarg2) {
  Clay__ElementIdArray *arg1 = (Clay__ElementIdArray *) 0 ;
  Clay_ElementId *arg2 = (Clay_ElementId *) 0 ;
  
  arg1 = (Clay__ElementIdArray *)jarg1; 
  arg2 = (Clay_ElementId *)jarg2; 
  if (arg1) (arg1)->internalArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__ElementIdArray_internalArray_get(void * jarg1) {
  void * jresult ;
  Clay__ElementIdArray *arg1 = (Clay__ElementIdArray *) 0 ;
  Clay_ElementId *result = 0 ;
  
  arg1 = (Clay__ElementIdArray *)jarg1; 
  result = (Clay_ElementId *) ((arg1)->internalArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__ElementIdArray() {
  void * jresult ;
  Clay__ElementIdArray *result = 0 ;
  
  result = (Clay__ElementIdArray *)new Clay__ElementIdArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__ElementIdArray(void * jarg1) {
  Clay__ElementIdArray *arg1 = (Clay__ElementIdArray *) 0 ;
  
  arg1 = (Clay__ElementIdArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__ElementIdArray_Allocate_Arena(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  Clay_Arena *arg2 = (Clay_Arena *) 0 ;
  Clay__ElementIdArray result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (Clay_Arena *)jarg2; 
  result = Clay__ElementIdArray_Allocate_Arena(arg1,arg2);
  jresult = new Clay__ElementIdArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__ElementIdArray_Get(void * jarg1, int jarg2) {
  void * jresult ;
  Clay__ElementIdArray *arg1 = (Clay__ElementIdArray *) 0 ;
  int arg2 ;
  Clay_ElementId *result = 0 ;
  
  arg1 = (Clay__ElementIdArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Clay_ElementId *)Clay__ElementIdArray_Get(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__ElementIdArray_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Clay__ElementIdArray *arg1 = (Clay__ElementIdArray *) 0 ;
  Clay_ElementId arg2 ;
  Clay_ElementId *argp2 ;
  Clay_ElementId *result = 0 ;
  
  arg1 = (Clay__ElementIdArray *)jarg1; 
  argp2 = (Clay_ElementId *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_ElementId", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (Clay_ElementId *)Clay__ElementIdArray_Add(arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLAY__ELEMENT_CONFIG_DEFAULT_set(void * jarg1) {
  Clay_ElementConfig *arg1 = (Clay_ElementConfig *) 0 ;
  
  arg1 = (Clay_ElementConfig *)jarg1; 
  CLAY__ELEMENT_CONFIG_DEFAULT = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CLAY__ELEMENT_CONFIG_DEFAULT_get() {
  void * jresult ;
  Clay_ElementConfig *result = 0 ;
  
  result = (Clay_ElementConfig *)&CLAY__ELEMENT_CONFIG_DEFAULT;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__ElementConfigArray_capacity_set(void * jarg1, unsigned int jarg2) {
  Clay__ElementConfigArray *arg1 = (Clay__ElementConfigArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__ElementConfigArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->capacity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__ElementConfigArray_capacity_get(void * jarg1) {
  unsigned int jresult ;
  Clay__ElementConfigArray *arg1 = (Clay__ElementConfigArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__ElementConfigArray *)jarg1; 
  result = (unsigned int) ((arg1)->capacity);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__ElementConfigArray_length_set(void * jarg1, unsigned int jarg2) {
  Clay__ElementConfigArray *arg1 = (Clay__ElementConfigArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__ElementConfigArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__ElementConfigArray_length_get(void * jarg1) {
  unsigned int jresult ;
  Clay__ElementConfigArray *arg1 = (Clay__ElementConfigArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__ElementConfigArray *)jarg1; 
  result = (unsigned int) ((arg1)->length);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__ElementConfigArray_internalArray_set(void * jarg1, void * jarg2) {
  Clay__ElementConfigArray *arg1 = (Clay__ElementConfigArray *) 0 ;
  Clay_ElementConfig *arg2 = (Clay_ElementConfig *) 0 ;
  
  arg1 = (Clay__ElementConfigArray *)jarg1; 
  arg2 = (Clay_ElementConfig *)jarg2; 
  if (arg1) (arg1)->internalArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__ElementConfigArray_internalArray_get(void * jarg1) {
  void * jresult ;
  Clay__ElementConfigArray *arg1 = (Clay__ElementConfigArray *) 0 ;
  Clay_ElementConfig *result = 0 ;
  
  arg1 = (Clay__ElementConfigArray *)jarg1; 
  result = (Clay_ElementConfig *) ((arg1)->internalArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__ElementConfigArray() {
  void * jresult ;
  Clay__ElementConfigArray *result = 0 ;
  
  result = (Clay__ElementConfigArray *)new Clay__ElementConfigArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__ElementConfigArray(void * jarg1) {
  Clay__ElementConfigArray *arg1 = (Clay__ElementConfigArray *) 0 ;
  
  arg1 = (Clay__ElementConfigArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__ElementConfigArraySlice_length_set(void * jarg1, unsigned int jarg2) {
  Clay__ElementConfigArraySlice *arg1 = (Clay__ElementConfigArraySlice *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__ElementConfigArraySlice *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__ElementConfigArraySlice_length_get(void * jarg1) {
  unsigned int jresult ;
  Clay__ElementConfigArraySlice *arg1 = (Clay__ElementConfigArraySlice *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__ElementConfigArraySlice *)jarg1; 
  result = (unsigned int) ((arg1)->length);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__ElementConfigArraySlice_internalArray_set(void * jarg1, void * jarg2) {
  Clay__ElementConfigArraySlice *arg1 = (Clay__ElementConfigArraySlice *) 0 ;
  Clay_ElementConfig *arg2 = (Clay_ElementConfig *) 0 ;
  
  arg1 = (Clay__ElementConfigArraySlice *)jarg1; 
  arg2 = (Clay_ElementConfig *)jarg2; 
  if (arg1) (arg1)->internalArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__ElementConfigArraySlice_internalArray_get(void * jarg1) {
  void * jresult ;
  Clay__ElementConfigArraySlice *arg1 = (Clay__ElementConfigArraySlice *) 0 ;
  Clay_ElementConfig *result = 0 ;
  
  arg1 = (Clay__ElementConfigArraySlice *)jarg1; 
  result = (Clay_ElementConfig *) ((arg1)->internalArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__ElementConfigArraySlice() {
  void * jresult ;
  Clay__ElementConfigArraySlice *result = 0 ;
  
  result = (Clay__ElementConfigArraySlice *)new Clay__ElementConfigArraySlice();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__ElementConfigArraySlice(void * jarg1) {
  Clay__ElementConfigArraySlice *arg1 = (Clay__ElementConfigArraySlice *) 0 ;
  
  arg1 = (Clay__ElementConfigArraySlice *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__ElementConfigArray_Allocate_Arena(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  Clay_Arena *arg2 = (Clay_Arena *) 0 ;
  Clay__ElementConfigArray result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (Clay_Arena *)jarg2; 
  result = Clay__ElementConfigArray_Allocate_Arena(arg1,arg2);
  jresult = new Clay__ElementConfigArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__ElementConfigArray_Get(void * jarg1, int jarg2) {
  void * jresult ;
  Clay__ElementConfigArray *arg1 = (Clay__ElementConfigArray *) 0 ;
  int arg2 ;
  Clay_ElementConfig *result = 0 ;
  
  arg1 = (Clay__ElementConfigArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Clay_ElementConfig *)Clay__ElementConfigArray_Get(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__ElementConfigArray_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Clay__ElementConfigArray *arg1 = (Clay__ElementConfigArray *) 0 ;
  Clay_ElementConfig arg2 ;
  Clay_ElementConfig *argp2 ;
  Clay_ElementConfig *result = 0 ;
  
  arg1 = (Clay__ElementConfigArray *)jarg1; 
  argp2 = (Clay_ElementConfig *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_ElementConfig", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (Clay_ElementConfig *)Clay__ElementConfigArray_Add(arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__ElementConfigArraySlice_Get(void * jarg1, int jarg2) {
  void * jresult ;
  Clay__ElementConfigArraySlice *arg1 = (Clay__ElementConfigArraySlice *) 0 ;
  int arg2 ;
  Clay_ElementConfig *result = 0 ;
  
  arg1 = (Clay__ElementConfigArraySlice *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Clay_ElementConfig *)Clay__ElementConfigArraySlice_Get(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__LayoutConfigArray_capacity_set(void * jarg1, unsigned int jarg2) {
  Clay__LayoutConfigArray *arg1 = (Clay__LayoutConfigArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__LayoutConfigArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->capacity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__LayoutConfigArray_capacity_get(void * jarg1) {
  unsigned int jresult ;
  Clay__LayoutConfigArray *arg1 = (Clay__LayoutConfigArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__LayoutConfigArray *)jarg1; 
  result = (unsigned int) ((arg1)->capacity);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__LayoutConfigArray_length_set(void * jarg1, unsigned int jarg2) {
  Clay__LayoutConfigArray *arg1 = (Clay__LayoutConfigArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__LayoutConfigArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__LayoutConfigArray_length_get(void * jarg1) {
  unsigned int jresult ;
  Clay__LayoutConfigArray *arg1 = (Clay__LayoutConfigArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__LayoutConfigArray *)jarg1; 
  result = (unsigned int) ((arg1)->length);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__LayoutConfigArray_internalArray_set(void * jarg1, void * jarg2) {
  Clay__LayoutConfigArray *arg1 = (Clay__LayoutConfigArray *) 0 ;
  Clay_LayoutConfig *arg2 = (Clay_LayoutConfig *) 0 ;
  
  arg1 = (Clay__LayoutConfigArray *)jarg1; 
  arg2 = (Clay_LayoutConfig *)jarg2; 
  if (arg1) (arg1)->internalArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__LayoutConfigArray_internalArray_get(void * jarg1) {
  void * jresult ;
  Clay__LayoutConfigArray *arg1 = (Clay__LayoutConfigArray *) 0 ;
  Clay_LayoutConfig *result = 0 ;
  
  arg1 = (Clay__LayoutConfigArray *)jarg1; 
  result = (Clay_LayoutConfig *) ((arg1)->internalArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__LayoutConfigArray() {
  void * jresult ;
  Clay__LayoutConfigArray *result = 0 ;
  
  result = (Clay__LayoutConfigArray *)new Clay__LayoutConfigArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__LayoutConfigArray(void * jarg1) {
  Clay__LayoutConfigArray *arg1 = (Clay__LayoutConfigArray *) 0 ;
  
  arg1 = (Clay__LayoutConfigArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__LayoutConfigArray_Allocate_Arena(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  Clay_Arena *arg2 = (Clay_Arena *) 0 ;
  Clay__LayoutConfigArray result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (Clay_Arena *)jarg2; 
  result = Clay__LayoutConfigArray_Allocate_Arena(arg1,arg2);
  jresult = new Clay__LayoutConfigArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__LayoutConfigArray_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Clay__LayoutConfigArray *arg1 = (Clay__LayoutConfigArray *) 0 ;
  Clay_LayoutConfig arg2 ;
  Clay_LayoutConfig *argp2 ;
  Clay_LayoutConfig *result = 0 ;
  
  arg1 = (Clay__LayoutConfigArray *)jarg1; 
  argp2 = (Clay_LayoutConfig *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_LayoutConfig", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (Clay_LayoutConfig *)Clay__LayoutConfigArray_Add(arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLAY__RECTANGLE_ELEMENT_CONFIG_DEFAULT_set(void * jarg1) {
  Clay_RectangleElementConfig *arg1 = (Clay_RectangleElementConfig *) 0 ;
  
  arg1 = (Clay_RectangleElementConfig *)jarg1; 
  CLAY__RECTANGLE_ELEMENT_CONFIG_DEFAULT = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CLAY__RECTANGLE_ELEMENT_CONFIG_DEFAULT_get() {
  void * jresult ;
  Clay_RectangleElementConfig *result = 0 ;
  
  result = (Clay_RectangleElementConfig *)&CLAY__RECTANGLE_ELEMENT_CONFIG_DEFAULT;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__RectangleElementConfigArray_capacity_set(void * jarg1, unsigned int jarg2) {
  Clay__RectangleElementConfigArray *arg1 = (Clay__RectangleElementConfigArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__RectangleElementConfigArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->capacity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__RectangleElementConfigArray_capacity_get(void * jarg1) {
  unsigned int jresult ;
  Clay__RectangleElementConfigArray *arg1 = (Clay__RectangleElementConfigArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__RectangleElementConfigArray *)jarg1; 
  result = (unsigned int) ((arg1)->capacity);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__RectangleElementConfigArray_length_set(void * jarg1, unsigned int jarg2) {
  Clay__RectangleElementConfigArray *arg1 = (Clay__RectangleElementConfigArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__RectangleElementConfigArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__RectangleElementConfigArray_length_get(void * jarg1) {
  unsigned int jresult ;
  Clay__RectangleElementConfigArray *arg1 = (Clay__RectangleElementConfigArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__RectangleElementConfigArray *)jarg1; 
  result = (unsigned int) ((arg1)->length);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__RectangleElementConfigArray_internalArray_set(void * jarg1, void * jarg2) {
  Clay__RectangleElementConfigArray *arg1 = (Clay__RectangleElementConfigArray *) 0 ;
  Clay_RectangleElementConfig *arg2 = (Clay_RectangleElementConfig *) 0 ;
  
  arg1 = (Clay__RectangleElementConfigArray *)jarg1; 
  arg2 = (Clay_RectangleElementConfig *)jarg2; 
  if (arg1) (arg1)->internalArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__RectangleElementConfigArray_internalArray_get(void * jarg1) {
  void * jresult ;
  Clay__RectangleElementConfigArray *arg1 = (Clay__RectangleElementConfigArray *) 0 ;
  Clay_RectangleElementConfig *result = 0 ;
  
  arg1 = (Clay__RectangleElementConfigArray *)jarg1; 
  result = (Clay_RectangleElementConfig *) ((arg1)->internalArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__RectangleElementConfigArray() {
  void * jresult ;
  Clay__RectangleElementConfigArray *result = 0 ;
  
  result = (Clay__RectangleElementConfigArray *)new Clay__RectangleElementConfigArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__RectangleElementConfigArray(void * jarg1) {
  Clay__RectangleElementConfigArray *arg1 = (Clay__RectangleElementConfigArray *) 0 ;
  
  arg1 = (Clay__RectangleElementConfigArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__RectangleElementConfigArray_Allocate_Arena(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  Clay_Arena *arg2 = (Clay_Arena *) 0 ;
  Clay__RectangleElementConfigArray result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (Clay_Arena *)jarg2; 
  result = Clay__RectangleElementConfigArray_Allocate_Arena(arg1,arg2);
  jresult = new Clay__RectangleElementConfigArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__RectangleElementConfigArray_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Clay__RectangleElementConfigArray *arg1 = (Clay__RectangleElementConfigArray *) 0 ;
  Clay_RectangleElementConfig arg2 ;
  Clay_RectangleElementConfig *argp2 ;
  Clay_RectangleElementConfig *result = 0 ;
  
  arg1 = (Clay__RectangleElementConfigArray *)jarg1; 
  argp2 = (Clay_RectangleElementConfig *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_RectangleElementConfig", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (Clay_RectangleElementConfig *)Clay__RectangleElementConfigArray_Add(arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLAY__TEXT_ELEMENT_CONFIG_DEFAULT_set(void * jarg1) {
  Clay_TextElementConfig *arg1 = (Clay_TextElementConfig *) 0 ;
  
  arg1 = (Clay_TextElementConfig *)jarg1; 
  CLAY__TEXT_ELEMENT_CONFIG_DEFAULT = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CLAY__TEXT_ELEMENT_CONFIG_DEFAULT_get() {
  void * jresult ;
  Clay_TextElementConfig *result = 0 ;
  
  result = (Clay_TextElementConfig *)&CLAY__TEXT_ELEMENT_CONFIG_DEFAULT;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__TextElementConfigArray_capacity_set(void * jarg1, unsigned int jarg2) {
  Clay__TextElementConfigArray *arg1 = (Clay__TextElementConfigArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__TextElementConfigArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->capacity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__TextElementConfigArray_capacity_get(void * jarg1) {
  unsigned int jresult ;
  Clay__TextElementConfigArray *arg1 = (Clay__TextElementConfigArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__TextElementConfigArray *)jarg1; 
  result = (unsigned int) ((arg1)->capacity);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__TextElementConfigArray_length_set(void * jarg1, unsigned int jarg2) {
  Clay__TextElementConfigArray *arg1 = (Clay__TextElementConfigArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__TextElementConfigArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__TextElementConfigArray_length_get(void * jarg1) {
  unsigned int jresult ;
  Clay__TextElementConfigArray *arg1 = (Clay__TextElementConfigArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__TextElementConfigArray *)jarg1; 
  result = (unsigned int) ((arg1)->length);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__TextElementConfigArray_internalArray_set(void * jarg1, void * jarg2) {
  Clay__TextElementConfigArray *arg1 = (Clay__TextElementConfigArray *) 0 ;
  Clay_TextElementConfig *arg2 = (Clay_TextElementConfig *) 0 ;
  
  arg1 = (Clay__TextElementConfigArray *)jarg1; 
  arg2 = (Clay_TextElementConfig *)jarg2; 
  if (arg1) (arg1)->internalArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__TextElementConfigArray_internalArray_get(void * jarg1) {
  void * jresult ;
  Clay__TextElementConfigArray *arg1 = (Clay__TextElementConfigArray *) 0 ;
  Clay_TextElementConfig *result = 0 ;
  
  arg1 = (Clay__TextElementConfigArray *)jarg1; 
  result = (Clay_TextElementConfig *) ((arg1)->internalArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__TextElementConfigArray() {
  void * jresult ;
  Clay__TextElementConfigArray *result = 0 ;
  
  result = (Clay__TextElementConfigArray *)new Clay__TextElementConfigArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__TextElementConfigArray(void * jarg1) {
  Clay__TextElementConfigArray *arg1 = (Clay__TextElementConfigArray *) 0 ;
  
  arg1 = (Clay__TextElementConfigArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__TextElementConfigArray_Allocate_Arena(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  Clay_Arena *arg2 = (Clay_Arena *) 0 ;
  Clay__TextElementConfigArray result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (Clay_Arena *)jarg2; 
  result = Clay__TextElementConfigArray_Allocate_Arena(arg1,arg2);
  jresult = new Clay__TextElementConfigArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__TextElementConfigArray_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Clay__TextElementConfigArray *arg1 = (Clay__TextElementConfigArray *) 0 ;
  Clay_TextElementConfig arg2 ;
  Clay_TextElementConfig *argp2 ;
  Clay_TextElementConfig *result = 0 ;
  
  arg1 = (Clay__TextElementConfigArray *)jarg1; 
  argp2 = (Clay_TextElementConfig *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_TextElementConfig", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (Clay_TextElementConfig *)Clay__TextElementConfigArray_Add(arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLAY__IMAGE_ELEMENT_CONFIG_DEFAULT_set(void * jarg1) {
  Clay_ImageElementConfig *arg1 = (Clay_ImageElementConfig *) 0 ;
  
  arg1 = (Clay_ImageElementConfig *)jarg1; 
  CLAY__IMAGE_ELEMENT_CONFIG_DEFAULT = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CLAY__IMAGE_ELEMENT_CONFIG_DEFAULT_get() {
  void * jresult ;
  Clay_ImageElementConfig *result = 0 ;
  
  result = (Clay_ImageElementConfig *)&CLAY__IMAGE_ELEMENT_CONFIG_DEFAULT;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__ImageElementConfigArray_capacity_set(void * jarg1, unsigned int jarg2) {
  Clay__ImageElementConfigArray *arg1 = (Clay__ImageElementConfigArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__ImageElementConfigArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->capacity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__ImageElementConfigArray_capacity_get(void * jarg1) {
  unsigned int jresult ;
  Clay__ImageElementConfigArray *arg1 = (Clay__ImageElementConfigArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__ImageElementConfigArray *)jarg1; 
  result = (unsigned int) ((arg1)->capacity);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__ImageElementConfigArray_length_set(void * jarg1, unsigned int jarg2) {
  Clay__ImageElementConfigArray *arg1 = (Clay__ImageElementConfigArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__ImageElementConfigArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__ImageElementConfigArray_length_get(void * jarg1) {
  unsigned int jresult ;
  Clay__ImageElementConfigArray *arg1 = (Clay__ImageElementConfigArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__ImageElementConfigArray *)jarg1; 
  result = (unsigned int) ((arg1)->length);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__ImageElementConfigArray_internalArray_set(void * jarg1, void * jarg2) {
  Clay__ImageElementConfigArray *arg1 = (Clay__ImageElementConfigArray *) 0 ;
  Clay_ImageElementConfig *arg2 = (Clay_ImageElementConfig *) 0 ;
  
  arg1 = (Clay__ImageElementConfigArray *)jarg1; 
  arg2 = (Clay_ImageElementConfig *)jarg2; 
  if (arg1) (arg1)->internalArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__ImageElementConfigArray_internalArray_get(void * jarg1) {
  void * jresult ;
  Clay__ImageElementConfigArray *arg1 = (Clay__ImageElementConfigArray *) 0 ;
  Clay_ImageElementConfig *result = 0 ;
  
  arg1 = (Clay__ImageElementConfigArray *)jarg1; 
  result = (Clay_ImageElementConfig *) ((arg1)->internalArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__ImageElementConfigArray() {
  void * jresult ;
  Clay__ImageElementConfigArray *result = 0 ;
  
  result = (Clay__ImageElementConfigArray *)new Clay__ImageElementConfigArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__ImageElementConfigArray(void * jarg1) {
  Clay__ImageElementConfigArray *arg1 = (Clay__ImageElementConfigArray *) 0 ;
  
  arg1 = (Clay__ImageElementConfigArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__ImageElementConfigArray_Allocate_Arena(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  Clay_Arena *arg2 = (Clay_Arena *) 0 ;
  Clay__ImageElementConfigArray result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (Clay_Arena *)jarg2; 
  result = Clay__ImageElementConfigArray_Allocate_Arena(arg1,arg2);
  jresult = new Clay__ImageElementConfigArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__ImageElementConfigArray_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Clay__ImageElementConfigArray *arg1 = (Clay__ImageElementConfigArray *) 0 ;
  Clay_ImageElementConfig arg2 ;
  Clay_ImageElementConfig *argp2 ;
  Clay_ImageElementConfig *result = 0 ;
  
  arg1 = (Clay__ImageElementConfigArray *)jarg1; 
  argp2 = (Clay_ImageElementConfig *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_ImageElementConfig", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (Clay_ImageElementConfig *)Clay__ImageElementConfigArray_Add(arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLAY__FLOATING_ELEMENT_CONFIG_DEFAULT_set(void * jarg1) {
  Clay_FloatingElementConfig *arg1 = (Clay_FloatingElementConfig *) 0 ;
  
  arg1 = (Clay_FloatingElementConfig *)jarg1; 
  CLAY__FLOATING_ELEMENT_CONFIG_DEFAULT = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CLAY__FLOATING_ELEMENT_CONFIG_DEFAULT_get() {
  void * jresult ;
  Clay_FloatingElementConfig *result = 0 ;
  
  result = (Clay_FloatingElementConfig *)&CLAY__FLOATING_ELEMENT_CONFIG_DEFAULT;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__FloatingElementConfigArray_capacity_set(void * jarg1, unsigned int jarg2) {
  Clay__FloatingElementConfigArray *arg1 = (Clay__FloatingElementConfigArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__FloatingElementConfigArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->capacity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__FloatingElementConfigArray_capacity_get(void * jarg1) {
  unsigned int jresult ;
  Clay__FloatingElementConfigArray *arg1 = (Clay__FloatingElementConfigArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__FloatingElementConfigArray *)jarg1; 
  result = (unsigned int) ((arg1)->capacity);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__FloatingElementConfigArray_length_set(void * jarg1, unsigned int jarg2) {
  Clay__FloatingElementConfigArray *arg1 = (Clay__FloatingElementConfigArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__FloatingElementConfigArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__FloatingElementConfigArray_length_get(void * jarg1) {
  unsigned int jresult ;
  Clay__FloatingElementConfigArray *arg1 = (Clay__FloatingElementConfigArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__FloatingElementConfigArray *)jarg1; 
  result = (unsigned int) ((arg1)->length);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__FloatingElementConfigArray_internalArray_set(void * jarg1, void * jarg2) {
  Clay__FloatingElementConfigArray *arg1 = (Clay__FloatingElementConfigArray *) 0 ;
  Clay_FloatingElementConfig *arg2 = (Clay_FloatingElementConfig *) 0 ;
  
  arg1 = (Clay__FloatingElementConfigArray *)jarg1; 
  arg2 = (Clay_FloatingElementConfig *)jarg2; 
  if (arg1) (arg1)->internalArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__FloatingElementConfigArray_internalArray_get(void * jarg1) {
  void * jresult ;
  Clay__FloatingElementConfigArray *arg1 = (Clay__FloatingElementConfigArray *) 0 ;
  Clay_FloatingElementConfig *result = 0 ;
  
  arg1 = (Clay__FloatingElementConfigArray *)jarg1; 
  result = (Clay_FloatingElementConfig *) ((arg1)->internalArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__FloatingElementConfigArray() {
  void * jresult ;
  Clay__FloatingElementConfigArray *result = 0 ;
  
  result = (Clay__FloatingElementConfigArray *)new Clay__FloatingElementConfigArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__FloatingElementConfigArray(void * jarg1) {
  Clay__FloatingElementConfigArray *arg1 = (Clay__FloatingElementConfigArray *) 0 ;
  
  arg1 = (Clay__FloatingElementConfigArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__FloatingElementConfigArray_Allocate_Arena(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  Clay_Arena *arg2 = (Clay_Arena *) 0 ;
  Clay__FloatingElementConfigArray result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (Clay_Arena *)jarg2; 
  result = Clay__FloatingElementConfigArray_Allocate_Arena(arg1,arg2);
  jresult = new Clay__FloatingElementConfigArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__FloatingElementConfigArray_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Clay__FloatingElementConfigArray *arg1 = (Clay__FloatingElementConfigArray *) 0 ;
  Clay_FloatingElementConfig arg2 ;
  Clay_FloatingElementConfig *argp2 ;
  Clay_FloatingElementConfig *result = 0 ;
  
  arg1 = (Clay__FloatingElementConfigArray *)jarg1; 
  argp2 = (Clay_FloatingElementConfig *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_FloatingElementConfig", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (Clay_FloatingElementConfig *)Clay__FloatingElementConfigArray_Add(arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLAY__CUSTOM_ELEMENT_CONFIG_DEFAULT_set(void * jarg1) {
  Clay_CustomElementConfig *arg1 = (Clay_CustomElementConfig *) 0 ;
  
  arg1 = (Clay_CustomElementConfig *)jarg1; 
  CLAY__CUSTOM_ELEMENT_CONFIG_DEFAULT = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CLAY__CUSTOM_ELEMENT_CONFIG_DEFAULT_get() {
  void * jresult ;
  Clay_CustomElementConfig *result = 0 ;
  
  result = (Clay_CustomElementConfig *)&CLAY__CUSTOM_ELEMENT_CONFIG_DEFAULT;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__CustomElementConfigArray_capacity_set(void * jarg1, unsigned int jarg2) {
  Clay__CustomElementConfigArray *arg1 = (Clay__CustomElementConfigArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__CustomElementConfigArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->capacity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__CustomElementConfigArray_capacity_get(void * jarg1) {
  unsigned int jresult ;
  Clay__CustomElementConfigArray *arg1 = (Clay__CustomElementConfigArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__CustomElementConfigArray *)jarg1; 
  result = (unsigned int) ((arg1)->capacity);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__CustomElementConfigArray_length_set(void * jarg1, unsigned int jarg2) {
  Clay__CustomElementConfigArray *arg1 = (Clay__CustomElementConfigArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__CustomElementConfigArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__CustomElementConfigArray_length_get(void * jarg1) {
  unsigned int jresult ;
  Clay__CustomElementConfigArray *arg1 = (Clay__CustomElementConfigArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__CustomElementConfigArray *)jarg1; 
  result = (unsigned int) ((arg1)->length);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__CustomElementConfigArray_internalArray_set(void * jarg1, void * jarg2) {
  Clay__CustomElementConfigArray *arg1 = (Clay__CustomElementConfigArray *) 0 ;
  Clay_CustomElementConfig *arg2 = (Clay_CustomElementConfig *) 0 ;
  
  arg1 = (Clay__CustomElementConfigArray *)jarg1; 
  arg2 = (Clay_CustomElementConfig *)jarg2; 
  if (arg1) (arg1)->internalArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__CustomElementConfigArray_internalArray_get(void * jarg1) {
  void * jresult ;
  Clay__CustomElementConfigArray *arg1 = (Clay__CustomElementConfigArray *) 0 ;
  Clay_CustomElementConfig *result = 0 ;
  
  arg1 = (Clay__CustomElementConfigArray *)jarg1; 
  result = (Clay_CustomElementConfig *) ((arg1)->internalArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__CustomElementConfigArray() {
  void * jresult ;
  Clay__CustomElementConfigArray *result = 0 ;
  
  result = (Clay__CustomElementConfigArray *)new Clay__CustomElementConfigArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__CustomElementConfigArray(void * jarg1) {
  Clay__CustomElementConfigArray *arg1 = (Clay__CustomElementConfigArray *) 0 ;
  
  arg1 = (Clay__CustomElementConfigArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__CustomElementConfigArray_Allocate_Arena(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  Clay_Arena *arg2 = (Clay_Arena *) 0 ;
  Clay__CustomElementConfigArray result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (Clay_Arena *)jarg2; 
  result = Clay__CustomElementConfigArray_Allocate_Arena(arg1,arg2);
  jresult = new Clay__CustomElementConfigArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__CustomElementConfigArray_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Clay__CustomElementConfigArray *arg1 = (Clay__CustomElementConfigArray *) 0 ;
  Clay_CustomElementConfig arg2 ;
  Clay_CustomElementConfig *argp2 ;
  Clay_CustomElementConfig *result = 0 ;
  
  arg1 = (Clay__CustomElementConfigArray *)jarg1; 
  argp2 = (Clay_CustomElementConfig *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_CustomElementConfig", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (Clay_CustomElementConfig *)Clay__CustomElementConfigArray_Add(arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLAY__SCROLL_ELEMENT_CONFIG_DEFAULT_set(void * jarg1) {
  Clay_ScrollElementConfig *arg1 = (Clay_ScrollElementConfig *) 0 ;
  
  arg1 = (Clay_ScrollElementConfig *)jarg1; 
  CLAY__SCROLL_ELEMENT_CONFIG_DEFAULT = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CLAY__SCROLL_ELEMENT_CONFIG_DEFAULT_get() {
  void * jresult ;
  Clay_ScrollElementConfig *result = 0 ;
  
  result = (Clay_ScrollElementConfig *)&CLAY__SCROLL_ELEMENT_CONFIG_DEFAULT;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__ScrollElementConfigArray_capacity_set(void * jarg1, unsigned int jarg2) {
  Clay__ScrollElementConfigArray *arg1 = (Clay__ScrollElementConfigArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__ScrollElementConfigArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->capacity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__ScrollElementConfigArray_capacity_get(void * jarg1) {
  unsigned int jresult ;
  Clay__ScrollElementConfigArray *arg1 = (Clay__ScrollElementConfigArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__ScrollElementConfigArray *)jarg1; 
  result = (unsigned int) ((arg1)->capacity);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__ScrollElementConfigArray_length_set(void * jarg1, unsigned int jarg2) {
  Clay__ScrollElementConfigArray *arg1 = (Clay__ScrollElementConfigArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__ScrollElementConfigArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__ScrollElementConfigArray_length_get(void * jarg1) {
  unsigned int jresult ;
  Clay__ScrollElementConfigArray *arg1 = (Clay__ScrollElementConfigArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__ScrollElementConfigArray *)jarg1; 
  result = (unsigned int) ((arg1)->length);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__ScrollElementConfigArray_internalArray_set(void * jarg1, void * jarg2) {
  Clay__ScrollElementConfigArray *arg1 = (Clay__ScrollElementConfigArray *) 0 ;
  Clay_ScrollElementConfig *arg2 = (Clay_ScrollElementConfig *) 0 ;
  
  arg1 = (Clay__ScrollElementConfigArray *)jarg1; 
  arg2 = (Clay_ScrollElementConfig *)jarg2; 
  if (arg1) (arg1)->internalArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__ScrollElementConfigArray_internalArray_get(void * jarg1) {
  void * jresult ;
  Clay__ScrollElementConfigArray *arg1 = (Clay__ScrollElementConfigArray *) 0 ;
  Clay_ScrollElementConfig *result = 0 ;
  
  arg1 = (Clay__ScrollElementConfigArray *)jarg1; 
  result = (Clay_ScrollElementConfig *) ((arg1)->internalArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__ScrollElementConfigArray() {
  void * jresult ;
  Clay__ScrollElementConfigArray *result = 0 ;
  
  result = (Clay__ScrollElementConfigArray *)new Clay__ScrollElementConfigArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__ScrollElementConfigArray(void * jarg1) {
  Clay__ScrollElementConfigArray *arg1 = (Clay__ScrollElementConfigArray *) 0 ;
  
  arg1 = (Clay__ScrollElementConfigArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__ScrollElementConfigArray_Allocate_Arena(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  Clay_Arena *arg2 = (Clay_Arena *) 0 ;
  Clay__ScrollElementConfigArray result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (Clay_Arena *)jarg2; 
  result = Clay__ScrollElementConfigArray_Allocate_Arena(arg1,arg2);
  jresult = new Clay__ScrollElementConfigArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__ScrollElementConfigArray_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Clay__ScrollElementConfigArray *arg1 = (Clay__ScrollElementConfigArray *) 0 ;
  Clay_ScrollElementConfig arg2 ;
  Clay_ScrollElementConfig *argp2 ;
  Clay_ScrollElementConfig *result = 0 ;
  
  arg1 = (Clay__ScrollElementConfigArray *)jarg1; 
  argp2 = (Clay_ScrollElementConfig *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_ScrollElementConfig", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (Clay_ScrollElementConfig *)Clay__ScrollElementConfigArray_Add(arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__StringArraySlice_length_set(void * jarg1, unsigned int jarg2) {
  Clay__StringArraySlice *arg1 = (Clay__StringArraySlice *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__StringArraySlice *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__StringArraySlice_length_get(void * jarg1) {
  unsigned int jresult ;
  Clay__StringArraySlice *arg1 = (Clay__StringArraySlice *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__StringArraySlice *)jarg1; 
  result = (unsigned int) ((arg1)->length);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__StringArraySlice_internalArray_set(void * jarg1, void * jarg2) {
  Clay__StringArraySlice *arg1 = (Clay__StringArraySlice *) 0 ;
  Clay_String *arg2 = (Clay_String *) 0 ;
  
  arg1 = (Clay__StringArraySlice *)jarg1; 
  arg2 = (Clay_String *)jarg2; 
  if (arg1) (arg1)->internalArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__StringArraySlice_internalArray_get(void * jarg1) {
  void * jresult ;
  Clay__StringArraySlice *arg1 = (Clay__StringArraySlice *) 0 ;
  Clay_String *result = 0 ;
  
  arg1 = (Clay__StringArraySlice *)jarg1; 
  result = (Clay_String *) ((arg1)->internalArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__StringArraySlice() {
  void * jresult ;
  Clay__StringArraySlice *result = 0 ;
  
  result = (Clay__StringArraySlice *)new Clay__StringArraySlice();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__StringArraySlice(void * jarg1) {
  Clay__StringArraySlice *arg1 = (Clay__StringArraySlice *) 0 ;
  
  arg1 = (Clay__StringArraySlice *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__StringArray_Allocate_Arena(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  Clay_Arena *arg2 = (Clay_Arena *) 0 ;
  Clay__StringArray result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (Clay_Arena *)jarg2; 
  result = Clay__StringArray_Allocate_Arena(arg1,arg2);
  jresult = new Clay__StringArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__StringArray_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Clay__StringArray *arg1 = (Clay__StringArray *) 0 ;
  Clay_String arg2 ;
  Clay_String *argp2 ;
  Clay_String *result = 0 ;
  
  arg1 = (Clay__StringArray *)jarg1; 
  argp2 = (Clay_String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_String", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (Clay_String *)Clay__StringArray_Add(arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__TextElementData_text_set(void * jarg1, void * jarg2) {
  Clay__TextElementData *arg1 = (Clay__TextElementData *) 0 ;
  Clay_String *arg2 = (Clay_String *) 0 ;
  
  arg1 = (Clay__TextElementData *)jarg1; 
  arg2 = (Clay_String *)jarg2; 
  if (arg1) (arg1)->text = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__TextElementData_text_get(void * jarg1) {
  void * jresult ;
  Clay__TextElementData *arg1 = (Clay__TextElementData *) 0 ;
  Clay_String *result = 0 ;
  
  arg1 = (Clay__TextElementData *)jarg1; 
  result = (Clay_String *)& ((arg1)->text);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__TextElementData_preferredDimensions_set(void * jarg1, void * jarg2) {
  Clay__TextElementData *arg1 = (Clay__TextElementData *) 0 ;
  Clay_Dimensions *arg2 = (Clay_Dimensions *) 0 ;
  
  arg1 = (Clay__TextElementData *)jarg1; 
  arg2 = (Clay_Dimensions *)jarg2; 
  if (arg1) (arg1)->preferredDimensions = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__TextElementData_preferredDimensions_get(void * jarg1) {
  void * jresult ;
  Clay__TextElementData *arg1 = (Clay__TextElementData *) 0 ;
  Clay_Dimensions *result = 0 ;
  
  arg1 = (Clay__TextElementData *)jarg1; 
  result = (Clay_Dimensions *)& ((arg1)->preferredDimensions);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__TextElementData_elementIndex_set(void * jarg1, unsigned int jarg2) {
  Clay__TextElementData *arg1 = (Clay__TextElementData *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__TextElementData *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->elementIndex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__TextElementData_elementIndex_get(void * jarg1) {
  unsigned int jresult ;
  Clay__TextElementData *arg1 = (Clay__TextElementData *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__TextElementData *)jarg1; 
  result = (unsigned int) ((arg1)->elementIndex);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__TextElementData_wrappedLines_set(void * jarg1, void * jarg2) {
  Clay__TextElementData *arg1 = (Clay__TextElementData *) 0 ;
  Clay__StringArraySlice *arg2 = (Clay__StringArraySlice *) 0 ;
  
  arg1 = (Clay__TextElementData *)jarg1; 
  arg2 = (Clay__StringArraySlice *)jarg2; 
  if (arg1) (arg1)->wrappedLines = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__TextElementData_wrappedLines_get(void * jarg1) {
  void * jresult ;
  Clay__TextElementData *arg1 = (Clay__TextElementData *) 0 ;
  Clay__StringArraySlice *result = 0 ;
  
  arg1 = (Clay__TextElementData *)jarg1; 
  result = (Clay__StringArraySlice *)& ((arg1)->wrappedLines);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__TextElementData() {
  void * jresult ;
  Clay__TextElementData *result = 0 ;
  
  result = (Clay__TextElementData *)new Clay__TextElementData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__TextElementData(void * jarg1) {
  Clay__TextElementData *arg1 = (Clay__TextElementData *) 0 ;
  
  arg1 = (Clay__TextElementData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLAY__TEXT_ELEMENT_DATA_DEFAULT_set(void * jarg1) {
  Clay__TextElementData *arg1 = (Clay__TextElementData *) 0 ;
  
  arg1 = (Clay__TextElementData *)jarg1; 
  CLAY__TEXT_ELEMENT_DATA_DEFAULT = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CLAY__TEXT_ELEMENT_DATA_DEFAULT_get() {
  void * jresult ;
  Clay__TextElementData *result = 0 ;
  
  result = (Clay__TextElementData *)&CLAY__TEXT_ELEMENT_DATA_DEFAULT;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__TextElementDataArray_capacity_set(void * jarg1, unsigned int jarg2) {
  Clay__TextElementDataArray *arg1 = (Clay__TextElementDataArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__TextElementDataArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->capacity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__TextElementDataArray_capacity_get(void * jarg1) {
  unsigned int jresult ;
  Clay__TextElementDataArray *arg1 = (Clay__TextElementDataArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__TextElementDataArray *)jarg1; 
  result = (unsigned int) ((arg1)->capacity);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__TextElementDataArray_length_set(void * jarg1, unsigned int jarg2) {
  Clay__TextElementDataArray *arg1 = (Clay__TextElementDataArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__TextElementDataArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__TextElementDataArray_length_get(void * jarg1) {
  unsigned int jresult ;
  Clay__TextElementDataArray *arg1 = (Clay__TextElementDataArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__TextElementDataArray *)jarg1; 
  result = (unsigned int) ((arg1)->length);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__TextElementDataArray_internalArray_set(void * jarg1, void * jarg2) {
  Clay__TextElementDataArray *arg1 = (Clay__TextElementDataArray *) 0 ;
  Clay__TextElementData *arg2 = (Clay__TextElementData *) 0 ;
  
  arg1 = (Clay__TextElementDataArray *)jarg1; 
  arg2 = (Clay__TextElementData *)jarg2; 
  if (arg1) (arg1)->internalArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__TextElementDataArray_internalArray_get(void * jarg1) {
  void * jresult ;
  Clay__TextElementDataArray *arg1 = (Clay__TextElementDataArray *) 0 ;
  Clay__TextElementData *result = 0 ;
  
  arg1 = (Clay__TextElementDataArray *)jarg1; 
  result = (Clay__TextElementData *) ((arg1)->internalArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__TextElementDataArray() {
  void * jresult ;
  Clay__TextElementDataArray *result = 0 ;
  
  result = (Clay__TextElementDataArray *)new Clay__TextElementDataArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__TextElementDataArray(void * jarg1) {
  Clay__TextElementDataArray *arg1 = (Clay__TextElementDataArray *) 0 ;
  
  arg1 = (Clay__TextElementDataArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__TextElementDataArray_Allocate_Arena(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  Clay_Arena *arg2 = (Clay_Arena *) 0 ;
  Clay__TextElementDataArray result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (Clay_Arena *)jarg2; 
  result = Clay__TextElementDataArray_Allocate_Arena(arg1,arg2);
  jresult = new Clay__TextElementDataArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__TextElementDataArray_Get(void * jarg1, int jarg2) {
  void * jresult ;
  Clay__TextElementDataArray *arg1 = (Clay__TextElementDataArray *) 0 ;
  int arg2 ;
  Clay__TextElementData *result = 0 ;
  
  arg1 = (Clay__TextElementDataArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Clay__TextElementData *)Clay__TextElementDataArray_Get(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__TextElementDataArray_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Clay__TextElementDataArray *arg1 = (Clay__TextElementDataArray *) 0 ;
  Clay__TextElementData arg2 ;
  Clay__TextElementData *argp2 ;
  Clay__TextElementData *result = 0 ;
  
  arg1 = (Clay__TextElementDataArray *)jarg1; 
  argp2 = (Clay__TextElementData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay__TextElementData", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (Clay__TextElementData *)Clay__TextElementDataArray_Add(arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLAY__BORDER_ELEMENT_CONFIG_DEFAULT_set(void * jarg1) {
  Clay_BorderElementConfig *arg1 = (Clay_BorderElementConfig *) 0 ;
  
  arg1 = (Clay_BorderElementConfig *)jarg1; 
  CLAY__BORDER_ELEMENT_CONFIG_DEFAULT = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CLAY__BORDER_ELEMENT_CONFIG_DEFAULT_get() {
  void * jresult ;
  Clay_BorderElementConfig *result = 0 ;
  
  result = (Clay_BorderElementConfig *)&CLAY__BORDER_ELEMENT_CONFIG_DEFAULT;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__BorderElementConfigArray_capacity_set(void * jarg1, unsigned int jarg2) {
  Clay__BorderElementConfigArray *arg1 = (Clay__BorderElementConfigArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__BorderElementConfigArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->capacity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__BorderElementConfigArray_capacity_get(void * jarg1) {
  unsigned int jresult ;
  Clay__BorderElementConfigArray *arg1 = (Clay__BorderElementConfigArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__BorderElementConfigArray *)jarg1; 
  result = (unsigned int) ((arg1)->capacity);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__BorderElementConfigArray_length_set(void * jarg1, unsigned int jarg2) {
  Clay__BorderElementConfigArray *arg1 = (Clay__BorderElementConfigArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__BorderElementConfigArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__BorderElementConfigArray_length_get(void * jarg1) {
  unsigned int jresult ;
  Clay__BorderElementConfigArray *arg1 = (Clay__BorderElementConfigArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__BorderElementConfigArray *)jarg1; 
  result = (unsigned int) ((arg1)->length);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__BorderElementConfigArray_internalArray_set(void * jarg1, void * jarg2) {
  Clay__BorderElementConfigArray *arg1 = (Clay__BorderElementConfigArray *) 0 ;
  Clay_BorderElementConfig *arg2 = (Clay_BorderElementConfig *) 0 ;
  
  arg1 = (Clay__BorderElementConfigArray *)jarg1; 
  arg2 = (Clay_BorderElementConfig *)jarg2; 
  if (arg1) (arg1)->internalArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__BorderElementConfigArray_internalArray_get(void * jarg1) {
  void * jresult ;
  Clay__BorderElementConfigArray *arg1 = (Clay__BorderElementConfigArray *) 0 ;
  Clay_BorderElementConfig *result = 0 ;
  
  arg1 = (Clay__BorderElementConfigArray *)jarg1; 
  result = (Clay_BorderElementConfig *) ((arg1)->internalArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__BorderElementConfigArray() {
  void * jresult ;
  Clay__BorderElementConfigArray *result = 0 ;
  
  result = (Clay__BorderElementConfigArray *)new Clay__BorderElementConfigArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__BorderElementConfigArray(void * jarg1) {
  Clay__BorderElementConfigArray *arg1 = (Clay__BorderElementConfigArray *) 0 ;
  
  arg1 = (Clay__BorderElementConfigArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__BorderElementConfigArray_Allocate_Arena(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  Clay_Arena *arg2 = (Clay_Arena *) 0 ;
  Clay__BorderElementConfigArray result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (Clay_Arena *)jarg2; 
  result = Clay__BorderElementConfigArray_Allocate_Arena(arg1,arg2);
  jresult = new Clay__BorderElementConfigArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__BorderElementConfigArray_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Clay__BorderElementConfigArray *arg1 = (Clay__BorderElementConfigArray *) 0 ;
  Clay_BorderElementConfig arg2 ;
  Clay_BorderElementConfig *argp2 ;
  Clay_BorderElementConfig *result = 0 ;
  
  arg1 = (Clay__BorderElementConfigArray *)jarg1; 
  argp2 = (Clay_BorderElementConfig *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_BorderElementConfig", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (Clay_BorderElementConfig *)Clay__BorderElementConfigArray_Add(arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__LayoutElementChildren_elements_set(void * jarg1, void * jarg2) {
  Clay__LayoutElementChildren *arg1 = (Clay__LayoutElementChildren *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (Clay__LayoutElementChildren *)jarg1; 
  arg2 = (int *)jarg2; 
  if (arg1) (arg1)->elements = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__LayoutElementChildren_elements_get(void * jarg1) {
  void * jresult ;
  Clay__LayoutElementChildren *arg1 = (Clay__LayoutElementChildren *) 0 ;
  int *result = 0 ;
  
  arg1 = (Clay__LayoutElementChildren *)jarg1; 
  result = (int *) ((arg1)->elements);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__LayoutElementChildren_length_set(void * jarg1, unsigned short jarg2) {
  Clay__LayoutElementChildren *arg1 = (Clay__LayoutElementChildren *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (Clay__LayoutElementChildren *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Clay__LayoutElementChildren_length_get(void * jarg1) {
  unsigned short jresult ;
  Clay__LayoutElementChildren *arg1 = (Clay__LayoutElementChildren *) 0 ;
  unsigned short result;
  
  arg1 = (Clay__LayoutElementChildren *)jarg1; 
  result = (unsigned short) ((arg1)->length);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__LayoutElementChildren() {
  void * jresult ;
  Clay__LayoutElementChildren *result = 0 ;
  
  result = (Clay__LayoutElementChildren *)new Clay__LayoutElementChildren();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__LayoutElementChildren(void * jarg1) {
  Clay__LayoutElementChildren *arg1 = (Clay__LayoutElementChildren *) 0 ;
  
  arg1 = (Clay__LayoutElementChildren *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_LayoutElement_children_set(void * jarg1, void * jarg2) {
  Clay_LayoutElement *arg1 = (Clay_LayoutElement *) 0 ;
  Clay__LayoutElementChildren *arg2 = (Clay__LayoutElementChildren *) 0 ;
  
  arg1 = (Clay_LayoutElement *)jarg1; 
  arg2 = (Clay__LayoutElementChildren *)jarg2; 
  if (arg1) (arg1)->children = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_LayoutElement_children_get(void * jarg1) {
  void * jresult ;
  Clay_LayoutElement *arg1 = (Clay_LayoutElement *) 0 ;
  Clay__LayoutElementChildren *result = 0 ;
  
  arg1 = (Clay_LayoutElement *)jarg1; 
  result = (Clay__LayoutElementChildren *)& ((arg1)->children);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_LayoutElement_textElementData_set(void * jarg1, void * jarg2) {
  Clay_LayoutElement *arg1 = (Clay_LayoutElement *) 0 ;
  Clay__TextElementData *arg2 = (Clay__TextElementData *) 0 ;
  
  arg1 = (Clay_LayoutElement *)jarg1; 
  arg2 = (Clay__TextElementData *)jarg2; 
  if (arg1) (arg1)->textElementData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_LayoutElement_textElementData_get(void * jarg1) {
  void * jresult ;
  Clay_LayoutElement *arg1 = (Clay_LayoutElement *) 0 ;
  Clay__TextElementData *result = 0 ;
  
  arg1 = (Clay_LayoutElement *)jarg1; 
  result = (Clay__TextElementData *) ((arg1)->textElementData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_LayoutElement_dimensions_set(void * jarg1, void * jarg2) {
  Clay_LayoutElement *arg1 = (Clay_LayoutElement *) 0 ;
  Clay_Dimensions *arg2 = (Clay_Dimensions *) 0 ;
  
  arg1 = (Clay_LayoutElement *)jarg1; 
  arg2 = (Clay_Dimensions *)jarg2; 
  if (arg1) (arg1)->dimensions = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_LayoutElement_dimensions_get(void * jarg1) {
  void * jresult ;
  Clay_LayoutElement *arg1 = (Clay_LayoutElement *) 0 ;
  Clay_Dimensions *result = 0 ;
  
  arg1 = (Clay_LayoutElement *)jarg1; 
  result = (Clay_Dimensions *)& ((arg1)->dimensions);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_LayoutElement_minDimensions_set(void * jarg1, void * jarg2) {
  Clay_LayoutElement *arg1 = (Clay_LayoutElement *) 0 ;
  Clay_Dimensions *arg2 = (Clay_Dimensions *) 0 ;
  
  arg1 = (Clay_LayoutElement *)jarg1; 
  arg2 = (Clay_Dimensions *)jarg2; 
  if (arg1) (arg1)->minDimensions = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_LayoutElement_minDimensions_get(void * jarg1) {
  void * jresult ;
  Clay_LayoutElement *arg1 = (Clay_LayoutElement *) 0 ;
  Clay_Dimensions *result = 0 ;
  
  arg1 = (Clay_LayoutElement *)jarg1; 
  result = (Clay_Dimensions *)& ((arg1)->minDimensions);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_LayoutElement_layoutConfig_set(void * jarg1, void * jarg2) {
  Clay_LayoutElement *arg1 = (Clay_LayoutElement *) 0 ;
  Clay_LayoutConfig *arg2 = (Clay_LayoutConfig *) 0 ;
  
  arg1 = (Clay_LayoutElement *)jarg1; 
  arg2 = (Clay_LayoutConfig *)jarg2; 
  if (arg1) (arg1)->layoutConfig = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_LayoutElement_layoutConfig_get(void * jarg1) {
  void * jresult ;
  Clay_LayoutElement *arg1 = (Clay_LayoutElement *) 0 ;
  Clay_LayoutConfig *result = 0 ;
  
  arg1 = (Clay_LayoutElement *)jarg1; 
  result = (Clay_LayoutConfig *) ((arg1)->layoutConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_LayoutElement_elementConfigs_set(void * jarg1, void * jarg2) {
  Clay_LayoutElement *arg1 = (Clay_LayoutElement *) 0 ;
  Clay__ElementConfigArraySlice *arg2 = (Clay__ElementConfigArraySlice *) 0 ;
  
  arg1 = (Clay_LayoutElement *)jarg1; 
  arg2 = (Clay__ElementConfigArraySlice *)jarg2; 
  if (arg1) (arg1)->elementConfigs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_LayoutElement_elementConfigs_get(void * jarg1) {
  void * jresult ;
  Clay_LayoutElement *arg1 = (Clay_LayoutElement *) 0 ;
  Clay__ElementConfigArraySlice *result = 0 ;
  
  arg1 = (Clay_LayoutElement *)jarg1; 
  result = (Clay__ElementConfigArraySlice *)& ((arg1)->elementConfigs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_LayoutElement_configsEnabled_set(void * jarg1, unsigned int jarg2) {
  Clay_LayoutElement *arg1 = (Clay_LayoutElement *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay_LayoutElement *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->configsEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_LayoutElement_configsEnabled_get(void * jarg1) {
  unsigned int jresult ;
  Clay_LayoutElement *arg1 = (Clay_LayoutElement *) 0 ;
  unsigned int result;
  
  arg1 = (Clay_LayoutElement *)jarg1; 
  result = (unsigned int) ((arg1)->configsEnabled);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_LayoutElement_id_set(void * jarg1, unsigned int jarg2) {
  Clay_LayoutElement *arg1 = (Clay_LayoutElement *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay_LayoutElement *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_LayoutElement_id_get(void * jarg1) {
  unsigned int jresult ;
  Clay_LayoutElement *arg1 = (Clay_LayoutElement *) 0 ;
  unsigned int result;
  
  arg1 = (Clay_LayoutElement *)jarg1; 
  result = (unsigned int) ((arg1)->id);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_LayoutElement() {
  void * jresult ;
  Clay_LayoutElement *result = 0 ;
  
  result = (Clay_LayoutElement *)new Clay_LayoutElement();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_LayoutElement(void * jarg1) {
  Clay_LayoutElement *arg1 = (Clay_LayoutElement *) 0 ;
  
  arg1 = (Clay_LayoutElement *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLAY__LAYOUT_ELEMENT_DEFAULT_set(void * jarg1) {
  Clay_LayoutElement *arg1 = (Clay_LayoutElement *) 0 ;
  
  arg1 = (Clay_LayoutElement *)jarg1; 
  CLAY__LAYOUT_ELEMENT_DEFAULT = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CLAY__LAYOUT_ELEMENT_DEFAULT_get() {
  void * jresult ;
  Clay_LayoutElement *result = 0 ;
  
  result = (Clay_LayoutElement *)&CLAY__LAYOUT_ELEMENT_DEFAULT;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_LayoutElementArray_capacity_set(void * jarg1, unsigned int jarg2) {
  Clay_LayoutElementArray *arg1 = (Clay_LayoutElementArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay_LayoutElementArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->capacity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_LayoutElementArray_capacity_get(void * jarg1) {
  unsigned int jresult ;
  Clay_LayoutElementArray *arg1 = (Clay_LayoutElementArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay_LayoutElementArray *)jarg1; 
  result = (unsigned int) ((arg1)->capacity);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_LayoutElementArray_length_set(void * jarg1, unsigned int jarg2) {
  Clay_LayoutElementArray *arg1 = (Clay_LayoutElementArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay_LayoutElementArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_LayoutElementArray_length_get(void * jarg1) {
  unsigned int jresult ;
  Clay_LayoutElementArray *arg1 = (Clay_LayoutElementArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay_LayoutElementArray *)jarg1; 
  result = (unsigned int) ((arg1)->length);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_LayoutElementArray_internalArray_set(void * jarg1, void * jarg2) {
  Clay_LayoutElementArray *arg1 = (Clay_LayoutElementArray *) 0 ;
  Clay_LayoutElement *arg2 = (Clay_LayoutElement *) 0 ;
  
  arg1 = (Clay_LayoutElementArray *)jarg1; 
  arg2 = (Clay_LayoutElement *)jarg2; 
  if (arg1) (arg1)->internalArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_LayoutElementArray_internalArray_get(void * jarg1) {
  void * jresult ;
  Clay_LayoutElementArray *arg1 = (Clay_LayoutElementArray *) 0 ;
  Clay_LayoutElement *result = 0 ;
  
  arg1 = (Clay_LayoutElementArray *)jarg1; 
  result = (Clay_LayoutElement *) ((arg1)->internalArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_LayoutElementArray() {
  void * jresult ;
  Clay_LayoutElementArray *result = 0 ;
  
  result = (Clay_LayoutElementArray *)new Clay_LayoutElementArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_LayoutElementArray(void * jarg1) {
  Clay_LayoutElementArray *arg1 = (Clay_LayoutElementArray *) 0 ;
  
  arg1 = (Clay_LayoutElementArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_LayoutElementArray_Allocate_Arena(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  Clay_Arena *arg2 = (Clay_Arena *) 0 ;
  Clay_LayoutElementArray result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (Clay_Arena *)jarg2; 
  result = Clay_LayoutElementArray_Allocate_Arena(arg1,arg2);
  jresult = new Clay_LayoutElementArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_LayoutElementArray_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Clay_LayoutElementArray *arg1 = (Clay_LayoutElementArray *) 0 ;
  Clay_LayoutElement arg2 ;
  Clay_LayoutElement *argp2 ;
  Clay_LayoutElement *result = 0 ;
  
  arg1 = (Clay_LayoutElementArray *)jarg1; 
  argp2 = (Clay_LayoutElement *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_LayoutElement", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (Clay_LayoutElement *)Clay_LayoutElementArray_Add(arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_LayoutElementArray_Get(void * jarg1, int jarg2) {
  void * jresult ;
  Clay_LayoutElementArray *arg1 = (Clay_LayoutElementArray *) 0 ;
  int arg2 ;
  Clay_LayoutElement *result = 0 ;
  
  arg1 = (Clay_LayoutElementArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Clay_LayoutElement *)Clay_LayoutElementArray_Get(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__LayoutElementPointerArray_capacity_set(void * jarg1, unsigned int jarg2) {
  Clay__LayoutElementPointerArray *arg1 = (Clay__LayoutElementPointerArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__LayoutElementPointerArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->capacity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__LayoutElementPointerArray_capacity_get(void * jarg1) {
  unsigned int jresult ;
  Clay__LayoutElementPointerArray *arg1 = (Clay__LayoutElementPointerArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__LayoutElementPointerArray *)jarg1; 
  result = (unsigned int) ((arg1)->capacity);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__LayoutElementPointerArray_length_set(void * jarg1, unsigned int jarg2) {
  Clay__LayoutElementPointerArray *arg1 = (Clay__LayoutElementPointerArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__LayoutElementPointerArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__LayoutElementPointerArray_length_get(void * jarg1) {
  unsigned int jresult ;
  Clay__LayoutElementPointerArray *arg1 = (Clay__LayoutElementPointerArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__LayoutElementPointerArray *)jarg1; 
  result = (unsigned int) ((arg1)->length);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__LayoutElementPointerArray_internalArray_set(void * jarg1, void * jarg2) {
  Clay__LayoutElementPointerArray *arg1 = (Clay__LayoutElementPointerArray *) 0 ;
  Clay_LayoutElement **arg2 = (Clay_LayoutElement **) 0 ;
  
  arg1 = (Clay__LayoutElementPointerArray *)jarg1; 
  arg2 = (Clay_LayoutElement **)jarg2; 
  if (arg1) (arg1)->internalArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__LayoutElementPointerArray_internalArray_get(void * jarg1) {
  void * jresult ;
  Clay__LayoutElementPointerArray *arg1 = (Clay__LayoutElementPointerArray *) 0 ;
  Clay_LayoutElement **result = 0 ;
  
  arg1 = (Clay__LayoutElementPointerArray *)jarg1; 
  result = (Clay_LayoutElement **) ((arg1)->internalArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__LayoutElementPointerArray() {
  void * jresult ;
  Clay__LayoutElementPointerArray *result = 0 ;
  
  result = (Clay__LayoutElementPointerArray *)new Clay__LayoutElementPointerArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__LayoutElementPointerArray(void * jarg1) {
  Clay__LayoutElementPointerArray *arg1 = (Clay__LayoutElementPointerArray *) 0 ;
  
  arg1 = (Clay__LayoutElementPointerArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__LayoutElementPointerArray_Allocate_Arena(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  Clay_Arena *arg2 = (Clay_Arena *) 0 ;
  Clay__LayoutElementPointerArray result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (Clay_Arena *)jarg2; 
  result = Clay__LayoutElementPointerArray_Allocate_Arena(arg1,arg2);
  jresult = new Clay__LayoutElementPointerArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__LayoutElementPointerArray_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Clay__LayoutElementPointerArray *arg1 = (Clay__LayoutElementPointerArray *) 0 ;
  Clay_LayoutElement *arg2 = (Clay_LayoutElement *) 0 ;
  Clay_LayoutElement **result = 0 ;
  
  arg1 = (Clay__LayoutElementPointerArray *)jarg1; 
  arg2 = (Clay_LayoutElement *)jarg2; 
  result = (Clay_LayoutElement **)Clay__LayoutElementPointerArray_Add(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__LayoutElementPointerArray_Get(void * jarg1, int jarg2) {
  void * jresult ;
  Clay__LayoutElementPointerArray *arg1 = (Clay__LayoutElementPointerArray *) 0 ;
  int arg2 ;
  Clay_LayoutElement *result = 0 ;
  
  arg1 = (Clay__LayoutElementPointerArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Clay_LayoutElement *)Clay__LayoutElementPointerArray_Get(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__LayoutElementPointerArray_RemoveSwapback(void * jarg1, int jarg2) {
  void * jresult ;
  Clay__LayoutElementPointerArray *arg1 = (Clay__LayoutElementPointerArray *) 0 ;
  int arg2 ;
  Clay_LayoutElement *result = 0 ;
  
  arg1 = (Clay__LayoutElementPointerArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Clay_LayoutElement *)Clay__LayoutElementPointerArray_RemoveSwapback(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLAY__RENDER_COMMAND_DEFAULT_set(void * jarg1) {
  Clay_RenderCommand *arg1 = (Clay_RenderCommand *) 0 ;
  
  arg1 = (Clay_RenderCommand *)jarg1; 
  CLAY__RENDER_COMMAND_DEFAULT = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CLAY__RENDER_COMMAND_DEFAULT_get() {
  void * jresult ;
  Clay_RenderCommand *result = 0 ;
  
  result = (Clay_RenderCommand *)&CLAY__RENDER_COMMAND_DEFAULT;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_RenderCommandArray_Allocate_Arena(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  Clay_Arena *arg2 = (Clay_Arena *) 0 ;
  Clay_RenderCommandArray result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (Clay_Arena *)jarg2; 
  result = Clay_RenderCommandArray_Allocate_Arena(arg1,arg2);
  jresult = new Clay_RenderCommandArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_RenderCommandArray_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Clay_RenderCommandArray *arg1 = (Clay_RenderCommandArray *) 0 ;
  Clay_RenderCommand arg2 ;
  Clay_RenderCommand *argp2 ;
  Clay_RenderCommand *result = 0 ;
  
  arg1 = (Clay_RenderCommandArray *)jarg1; 
  argp2 = (Clay_RenderCommand *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_RenderCommand", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (Clay_RenderCommand *)Clay_RenderCommandArray_Add(arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternal_layoutElement_set(void * jarg1, void * jarg2) {
  Clay__ScrollContainerDataInternal *arg1 = (Clay__ScrollContainerDataInternal *) 0 ;
  Clay_LayoutElement *arg2 = (Clay_LayoutElement *) 0 ;
  
  arg1 = (Clay__ScrollContainerDataInternal *)jarg1; 
  arg2 = (Clay_LayoutElement *)jarg2; 
  if (arg1) (arg1)->layoutElement = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternal_layoutElement_get(void * jarg1) {
  void * jresult ;
  Clay__ScrollContainerDataInternal *arg1 = (Clay__ScrollContainerDataInternal *) 0 ;
  Clay_LayoutElement *result = 0 ;
  
  arg1 = (Clay__ScrollContainerDataInternal *)jarg1; 
  result = (Clay_LayoutElement *) ((arg1)->layoutElement);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternal_boundingBox_set(void * jarg1, void * jarg2) {
  Clay__ScrollContainerDataInternal *arg1 = (Clay__ScrollContainerDataInternal *) 0 ;
  Clay_BoundingBox *arg2 = (Clay_BoundingBox *) 0 ;
  
  arg1 = (Clay__ScrollContainerDataInternal *)jarg1; 
  arg2 = (Clay_BoundingBox *)jarg2; 
  if (arg1) (arg1)->boundingBox = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternal_boundingBox_get(void * jarg1) {
  void * jresult ;
  Clay__ScrollContainerDataInternal *arg1 = (Clay__ScrollContainerDataInternal *) 0 ;
  Clay_BoundingBox *result = 0 ;
  
  arg1 = (Clay__ScrollContainerDataInternal *)jarg1; 
  result = (Clay_BoundingBox *)& ((arg1)->boundingBox);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternal_contentSize_set(void * jarg1, void * jarg2) {
  Clay__ScrollContainerDataInternal *arg1 = (Clay__ScrollContainerDataInternal *) 0 ;
  Clay_Dimensions *arg2 = (Clay_Dimensions *) 0 ;
  
  arg1 = (Clay__ScrollContainerDataInternal *)jarg1; 
  arg2 = (Clay_Dimensions *)jarg2; 
  if (arg1) (arg1)->contentSize = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternal_contentSize_get(void * jarg1) {
  void * jresult ;
  Clay__ScrollContainerDataInternal *arg1 = (Clay__ScrollContainerDataInternal *) 0 ;
  Clay_Dimensions *result = 0 ;
  
  arg1 = (Clay__ScrollContainerDataInternal *)jarg1; 
  result = (Clay_Dimensions *)& ((arg1)->contentSize);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternal_scrollOrigin_set(void * jarg1, void * jarg2) {
  Clay__ScrollContainerDataInternal *arg1 = (Clay__ScrollContainerDataInternal *) 0 ;
  Clay_Vector2 *arg2 = (Clay_Vector2 *) 0 ;
  
  arg1 = (Clay__ScrollContainerDataInternal *)jarg1; 
  arg2 = (Clay_Vector2 *)jarg2; 
  if (arg1) (arg1)->scrollOrigin = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternal_scrollOrigin_get(void * jarg1) {
  void * jresult ;
  Clay__ScrollContainerDataInternal *arg1 = (Clay__ScrollContainerDataInternal *) 0 ;
  Clay_Vector2 *result = 0 ;
  
  arg1 = (Clay__ScrollContainerDataInternal *)jarg1; 
  result = (Clay_Vector2 *)& ((arg1)->scrollOrigin);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternal_pointerOrigin_set(void * jarg1, void * jarg2) {
  Clay__ScrollContainerDataInternal *arg1 = (Clay__ScrollContainerDataInternal *) 0 ;
  Clay_Vector2 *arg2 = (Clay_Vector2 *) 0 ;
  
  arg1 = (Clay__ScrollContainerDataInternal *)jarg1; 
  arg2 = (Clay_Vector2 *)jarg2; 
  if (arg1) (arg1)->pointerOrigin = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternal_pointerOrigin_get(void * jarg1) {
  void * jresult ;
  Clay__ScrollContainerDataInternal *arg1 = (Clay__ScrollContainerDataInternal *) 0 ;
  Clay_Vector2 *result = 0 ;
  
  arg1 = (Clay__ScrollContainerDataInternal *)jarg1; 
  result = (Clay_Vector2 *)& ((arg1)->pointerOrigin);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternal_scrollMomentum_set(void * jarg1, void * jarg2) {
  Clay__ScrollContainerDataInternal *arg1 = (Clay__ScrollContainerDataInternal *) 0 ;
  Clay_Vector2 *arg2 = (Clay_Vector2 *) 0 ;
  
  arg1 = (Clay__ScrollContainerDataInternal *)jarg1; 
  arg2 = (Clay_Vector2 *)jarg2; 
  if (arg1) (arg1)->scrollMomentum = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternal_scrollMomentum_get(void * jarg1) {
  void * jresult ;
  Clay__ScrollContainerDataInternal *arg1 = (Clay__ScrollContainerDataInternal *) 0 ;
  Clay_Vector2 *result = 0 ;
  
  arg1 = (Clay__ScrollContainerDataInternal *)jarg1; 
  result = (Clay_Vector2 *)& ((arg1)->scrollMomentum);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternal_scrollPosition_set(void * jarg1, void * jarg2) {
  Clay__ScrollContainerDataInternal *arg1 = (Clay__ScrollContainerDataInternal *) 0 ;
  Clay_Vector2 *arg2 = (Clay_Vector2 *) 0 ;
  
  arg1 = (Clay__ScrollContainerDataInternal *)jarg1; 
  arg2 = (Clay_Vector2 *)jarg2; 
  if (arg1) (arg1)->scrollPosition = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternal_scrollPosition_get(void * jarg1) {
  void * jresult ;
  Clay__ScrollContainerDataInternal *arg1 = (Clay__ScrollContainerDataInternal *) 0 ;
  Clay_Vector2 *result = 0 ;
  
  arg1 = (Clay__ScrollContainerDataInternal *)jarg1; 
  result = (Clay_Vector2 *)& ((arg1)->scrollPosition);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternal_previousDelta_set(void * jarg1, void * jarg2) {
  Clay__ScrollContainerDataInternal *arg1 = (Clay__ScrollContainerDataInternal *) 0 ;
  Clay_Vector2 *arg2 = (Clay_Vector2 *) 0 ;
  
  arg1 = (Clay__ScrollContainerDataInternal *)jarg1; 
  arg2 = (Clay_Vector2 *)jarg2; 
  if (arg1) (arg1)->previousDelta = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternal_previousDelta_get(void * jarg1) {
  void * jresult ;
  Clay__ScrollContainerDataInternal *arg1 = (Clay__ScrollContainerDataInternal *) 0 ;
  Clay_Vector2 *result = 0 ;
  
  arg1 = (Clay__ScrollContainerDataInternal *)jarg1; 
  result = (Clay_Vector2 *)& ((arg1)->previousDelta);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternal_momentumTime_set(void * jarg1, float jarg2) {
  Clay__ScrollContainerDataInternal *arg1 = (Clay__ScrollContainerDataInternal *) 0 ;
  float arg2 ;
  
  arg1 = (Clay__ScrollContainerDataInternal *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->momentumTime = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternal_momentumTime_get(void * jarg1) {
  float jresult ;
  Clay__ScrollContainerDataInternal *arg1 = (Clay__ScrollContainerDataInternal *) 0 ;
  float result;
  
  arg1 = (Clay__ScrollContainerDataInternal *)jarg1; 
  result = (float) ((arg1)->momentumTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternal_elementId_set(void * jarg1, unsigned int jarg2) {
  Clay__ScrollContainerDataInternal *arg1 = (Clay__ScrollContainerDataInternal *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__ScrollContainerDataInternal *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->elementId = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternal_elementId_get(void * jarg1) {
  unsigned int jresult ;
  Clay__ScrollContainerDataInternal *arg1 = (Clay__ScrollContainerDataInternal *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__ScrollContainerDataInternal *)jarg1; 
  result = (unsigned int) ((arg1)->elementId);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternal_openThisFrame_set(void * jarg1, unsigned int jarg2) {
  Clay__ScrollContainerDataInternal *arg1 = (Clay__ScrollContainerDataInternal *) 0 ;
  bool arg2 ;
  
  arg1 = (Clay__ScrollContainerDataInternal *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->openThisFrame = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternal_openThisFrame_get(void * jarg1) {
  unsigned int jresult ;
  Clay__ScrollContainerDataInternal *arg1 = (Clay__ScrollContainerDataInternal *) 0 ;
  bool result;
  
  arg1 = (Clay__ScrollContainerDataInternal *)jarg1; 
  result = (bool) ((arg1)->openThisFrame);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternal_pointerScrollActive_set(void * jarg1, unsigned int jarg2) {
  Clay__ScrollContainerDataInternal *arg1 = (Clay__ScrollContainerDataInternal *) 0 ;
  bool arg2 ;
  
  arg1 = (Clay__ScrollContainerDataInternal *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->pointerScrollActive = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternal_pointerScrollActive_get(void * jarg1) {
  unsigned int jresult ;
  Clay__ScrollContainerDataInternal *arg1 = (Clay__ScrollContainerDataInternal *) 0 ;
  bool result;
  
  arg1 = (Clay__ScrollContainerDataInternal *)jarg1; 
  result = (bool) ((arg1)->pointerScrollActive);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__ScrollContainerDataInternal() {
  void * jresult ;
  Clay__ScrollContainerDataInternal *result = 0 ;
  
  result = (Clay__ScrollContainerDataInternal *)new Clay__ScrollContainerDataInternal();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__ScrollContainerDataInternal(void * jarg1) {
  Clay__ScrollContainerDataInternal *arg1 = (Clay__ScrollContainerDataInternal *) 0 ;
  
  arg1 = (Clay__ScrollContainerDataInternal *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLAY__SCROLL_CONTAINER_DEFAULT_set(void * jarg1) {
  Clay__ScrollContainerDataInternal *arg1 = (Clay__ScrollContainerDataInternal *) 0 ;
  
  arg1 = (Clay__ScrollContainerDataInternal *)jarg1; 
  CLAY__SCROLL_CONTAINER_DEFAULT = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CLAY__SCROLL_CONTAINER_DEFAULT_get() {
  void * jresult ;
  Clay__ScrollContainerDataInternal *result = 0 ;
  
  result = (Clay__ScrollContainerDataInternal *)&CLAY__SCROLL_CONTAINER_DEFAULT;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternalArray_capacity_set(void * jarg1, unsigned int jarg2) {
  Clay__ScrollContainerDataInternalArray *arg1 = (Clay__ScrollContainerDataInternalArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__ScrollContainerDataInternalArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->capacity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternalArray_capacity_get(void * jarg1) {
  unsigned int jresult ;
  Clay__ScrollContainerDataInternalArray *arg1 = (Clay__ScrollContainerDataInternalArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__ScrollContainerDataInternalArray *)jarg1; 
  result = (unsigned int) ((arg1)->capacity);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternalArray_length_set(void * jarg1, unsigned int jarg2) {
  Clay__ScrollContainerDataInternalArray *arg1 = (Clay__ScrollContainerDataInternalArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__ScrollContainerDataInternalArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternalArray_length_get(void * jarg1) {
  unsigned int jresult ;
  Clay__ScrollContainerDataInternalArray *arg1 = (Clay__ScrollContainerDataInternalArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__ScrollContainerDataInternalArray *)jarg1; 
  result = (unsigned int) ((arg1)->length);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternalArray_internalArray_set(void * jarg1, void * jarg2) {
  Clay__ScrollContainerDataInternalArray *arg1 = (Clay__ScrollContainerDataInternalArray *) 0 ;
  Clay__ScrollContainerDataInternal *arg2 = (Clay__ScrollContainerDataInternal *) 0 ;
  
  arg1 = (Clay__ScrollContainerDataInternalArray *)jarg1; 
  arg2 = (Clay__ScrollContainerDataInternal *)jarg2; 
  if (arg1) (arg1)->internalArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternalArray_internalArray_get(void * jarg1) {
  void * jresult ;
  Clay__ScrollContainerDataInternalArray *arg1 = (Clay__ScrollContainerDataInternalArray *) 0 ;
  Clay__ScrollContainerDataInternal *result = 0 ;
  
  arg1 = (Clay__ScrollContainerDataInternalArray *)jarg1; 
  result = (Clay__ScrollContainerDataInternal *) ((arg1)->internalArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__ScrollContainerDataInternalArray() {
  void * jresult ;
  Clay__ScrollContainerDataInternalArray *result = 0 ;
  
  result = (Clay__ScrollContainerDataInternalArray *)new Clay__ScrollContainerDataInternalArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__ScrollContainerDataInternalArray(void * jarg1) {
  Clay__ScrollContainerDataInternalArray *arg1 = (Clay__ScrollContainerDataInternalArray *) 0 ;
  
  arg1 = (Clay__ScrollContainerDataInternalArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternalArray_Allocate_Arena(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  Clay_Arena *arg2 = (Clay_Arena *) 0 ;
  Clay__ScrollContainerDataInternalArray result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (Clay_Arena *)jarg2; 
  result = Clay__ScrollContainerDataInternalArray_Allocate_Arena(arg1,arg2);
  jresult = new Clay__ScrollContainerDataInternalArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternalArray_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Clay__ScrollContainerDataInternalArray *arg1 = (Clay__ScrollContainerDataInternalArray *) 0 ;
  Clay__ScrollContainerDataInternal arg2 ;
  Clay__ScrollContainerDataInternal *argp2 ;
  Clay__ScrollContainerDataInternal *result = 0 ;
  
  arg1 = (Clay__ScrollContainerDataInternalArray *)jarg1; 
  argp2 = (Clay__ScrollContainerDataInternal *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay__ScrollContainerDataInternal", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (Clay__ScrollContainerDataInternal *)Clay__ScrollContainerDataInternalArray_Add(arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternalArray_Get(void * jarg1, int jarg2) {
  void * jresult ;
  Clay__ScrollContainerDataInternalArray *arg1 = (Clay__ScrollContainerDataInternalArray *) 0 ;
  int arg2 ;
  Clay__ScrollContainerDataInternal *result = 0 ;
  
  arg1 = (Clay__ScrollContainerDataInternalArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Clay__ScrollContainerDataInternal *)Clay__ScrollContainerDataInternalArray_Get(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__ScrollContainerDataInternalArray_RemoveSwapback(void * jarg1, int jarg2) {
  void * jresult ;
  Clay__ScrollContainerDataInternalArray *arg1 = (Clay__ScrollContainerDataInternalArray *) 0 ;
  int arg2 ;
  Clay__ScrollContainerDataInternal result;
  
  arg1 = (Clay__ScrollContainerDataInternalArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = Clay__ScrollContainerDataInternalArray_RemoveSwapback(arg1,arg2);
  jresult = new Clay__ScrollContainerDataInternal(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__DebugElementData_collision_set(void * jarg1, unsigned int jarg2) {
  Clay__DebugElementData *arg1 = (Clay__DebugElementData *) 0 ;
  bool arg2 ;
  
  arg1 = (Clay__DebugElementData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->collision = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__DebugElementData_collision_get(void * jarg1) {
  unsigned int jresult ;
  Clay__DebugElementData *arg1 = (Clay__DebugElementData *) 0 ;
  bool result;
  
  arg1 = (Clay__DebugElementData *)jarg1; 
  result = (bool) ((arg1)->collision);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__DebugElementData_collapsed_set(void * jarg1, unsigned int jarg2) {
  Clay__DebugElementData *arg1 = (Clay__DebugElementData *) 0 ;
  bool arg2 ;
  
  arg1 = (Clay__DebugElementData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->collapsed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__DebugElementData_collapsed_get(void * jarg1) {
  unsigned int jresult ;
  Clay__DebugElementData *arg1 = (Clay__DebugElementData *) 0 ;
  bool result;
  
  arg1 = (Clay__DebugElementData *)jarg1; 
  result = (bool) ((arg1)->collapsed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__DebugElementData() {
  void * jresult ;
  Clay__DebugElementData *result = 0 ;
  
  result = (Clay__DebugElementData *)new Clay__DebugElementData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__DebugElementData(void * jarg1) {
  Clay__DebugElementData *arg1 = (Clay__DebugElementData *) 0 ;
  
  arg1 = (Clay__DebugElementData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLAY__DEBUG_ELEMENT_DATA_DEFAULT_set(void * jarg1) {
  Clay__DebugElementData *arg1 = (Clay__DebugElementData *) 0 ;
  
  arg1 = (Clay__DebugElementData *)jarg1; 
  CLAY__DEBUG_ELEMENT_DATA_DEFAULT = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CLAY__DEBUG_ELEMENT_DATA_DEFAULT_get() {
  void * jresult ;
  Clay__DebugElementData *result = 0 ;
  
  result = (Clay__DebugElementData *)&CLAY__DEBUG_ELEMENT_DATA_DEFAULT;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__DebugElementDataArray_capacity_set(void * jarg1, unsigned int jarg2) {
  Clay__DebugElementDataArray *arg1 = (Clay__DebugElementDataArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__DebugElementDataArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->capacity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__DebugElementDataArray_capacity_get(void * jarg1) {
  unsigned int jresult ;
  Clay__DebugElementDataArray *arg1 = (Clay__DebugElementDataArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__DebugElementDataArray *)jarg1; 
  result = (unsigned int) ((arg1)->capacity);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__DebugElementDataArray_length_set(void * jarg1, unsigned int jarg2) {
  Clay__DebugElementDataArray *arg1 = (Clay__DebugElementDataArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__DebugElementDataArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__DebugElementDataArray_length_get(void * jarg1) {
  unsigned int jresult ;
  Clay__DebugElementDataArray *arg1 = (Clay__DebugElementDataArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__DebugElementDataArray *)jarg1; 
  result = (unsigned int) ((arg1)->length);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__DebugElementDataArray_internalArray_set(void * jarg1, void * jarg2) {
  Clay__DebugElementDataArray *arg1 = (Clay__DebugElementDataArray *) 0 ;
  Clay__DebugElementData *arg2 = (Clay__DebugElementData *) 0 ;
  
  arg1 = (Clay__DebugElementDataArray *)jarg1; 
  arg2 = (Clay__DebugElementData *)jarg2; 
  if (arg1) (arg1)->internalArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__DebugElementDataArray_internalArray_get(void * jarg1) {
  void * jresult ;
  Clay__DebugElementDataArray *arg1 = (Clay__DebugElementDataArray *) 0 ;
  Clay__DebugElementData *result = 0 ;
  
  arg1 = (Clay__DebugElementDataArray *)jarg1; 
  result = (Clay__DebugElementData *) ((arg1)->internalArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__DebugElementDataArray() {
  void * jresult ;
  Clay__DebugElementDataArray *result = 0 ;
  
  result = (Clay__DebugElementDataArray *)new Clay__DebugElementDataArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__DebugElementDataArray(void * jarg1) {
  Clay__DebugElementDataArray *arg1 = (Clay__DebugElementDataArray *) 0 ;
  
  arg1 = (Clay__DebugElementDataArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__DebugElementDataArray_Allocate_Arena(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  Clay_Arena *arg2 = (Clay_Arena *) 0 ;
  Clay__DebugElementDataArray result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (Clay_Arena *)jarg2; 
  result = Clay__DebugElementDataArray_Allocate_Arena(arg1,arg2);
  jresult = new Clay__DebugElementDataArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__DebugElementDataArray_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Clay__DebugElementDataArray *arg1 = (Clay__DebugElementDataArray *) 0 ;
  Clay__DebugElementData arg2 ;
  Clay__DebugElementData *argp2 ;
  Clay__DebugElementData *result = 0 ;
  
  arg1 = (Clay__DebugElementDataArray *)jarg1; 
  argp2 = (Clay__DebugElementData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay__DebugElementData", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (Clay__DebugElementData *)Clay__DebugElementDataArray_Add(arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__DebugElementDataArray_Get(void * jarg1, int jarg2) {
  void * jresult ;
  Clay__DebugElementDataArray *arg1 = (Clay__DebugElementDataArray *) 0 ;
  int arg2 ;
  Clay__DebugElementData *result = 0 ;
  
  arg1 = (Clay__DebugElementDataArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Clay__DebugElementData *)Clay__DebugElementDataArray_Get(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_LayoutElementHashMapItem_boundingBox_set(void * jarg1, void * jarg2) {
  Clay_LayoutElementHashMapItem *arg1 = (Clay_LayoutElementHashMapItem *) 0 ;
  Clay_BoundingBox *arg2 = (Clay_BoundingBox *) 0 ;
  
  arg1 = (Clay_LayoutElementHashMapItem *)jarg1; 
  arg2 = (Clay_BoundingBox *)jarg2; 
  if (arg1) (arg1)->boundingBox = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_LayoutElementHashMapItem_boundingBox_get(void * jarg1) {
  void * jresult ;
  Clay_LayoutElementHashMapItem *arg1 = (Clay_LayoutElementHashMapItem *) 0 ;
  Clay_BoundingBox *result = 0 ;
  
  arg1 = (Clay_LayoutElementHashMapItem *)jarg1; 
  result = (Clay_BoundingBox *)& ((arg1)->boundingBox);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_LayoutElementHashMapItem_elementId_set(void * jarg1, void * jarg2) {
  Clay_LayoutElementHashMapItem *arg1 = (Clay_LayoutElementHashMapItem *) 0 ;
  Clay_ElementId *arg2 = (Clay_ElementId *) 0 ;
  
  arg1 = (Clay_LayoutElementHashMapItem *)jarg1; 
  arg2 = (Clay_ElementId *)jarg2; 
  if (arg1) (arg1)->elementId = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_LayoutElementHashMapItem_elementId_get(void * jarg1) {
  void * jresult ;
  Clay_LayoutElementHashMapItem *arg1 = (Clay_LayoutElementHashMapItem *) 0 ;
  Clay_ElementId *result = 0 ;
  
  arg1 = (Clay_LayoutElementHashMapItem *)jarg1; 
  result = (Clay_ElementId *)& ((arg1)->elementId);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_LayoutElementHashMapItem_layoutElement_set(void * jarg1, void * jarg2) {
  Clay_LayoutElementHashMapItem *arg1 = (Clay_LayoutElementHashMapItem *) 0 ;
  Clay_LayoutElement *arg2 = (Clay_LayoutElement *) 0 ;
  
  arg1 = (Clay_LayoutElementHashMapItem *)jarg1; 
  arg2 = (Clay_LayoutElement *)jarg2; 
  if (arg1) (arg1)->layoutElement = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_LayoutElementHashMapItem_layoutElement_get(void * jarg1) {
  void * jresult ;
  Clay_LayoutElementHashMapItem *arg1 = (Clay_LayoutElementHashMapItem *) 0 ;
  Clay_LayoutElement *result = 0 ;
  
  arg1 = (Clay_LayoutElementHashMapItem *)jarg1; 
  result = (Clay_LayoutElement *) ((arg1)->layoutElement);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_LayoutElementHashMapItem_onHoverFunction_set(void * jarg1, void * jarg2) {
  Clay_LayoutElementHashMapItem *arg1 = (Clay_LayoutElementHashMapItem *) 0 ;
  void (*arg2)(Clay_ElementId,Clay_PointerData,intptr_t) = (void (*)(Clay_ElementId,Clay_PointerData,intptr_t)) 0 ;
  
  arg1 = (Clay_LayoutElementHashMapItem *)jarg1; 
  arg2 = (void (*)(Clay_ElementId,Clay_PointerData,intptr_t))jarg2; 
  if (arg1) (arg1)->onHoverFunction = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_LayoutElementHashMapItem_onHoverFunction_get(void * jarg1) {
  void * jresult ;
  Clay_LayoutElementHashMapItem *arg1 = (Clay_LayoutElementHashMapItem *) 0 ;
  void (*result)(Clay_ElementId,Clay_PointerData,intptr_t) = 0 ;
  
  arg1 = (Clay_LayoutElementHashMapItem *)jarg1; 
  result = (void (*)(Clay_ElementId,Clay_PointerData,intptr_t)) ((arg1)->onHoverFunction);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_LayoutElementHashMapItem_hoverFunctionUserData_set(void * jarg1, void * jarg2) {
  Clay_LayoutElementHashMapItem *arg1 = (Clay_LayoutElementHashMapItem *) 0 ;
  intptr_t arg2 ;
  intptr_t *argp2 ;
  
  arg1 = (Clay_LayoutElementHashMapItem *)jarg1; 
  argp2 = (intptr_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null intptr_t", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->hoverFunctionUserData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_LayoutElementHashMapItem_hoverFunctionUserData_get(void * jarg1) {
  void * jresult ;
  Clay_LayoutElementHashMapItem *arg1 = (Clay_LayoutElementHashMapItem *) 0 ;
  intptr_t result;
  
  arg1 = (Clay_LayoutElementHashMapItem *)jarg1; 
  result =  ((arg1)->hoverFunctionUserData);
  jresult = new intptr_t(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_LayoutElementHashMapItem_nextIndex_set(void * jarg1, int jarg2) {
  Clay_LayoutElementHashMapItem *arg1 = (Clay_LayoutElementHashMapItem *) 0 ;
  int arg2 ;
  
  arg1 = (Clay_LayoutElementHashMapItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nextIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Clay_LayoutElementHashMapItem_nextIndex_get(void * jarg1) {
  int jresult ;
  Clay_LayoutElementHashMapItem *arg1 = (Clay_LayoutElementHashMapItem *) 0 ;
  int result;
  
  arg1 = (Clay_LayoutElementHashMapItem *)jarg1; 
  result = (int) ((arg1)->nextIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_LayoutElementHashMapItem_generation_set(void * jarg1, unsigned int jarg2) {
  Clay_LayoutElementHashMapItem *arg1 = (Clay_LayoutElementHashMapItem *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay_LayoutElementHashMapItem *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->generation = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_LayoutElementHashMapItem_generation_get(void * jarg1) {
  unsigned int jresult ;
  Clay_LayoutElementHashMapItem *arg1 = (Clay_LayoutElementHashMapItem *) 0 ;
  unsigned int result;
  
  arg1 = (Clay_LayoutElementHashMapItem *)jarg1; 
  result = (unsigned int) ((arg1)->generation);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_LayoutElementHashMapItem_debugData_set(void * jarg1, void * jarg2) {
  Clay_LayoutElementHashMapItem *arg1 = (Clay_LayoutElementHashMapItem *) 0 ;
  Clay__DebugElementData *arg2 = (Clay__DebugElementData *) 0 ;
  
  arg1 = (Clay_LayoutElementHashMapItem *)jarg1; 
  arg2 = (Clay__DebugElementData *)jarg2; 
  if (arg1) (arg1)->debugData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay_LayoutElementHashMapItem_debugData_get(void * jarg1) {
  void * jresult ;
  Clay_LayoutElementHashMapItem *arg1 = (Clay_LayoutElementHashMapItem *) 0 ;
  Clay__DebugElementData *result = 0 ;
  
  arg1 = (Clay_LayoutElementHashMapItem *)jarg1; 
  result = (Clay__DebugElementData *) ((arg1)->debugData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay_LayoutElementHashMapItem() {
  void * jresult ;
  Clay_LayoutElementHashMapItem *result = 0 ;
  
  result = (Clay_LayoutElementHashMapItem *)new Clay_LayoutElementHashMapItem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay_LayoutElementHashMapItem(void * jarg1) {
  Clay_LayoutElementHashMapItem *arg1 = (Clay_LayoutElementHashMapItem *) 0 ;
  
  arg1 = (Clay_LayoutElementHashMapItem *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLAY__LAYOUT_ELEMENT_HASH_MAP_ITEM_DEFAULT_set(void * jarg1) {
  Clay_LayoutElementHashMapItem *arg1 = (Clay_LayoutElementHashMapItem *) 0 ;
  
  arg1 = (Clay_LayoutElementHashMapItem *)jarg1; 
  CLAY__LAYOUT_ELEMENT_HASH_MAP_ITEM_DEFAULT = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CLAY__LAYOUT_ELEMENT_HASH_MAP_ITEM_DEFAULT_get() {
  void * jresult ;
  Clay_LayoutElementHashMapItem *result = 0 ;
  
  result = (Clay_LayoutElementHashMapItem *)&CLAY__LAYOUT_ELEMENT_HASH_MAP_ITEM_DEFAULT;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__LayoutElementHashMapItemArray_capacity_set(void * jarg1, unsigned int jarg2) {
  Clay__LayoutElementHashMapItemArray *arg1 = (Clay__LayoutElementHashMapItemArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__LayoutElementHashMapItemArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->capacity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__LayoutElementHashMapItemArray_capacity_get(void * jarg1) {
  unsigned int jresult ;
  Clay__LayoutElementHashMapItemArray *arg1 = (Clay__LayoutElementHashMapItemArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__LayoutElementHashMapItemArray *)jarg1; 
  result = (unsigned int) ((arg1)->capacity);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__LayoutElementHashMapItemArray_length_set(void * jarg1, unsigned int jarg2) {
  Clay__LayoutElementHashMapItemArray *arg1 = (Clay__LayoutElementHashMapItemArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__LayoutElementHashMapItemArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__LayoutElementHashMapItemArray_length_get(void * jarg1) {
  unsigned int jresult ;
  Clay__LayoutElementHashMapItemArray *arg1 = (Clay__LayoutElementHashMapItemArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__LayoutElementHashMapItemArray *)jarg1; 
  result = (unsigned int) ((arg1)->length);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__LayoutElementHashMapItemArray_internalArray_set(void * jarg1, void * jarg2) {
  Clay__LayoutElementHashMapItemArray *arg1 = (Clay__LayoutElementHashMapItemArray *) 0 ;
  Clay_LayoutElementHashMapItem *arg2 = (Clay_LayoutElementHashMapItem *) 0 ;
  
  arg1 = (Clay__LayoutElementHashMapItemArray *)jarg1; 
  arg2 = (Clay_LayoutElementHashMapItem *)jarg2; 
  if (arg1) (arg1)->internalArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__LayoutElementHashMapItemArray_internalArray_get(void * jarg1) {
  void * jresult ;
  Clay__LayoutElementHashMapItemArray *arg1 = (Clay__LayoutElementHashMapItemArray *) 0 ;
  Clay_LayoutElementHashMapItem *result = 0 ;
  
  arg1 = (Clay__LayoutElementHashMapItemArray *)jarg1; 
  result = (Clay_LayoutElementHashMapItem *) ((arg1)->internalArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__LayoutElementHashMapItemArray() {
  void * jresult ;
  Clay__LayoutElementHashMapItemArray *result = 0 ;
  
  result = (Clay__LayoutElementHashMapItemArray *)new Clay__LayoutElementHashMapItemArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__LayoutElementHashMapItemArray(void * jarg1) {
  Clay__LayoutElementHashMapItemArray *arg1 = (Clay__LayoutElementHashMapItemArray *) 0 ;
  
  arg1 = (Clay__LayoutElementHashMapItemArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__LayoutElementHashMapItemArray_Allocate_Arena(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  Clay_Arena *arg2 = (Clay_Arena *) 0 ;
  Clay__LayoutElementHashMapItemArray result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (Clay_Arena *)jarg2; 
  result = Clay__LayoutElementHashMapItemArray_Allocate_Arena(arg1,arg2);
  jresult = new Clay__LayoutElementHashMapItemArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__LayoutElementHashMapItemArray_Get(void * jarg1, int jarg2) {
  void * jresult ;
  Clay__LayoutElementHashMapItemArray *arg1 = (Clay__LayoutElementHashMapItemArray *) 0 ;
  int arg2 ;
  Clay_LayoutElementHashMapItem *result = 0 ;
  
  arg1 = (Clay__LayoutElementHashMapItemArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Clay_LayoutElementHashMapItem *)Clay__LayoutElementHashMapItemArray_Get(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__LayoutElementHashMapItemArray_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Clay__LayoutElementHashMapItemArray *arg1 = (Clay__LayoutElementHashMapItemArray *) 0 ;
  Clay_LayoutElementHashMapItem arg2 ;
  Clay_LayoutElementHashMapItem *argp2 ;
  Clay_LayoutElementHashMapItem *result = 0 ;
  
  arg1 = (Clay__LayoutElementHashMapItemArray *)jarg1; 
  argp2 = (Clay_LayoutElementHashMapItem *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_LayoutElementHashMapItem", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (Clay_LayoutElementHashMapItem *)Clay__LayoutElementHashMapItemArray_Add(arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__MeasuredWord_startOffset_set(void * jarg1, unsigned int jarg2) {
  Clay__MeasuredWord *arg1 = (Clay__MeasuredWord *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__MeasuredWord *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->startOffset = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__MeasuredWord_startOffset_get(void * jarg1) {
  unsigned int jresult ;
  Clay__MeasuredWord *arg1 = (Clay__MeasuredWord *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__MeasuredWord *)jarg1; 
  result = (unsigned int) ((arg1)->startOffset);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__MeasuredWord_length_set(void * jarg1, unsigned int jarg2) {
  Clay__MeasuredWord *arg1 = (Clay__MeasuredWord *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__MeasuredWord *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__MeasuredWord_length_get(void * jarg1) {
  unsigned int jresult ;
  Clay__MeasuredWord *arg1 = (Clay__MeasuredWord *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__MeasuredWord *)jarg1; 
  result = (unsigned int) ((arg1)->length);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__MeasuredWord_width_set(void * jarg1, float jarg2) {
  Clay__MeasuredWord *arg1 = (Clay__MeasuredWord *) 0 ;
  float arg2 ;
  
  arg1 = (Clay__MeasuredWord *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Clay__MeasuredWord_width_get(void * jarg1) {
  float jresult ;
  Clay__MeasuredWord *arg1 = (Clay__MeasuredWord *) 0 ;
  float result;
  
  arg1 = (Clay__MeasuredWord *)jarg1; 
  result = (float) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__MeasuredWord_next_set(void * jarg1, int jarg2) {
  Clay__MeasuredWord *arg1 = (Clay__MeasuredWord *) 0 ;
  int arg2 ;
  
  arg1 = (Clay__MeasuredWord *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->next = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Clay__MeasuredWord_next_get(void * jarg1) {
  int jresult ;
  Clay__MeasuredWord *arg1 = (Clay__MeasuredWord *) 0 ;
  int result;
  
  arg1 = (Clay__MeasuredWord *)jarg1; 
  result = (int) ((arg1)->next);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__MeasuredWord() {
  void * jresult ;
  Clay__MeasuredWord *result = 0 ;
  
  result = (Clay__MeasuredWord *)new Clay__MeasuredWord();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__MeasuredWord(void * jarg1) {
  Clay__MeasuredWord *arg1 = (Clay__MeasuredWord *) 0 ;
  
  arg1 = (Clay__MeasuredWord *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLAY__MEASURED_WORD_DEFAULT_set(void * jarg1) {
  Clay__MeasuredWord *arg1 = (Clay__MeasuredWord *) 0 ;
  
  arg1 = (Clay__MeasuredWord *)jarg1; 
  CLAY__MEASURED_WORD_DEFAULT = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CLAY__MEASURED_WORD_DEFAULT_get() {
  void * jresult ;
  Clay__MeasuredWord *result = 0 ;
  
  result = (Clay__MeasuredWord *)&CLAY__MEASURED_WORD_DEFAULT;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__MeasuredWordArray_capacity_set(void * jarg1, unsigned int jarg2) {
  Clay__MeasuredWordArray *arg1 = (Clay__MeasuredWordArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__MeasuredWordArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->capacity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__MeasuredWordArray_capacity_get(void * jarg1) {
  unsigned int jresult ;
  Clay__MeasuredWordArray *arg1 = (Clay__MeasuredWordArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__MeasuredWordArray *)jarg1; 
  result = (unsigned int) ((arg1)->capacity);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__MeasuredWordArray_length_set(void * jarg1, unsigned int jarg2) {
  Clay__MeasuredWordArray *arg1 = (Clay__MeasuredWordArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__MeasuredWordArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__MeasuredWordArray_length_get(void * jarg1) {
  unsigned int jresult ;
  Clay__MeasuredWordArray *arg1 = (Clay__MeasuredWordArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__MeasuredWordArray *)jarg1; 
  result = (unsigned int) ((arg1)->length);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__MeasuredWordArray_internalArray_set(void * jarg1, void * jarg2) {
  Clay__MeasuredWordArray *arg1 = (Clay__MeasuredWordArray *) 0 ;
  Clay__MeasuredWord *arg2 = (Clay__MeasuredWord *) 0 ;
  
  arg1 = (Clay__MeasuredWordArray *)jarg1; 
  arg2 = (Clay__MeasuredWord *)jarg2; 
  if (arg1) (arg1)->internalArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__MeasuredWordArray_internalArray_get(void * jarg1) {
  void * jresult ;
  Clay__MeasuredWordArray *arg1 = (Clay__MeasuredWordArray *) 0 ;
  Clay__MeasuredWord *result = 0 ;
  
  arg1 = (Clay__MeasuredWordArray *)jarg1; 
  result = (Clay__MeasuredWord *) ((arg1)->internalArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__MeasuredWordArray() {
  void * jresult ;
  Clay__MeasuredWordArray *result = 0 ;
  
  result = (Clay__MeasuredWordArray *)new Clay__MeasuredWordArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__MeasuredWordArray(void * jarg1) {
  Clay__MeasuredWordArray *arg1 = (Clay__MeasuredWordArray *) 0 ;
  
  arg1 = (Clay__MeasuredWordArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__MeasuredWordArray_Allocate_Arena(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  Clay_Arena *arg2 = (Clay_Arena *) 0 ;
  Clay__MeasuredWordArray result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (Clay_Arena *)jarg2; 
  result = Clay__MeasuredWordArray_Allocate_Arena(arg1,arg2);
  jresult = new Clay__MeasuredWordArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__MeasuredWordArray_Get(void * jarg1, int jarg2) {
  void * jresult ;
  Clay__MeasuredWordArray *arg1 = (Clay__MeasuredWordArray *) 0 ;
  int arg2 ;
  Clay__MeasuredWord *result = 0 ;
  
  arg1 = (Clay__MeasuredWordArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Clay__MeasuredWord *)Clay__MeasuredWordArray_Get(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__MeasuredWordArray_Set(void * jarg1, int jarg2, void * jarg3) {
  Clay__MeasuredWordArray *arg1 = (Clay__MeasuredWordArray *) 0 ;
  int arg2 ;
  Clay__MeasuredWord arg3 ;
  Clay__MeasuredWord *argp3 ;
  
  arg1 = (Clay__MeasuredWordArray *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (Clay__MeasuredWord *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay__MeasuredWord", 0);
    return ;
  }
  arg3 = *argp3; 
  Clay__MeasuredWordArray_Set(arg1,arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__MeasuredWordArray_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Clay__MeasuredWordArray *arg1 = (Clay__MeasuredWordArray *) 0 ;
  Clay__MeasuredWord arg2 ;
  Clay__MeasuredWord *argp2 ;
  Clay__MeasuredWord *result = 0 ;
  
  arg1 = (Clay__MeasuredWordArray *)jarg1; 
  argp2 = (Clay__MeasuredWord *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay__MeasuredWord", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (Clay__MeasuredWord *)Clay__MeasuredWordArray_Add(arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__MeasureTextCacheItem_unwrappedDimensions_set(void * jarg1, void * jarg2) {
  Clay__MeasureTextCacheItem *arg1 = (Clay__MeasureTextCacheItem *) 0 ;
  Clay_Dimensions *arg2 = (Clay_Dimensions *) 0 ;
  
  arg1 = (Clay__MeasureTextCacheItem *)jarg1; 
  arg2 = (Clay_Dimensions *)jarg2; 
  if (arg1) (arg1)->unwrappedDimensions = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__MeasureTextCacheItem_unwrappedDimensions_get(void * jarg1) {
  void * jresult ;
  Clay__MeasureTextCacheItem *arg1 = (Clay__MeasureTextCacheItem *) 0 ;
  Clay_Dimensions *result = 0 ;
  
  arg1 = (Clay__MeasureTextCacheItem *)jarg1; 
  result = (Clay_Dimensions *)& ((arg1)->unwrappedDimensions);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__MeasureTextCacheItem_measuredWordsStartIndex_set(void * jarg1, int jarg2) {
  Clay__MeasureTextCacheItem *arg1 = (Clay__MeasureTextCacheItem *) 0 ;
  int arg2 ;
  
  arg1 = (Clay__MeasureTextCacheItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->measuredWordsStartIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Clay__MeasureTextCacheItem_measuredWordsStartIndex_get(void * jarg1) {
  int jresult ;
  Clay__MeasureTextCacheItem *arg1 = (Clay__MeasureTextCacheItem *) 0 ;
  int result;
  
  arg1 = (Clay__MeasureTextCacheItem *)jarg1; 
  result = (int) ((arg1)->measuredWordsStartIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__MeasureTextCacheItem_id_set(void * jarg1, unsigned int jarg2) {
  Clay__MeasureTextCacheItem *arg1 = (Clay__MeasureTextCacheItem *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__MeasureTextCacheItem *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__MeasureTextCacheItem_id_get(void * jarg1) {
  unsigned int jresult ;
  Clay__MeasureTextCacheItem *arg1 = (Clay__MeasureTextCacheItem *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__MeasureTextCacheItem *)jarg1; 
  result = (unsigned int) ((arg1)->id);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__MeasureTextCacheItem_nextIndex_set(void * jarg1, int jarg2) {
  Clay__MeasureTextCacheItem *arg1 = (Clay__MeasureTextCacheItem *) 0 ;
  int arg2 ;
  
  arg1 = (Clay__MeasureTextCacheItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nextIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Clay__MeasureTextCacheItem_nextIndex_get(void * jarg1) {
  int jresult ;
  Clay__MeasureTextCacheItem *arg1 = (Clay__MeasureTextCacheItem *) 0 ;
  int result;
  
  arg1 = (Clay__MeasureTextCacheItem *)jarg1; 
  result = (int) ((arg1)->nextIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__MeasureTextCacheItem_generation_set(void * jarg1, unsigned int jarg2) {
  Clay__MeasureTextCacheItem *arg1 = (Clay__MeasureTextCacheItem *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__MeasureTextCacheItem *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->generation = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__MeasureTextCacheItem_generation_get(void * jarg1) {
  unsigned int jresult ;
  Clay__MeasureTextCacheItem *arg1 = (Clay__MeasureTextCacheItem *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__MeasureTextCacheItem *)jarg1; 
  result = (unsigned int) ((arg1)->generation);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__MeasureTextCacheItem() {
  void * jresult ;
  Clay__MeasureTextCacheItem *result = 0 ;
  
  result = (Clay__MeasureTextCacheItem *)new Clay__MeasureTextCacheItem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__MeasureTextCacheItem(void * jarg1) {
  Clay__MeasureTextCacheItem *arg1 = (Clay__MeasureTextCacheItem *) 0 ;
  
  arg1 = (Clay__MeasureTextCacheItem *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLAY__MEASURE_TEXT_CACHE_ITEM_DEFAULT_set(void * jarg1) {
  Clay__MeasureTextCacheItem *arg1 = (Clay__MeasureTextCacheItem *) 0 ;
  
  arg1 = (Clay__MeasureTextCacheItem *)jarg1; 
  CLAY__MEASURE_TEXT_CACHE_ITEM_DEFAULT = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CLAY__MEASURE_TEXT_CACHE_ITEM_DEFAULT_get() {
  void * jresult ;
  Clay__MeasureTextCacheItem *result = 0 ;
  
  result = (Clay__MeasureTextCacheItem *)&CLAY__MEASURE_TEXT_CACHE_ITEM_DEFAULT;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__MeasureTextCacheItemArray_capacity_set(void * jarg1, unsigned int jarg2) {
  Clay__MeasureTextCacheItemArray *arg1 = (Clay__MeasureTextCacheItemArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__MeasureTextCacheItemArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->capacity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__MeasureTextCacheItemArray_capacity_get(void * jarg1) {
  unsigned int jresult ;
  Clay__MeasureTextCacheItemArray *arg1 = (Clay__MeasureTextCacheItemArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__MeasureTextCacheItemArray *)jarg1; 
  result = (unsigned int) ((arg1)->capacity);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__MeasureTextCacheItemArray_length_set(void * jarg1, unsigned int jarg2) {
  Clay__MeasureTextCacheItemArray *arg1 = (Clay__MeasureTextCacheItemArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__MeasureTextCacheItemArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__MeasureTextCacheItemArray_length_get(void * jarg1) {
  unsigned int jresult ;
  Clay__MeasureTextCacheItemArray *arg1 = (Clay__MeasureTextCacheItemArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__MeasureTextCacheItemArray *)jarg1; 
  result = (unsigned int) ((arg1)->length);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__MeasureTextCacheItemArray_internalArray_set(void * jarg1, void * jarg2) {
  Clay__MeasureTextCacheItemArray *arg1 = (Clay__MeasureTextCacheItemArray *) 0 ;
  Clay__MeasureTextCacheItem *arg2 = (Clay__MeasureTextCacheItem *) 0 ;
  
  arg1 = (Clay__MeasureTextCacheItemArray *)jarg1; 
  arg2 = (Clay__MeasureTextCacheItem *)jarg2; 
  if (arg1) (arg1)->internalArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__MeasureTextCacheItemArray_internalArray_get(void * jarg1) {
  void * jresult ;
  Clay__MeasureTextCacheItemArray *arg1 = (Clay__MeasureTextCacheItemArray *) 0 ;
  Clay__MeasureTextCacheItem *result = 0 ;
  
  arg1 = (Clay__MeasureTextCacheItemArray *)jarg1; 
  result = (Clay__MeasureTextCacheItem *) ((arg1)->internalArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__MeasureTextCacheItemArray() {
  void * jresult ;
  Clay__MeasureTextCacheItemArray *result = 0 ;
  
  result = (Clay__MeasureTextCacheItemArray *)new Clay__MeasureTextCacheItemArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__MeasureTextCacheItemArray(void * jarg1) {
  Clay__MeasureTextCacheItemArray *arg1 = (Clay__MeasureTextCacheItemArray *) 0 ;
  
  arg1 = (Clay__MeasureTextCacheItemArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__MeasureTextCacheItemArray_Allocate_Arena(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  Clay_Arena *arg2 = (Clay_Arena *) 0 ;
  Clay__MeasureTextCacheItemArray result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (Clay_Arena *)jarg2; 
  result = Clay__MeasureTextCacheItemArray_Allocate_Arena(arg1,arg2);
  jresult = new Clay__MeasureTextCacheItemArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__MeasureTextCacheItemArray_Get(void * jarg1, int jarg2) {
  void * jresult ;
  Clay__MeasureTextCacheItemArray *arg1 = (Clay__MeasureTextCacheItemArray *) 0 ;
  int arg2 ;
  Clay__MeasureTextCacheItem *result = 0 ;
  
  arg1 = (Clay__MeasureTextCacheItemArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Clay__MeasureTextCacheItem *)Clay__MeasureTextCacheItemArray_Get(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__MeasureTextCacheItemArray_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Clay__MeasureTextCacheItemArray *arg1 = (Clay__MeasureTextCacheItemArray *) 0 ;
  Clay__MeasureTextCacheItem arg2 ;
  Clay__MeasureTextCacheItem *argp2 ;
  Clay__MeasureTextCacheItem *result = 0 ;
  
  arg1 = (Clay__MeasureTextCacheItemArray *)jarg1; 
  argp2 = (Clay__MeasureTextCacheItem *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay__MeasureTextCacheItem", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (Clay__MeasureTextCacheItem *)Clay__MeasureTextCacheItemArray_Add(arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__MeasureTextCacheItemArray_Set(void * jarg1, int jarg2, void * jarg3) {
  Clay__MeasureTextCacheItemArray *arg1 = (Clay__MeasureTextCacheItemArray *) 0 ;
  int arg2 ;
  Clay__MeasureTextCacheItem arg3 ;
  Clay__MeasureTextCacheItem *argp3 ;
  
  arg1 = (Clay__MeasureTextCacheItemArray *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (Clay__MeasureTextCacheItem *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay__MeasureTextCacheItem", 0);
    return ;
  }
  arg3 = *argp3; 
  Clay__MeasureTextCacheItemArray_Set(arg1,arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__int32_tArray_capacity_set(void * jarg1, unsigned int jarg2) {
  Clay__int32_tArray *arg1 = (Clay__int32_tArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__int32_tArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->capacity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__int32_tArray_capacity_get(void * jarg1) {
  unsigned int jresult ;
  Clay__int32_tArray *arg1 = (Clay__int32_tArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__int32_tArray *)jarg1; 
  result = (unsigned int) ((arg1)->capacity);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__int32_tArray_length_set(void * jarg1, unsigned int jarg2) {
  Clay__int32_tArray *arg1 = (Clay__int32_tArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__int32_tArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__int32_tArray_length_get(void * jarg1) {
  unsigned int jresult ;
  Clay__int32_tArray *arg1 = (Clay__int32_tArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__int32_tArray *)jarg1; 
  result = (unsigned int) ((arg1)->length);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__int32_tArray_internalArray_set(void * jarg1, void * jarg2) {
  Clay__int32_tArray *arg1 = (Clay__int32_tArray *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (Clay__int32_tArray *)jarg1; 
  arg2 = (int *)jarg2; 
  if (arg1) (arg1)->internalArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__int32_tArray_internalArray_get(void * jarg1) {
  void * jresult ;
  Clay__int32_tArray *arg1 = (Clay__int32_tArray *) 0 ;
  int *result = 0 ;
  
  arg1 = (Clay__int32_tArray *)jarg1; 
  result = (int *) ((arg1)->internalArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__int32_tArray() {
  void * jresult ;
  Clay__int32_tArray *result = 0 ;
  
  result = (Clay__int32_tArray *)new Clay__int32_tArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__int32_tArray(void * jarg1) {
  Clay__int32_tArray *arg1 = (Clay__int32_tArray *) 0 ;
  
  arg1 = (Clay__int32_tArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__int32_tArray_Allocate_Arena(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  Clay_Arena *arg2 = (Clay_Arena *) 0 ;
  Clay__int32_tArray result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (Clay_Arena *)jarg2; 
  result = Clay__int32_tArray_Allocate_Arena(arg1,arg2);
  jresult = new Clay__int32_tArray(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Clay__int32_tArray_Get(void * jarg1, int jarg2) {
  int jresult ;
  Clay__int32_tArray *arg1 = (Clay__int32_tArray *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Clay__int32_tArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Clay__int32_tArray_Get(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__int32_tArray_Add(void * jarg1, int jarg2) {
  Clay__int32_tArray *arg1 = (Clay__int32_tArray *) 0 ;
  int arg2 ;
  
  arg1 = (Clay__int32_tArray *)jarg1; 
  arg2 = (int)jarg2; 
  Clay__int32_tArray_Add(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__int32_tArray_Set(void * jarg1, int jarg2, int jarg3) {
  Clay__int32_tArray *arg1 = (Clay__int32_tArray *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Clay__int32_tArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  Clay__int32_tArray_Set(arg1,arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Clay__int32_tArray_RemoveSwapback(void * jarg1, int jarg2) {
  int jresult ;
  Clay__int32_tArray *arg1 = (Clay__int32_tArray *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Clay__int32_tArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Clay__int32_tArray_RemoveSwapback(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__LayoutElementTreeNode_layoutElement_set(void * jarg1, void * jarg2) {
  Clay__LayoutElementTreeNode *arg1 = (Clay__LayoutElementTreeNode *) 0 ;
  Clay_LayoutElement *arg2 = (Clay_LayoutElement *) 0 ;
  
  arg1 = (Clay__LayoutElementTreeNode *)jarg1; 
  arg2 = (Clay_LayoutElement *)jarg2; 
  if (arg1) (arg1)->layoutElement = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__LayoutElementTreeNode_layoutElement_get(void * jarg1) {
  void * jresult ;
  Clay__LayoutElementTreeNode *arg1 = (Clay__LayoutElementTreeNode *) 0 ;
  Clay_LayoutElement *result = 0 ;
  
  arg1 = (Clay__LayoutElementTreeNode *)jarg1; 
  result = (Clay_LayoutElement *) ((arg1)->layoutElement);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__LayoutElementTreeNode_position_set(void * jarg1, void * jarg2) {
  Clay__LayoutElementTreeNode *arg1 = (Clay__LayoutElementTreeNode *) 0 ;
  Clay_Vector2 *arg2 = (Clay_Vector2 *) 0 ;
  
  arg1 = (Clay__LayoutElementTreeNode *)jarg1; 
  arg2 = (Clay_Vector2 *)jarg2; 
  if (arg1) (arg1)->position = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__LayoutElementTreeNode_position_get(void * jarg1) {
  void * jresult ;
  Clay__LayoutElementTreeNode *arg1 = (Clay__LayoutElementTreeNode *) 0 ;
  Clay_Vector2 *result = 0 ;
  
  arg1 = (Clay__LayoutElementTreeNode *)jarg1; 
  result = (Clay_Vector2 *)& ((arg1)->position);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__LayoutElementTreeNode_nextChildOffset_set(void * jarg1, void * jarg2) {
  Clay__LayoutElementTreeNode *arg1 = (Clay__LayoutElementTreeNode *) 0 ;
  Clay_Vector2 *arg2 = (Clay_Vector2 *) 0 ;
  
  arg1 = (Clay__LayoutElementTreeNode *)jarg1; 
  arg2 = (Clay_Vector2 *)jarg2; 
  if (arg1) (arg1)->nextChildOffset = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__LayoutElementTreeNode_nextChildOffset_get(void * jarg1) {
  void * jresult ;
  Clay__LayoutElementTreeNode *arg1 = (Clay__LayoutElementTreeNode *) 0 ;
  Clay_Vector2 *result = 0 ;
  
  arg1 = (Clay__LayoutElementTreeNode *)jarg1; 
  result = (Clay_Vector2 *)& ((arg1)->nextChildOffset);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__LayoutElementTreeNode() {
  void * jresult ;
  Clay__LayoutElementTreeNode *result = 0 ;
  
  result = (Clay__LayoutElementTreeNode *)new Clay__LayoutElementTreeNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__LayoutElementTreeNode(void * jarg1) {
  Clay__LayoutElementTreeNode *arg1 = (Clay__LayoutElementTreeNode *) 0 ;
  
  arg1 = (Clay__LayoutElementTreeNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLAY__LAYOUT_ELEMENT_TREE_NODE_DEFAULT_set(void * jarg1) {
  Clay__LayoutElementTreeNode *arg1 = (Clay__LayoutElementTreeNode *) 0 ;
  
  arg1 = (Clay__LayoutElementTreeNode *)jarg1; 
  CLAY__LAYOUT_ELEMENT_TREE_NODE_DEFAULT = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CLAY__LAYOUT_ELEMENT_TREE_NODE_DEFAULT_get() {
  void * jresult ;
  Clay__LayoutElementTreeNode *result = 0 ;
  
  result = (Clay__LayoutElementTreeNode *)&CLAY__LAYOUT_ELEMENT_TREE_NODE_DEFAULT;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__LayoutElementTreeNodeArray_capacity_set(void * jarg1, unsigned int jarg2) {
  Clay__LayoutElementTreeNodeArray *arg1 = (Clay__LayoutElementTreeNodeArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__LayoutElementTreeNodeArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->capacity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__LayoutElementTreeNodeArray_capacity_get(void * jarg1) {
  unsigned int jresult ;
  Clay__LayoutElementTreeNodeArray *arg1 = (Clay__LayoutElementTreeNodeArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__LayoutElementTreeNodeArray *)jarg1; 
  result = (unsigned int) ((arg1)->capacity);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__LayoutElementTreeNodeArray_length_set(void * jarg1, unsigned int jarg2) {
  Clay__LayoutElementTreeNodeArray *arg1 = (Clay__LayoutElementTreeNodeArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__LayoutElementTreeNodeArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__LayoutElementTreeNodeArray_length_get(void * jarg1) {
  unsigned int jresult ;
  Clay__LayoutElementTreeNodeArray *arg1 = (Clay__LayoutElementTreeNodeArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__LayoutElementTreeNodeArray *)jarg1; 
  result = (unsigned int) ((arg1)->length);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__LayoutElementTreeNodeArray_internalArray_set(void * jarg1, void * jarg2) {
  Clay__LayoutElementTreeNodeArray *arg1 = (Clay__LayoutElementTreeNodeArray *) 0 ;
  Clay__LayoutElementTreeNode *arg2 = (Clay__LayoutElementTreeNode *) 0 ;
  
  arg1 = (Clay__LayoutElementTreeNodeArray *)jarg1; 
  arg2 = (Clay__LayoutElementTreeNode *)jarg2; 
  if (arg1) (arg1)->internalArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__LayoutElementTreeNodeArray_internalArray_get(void * jarg1) {
  void * jresult ;
  Clay__LayoutElementTreeNodeArray *arg1 = (Clay__LayoutElementTreeNodeArray *) 0 ;
  Clay__LayoutElementTreeNode *result = 0 ;
  
  arg1 = (Clay__LayoutElementTreeNodeArray *)jarg1; 
  result = (Clay__LayoutElementTreeNode *) ((arg1)->internalArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__LayoutElementTreeNodeArray() {
  void * jresult ;
  Clay__LayoutElementTreeNodeArray *result = 0 ;
  
  result = (Clay__LayoutElementTreeNodeArray *)new Clay__LayoutElementTreeNodeArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__LayoutElementTreeNodeArray(void * jarg1) {
  Clay__LayoutElementTreeNodeArray *arg1 = (Clay__LayoutElementTreeNodeArray *) 0 ;
  
  arg1 = (Clay__LayoutElementTreeNodeArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__LayoutElementTreeNodeArray_Allocate_Arena(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  Clay_Arena *arg2 = (Clay_Arena *) 0 ;
  Clay__LayoutElementTreeNodeArray result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (Clay_Arena *)jarg2; 
  result = Clay__LayoutElementTreeNodeArray_Allocate_Arena(arg1,arg2);
  jresult = new Clay__LayoutElementTreeNodeArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__LayoutElementTreeNodeArray_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Clay__LayoutElementTreeNodeArray *arg1 = (Clay__LayoutElementTreeNodeArray *) 0 ;
  Clay__LayoutElementTreeNode arg2 ;
  Clay__LayoutElementTreeNode *argp2 ;
  Clay__LayoutElementTreeNode *result = 0 ;
  
  arg1 = (Clay__LayoutElementTreeNodeArray *)jarg1; 
  argp2 = (Clay__LayoutElementTreeNode *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay__LayoutElementTreeNode", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (Clay__LayoutElementTreeNode *)Clay__LayoutElementTreeNodeArray_Add(arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__LayoutElementTreeNodeArray_Get(void * jarg1, int jarg2) {
  void * jresult ;
  Clay__LayoutElementTreeNodeArray *arg1 = (Clay__LayoutElementTreeNodeArray *) 0 ;
  int arg2 ;
  Clay__LayoutElementTreeNode *result = 0 ;
  
  arg1 = (Clay__LayoutElementTreeNodeArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Clay__LayoutElementTreeNode *)Clay__LayoutElementTreeNodeArray_Get(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__LayoutElementTreeRoot_layoutElementIndex_set(void * jarg1, unsigned int jarg2) {
  Clay__LayoutElementTreeRoot *arg1 = (Clay__LayoutElementTreeRoot *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__LayoutElementTreeRoot *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->layoutElementIndex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__LayoutElementTreeRoot_layoutElementIndex_get(void * jarg1) {
  unsigned int jresult ;
  Clay__LayoutElementTreeRoot *arg1 = (Clay__LayoutElementTreeRoot *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__LayoutElementTreeRoot *)jarg1; 
  result = (unsigned int) ((arg1)->layoutElementIndex);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__LayoutElementTreeRoot_parentId_set(void * jarg1, unsigned int jarg2) {
  Clay__LayoutElementTreeRoot *arg1 = (Clay__LayoutElementTreeRoot *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__LayoutElementTreeRoot *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->parentId = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__LayoutElementTreeRoot_parentId_get(void * jarg1) {
  unsigned int jresult ;
  Clay__LayoutElementTreeRoot *arg1 = (Clay__LayoutElementTreeRoot *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__LayoutElementTreeRoot *)jarg1; 
  result = (unsigned int) ((arg1)->parentId);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__LayoutElementTreeRoot_clipElementId_set(void * jarg1, unsigned int jarg2) {
  Clay__LayoutElementTreeRoot *arg1 = (Clay__LayoutElementTreeRoot *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__LayoutElementTreeRoot *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->clipElementId = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__LayoutElementTreeRoot_clipElementId_get(void * jarg1) {
  unsigned int jresult ;
  Clay__LayoutElementTreeRoot *arg1 = (Clay__LayoutElementTreeRoot *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__LayoutElementTreeRoot *)jarg1; 
  result = (unsigned int) ((arg1)->clipElementId);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__LayoutElementTreeRoot_zIndex_set(void * jarg1, unsigned int jarg2) {
  Clay__LayoutElementTreeRoot *arg1 = (Clay__LayoutElementTreeRoot *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__LayoutElementTreeRoot *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->zIndex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__LayoutElementTreeRoot_zIndex_get(void * jarg1) {
  unsigned int jresult ;
  Clay__LayoutElementTreeRoot *arg1 = (Clay__LayoutElementTreeRoot *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__LayoutElementTreeRoot *)jarg1; 
  result = (unsigned int) ((arg1)->zIndex);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__LayoutElementTreeRoot_pointerOffset_set(void * jarg1, void * jarg2) {
  Clay__LayoutElementTreeRoot *arg1 = (Clay__LayoutElementTreeRoot *) 0 ;
  Clay_Vector2 *arg2 = (Clay_Vector2 *) 0 ;
  
  arg1 = (Clay__LayoutElementTreeRoot *)jarg1; 
  arg2 = (Clay_Vector2 *)jarg2; 
  if (arg1) (arg1)->pointerOffset = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__LayoutElementTreeRoot_pointerOffset_get(void * jarg1) {
  void * jresult ;
  Clay__LayoutElementTreeRoot *arg1 = (Clay__LayoutElementTreeRoot *) 0 ;
  Clay_Vector2 *result = 0 ;
  
  arg1 = (Clay__LayoutElementTreeRoot *)jarg1; 
  result = (Clay_Vector2 *)& ((arg1)->pointerOffset);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__LayoutElementTreeRoot() {
  void * jresult ;
  Clay__LayoutElementTreeRoot *result = 0 ;
  
  result = (Clay__LayoutElementTreeRoot *)new Clay__LayoutElementTreeRoot();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__LayoutElementTreeRoot(void * jarg1) {
  Clay__LayoutElementTreeRoot *arg1 = (Clay__LayoutElementTreeRoot *) 0 ;
  
  arg1 = (Clay__LayoutElementTreeRoot *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLAY__LAYOUT_ELEMENT_TREE_ROOT_DEFAULT_set(void * jarg1) {
  Clay__LayoutElementTreeRoot *arg1 = (Clay__LayoutElementTreeRoot *) 0 ;
  
  arg1 = (Clay__LayoutElementTreeRoot *)jarg1; 
  CLAY__LAYOUT_ELEMENT_TREE_ROOT_DEFAULT = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CLAY__LAYOUT_ELEMENT_TREE_ROOT_DEFAULT_get() {
  void * jresult ;
  Clay__LayoutElementTreeRoot *result = 0 ;
  
  result = (Clay__LayoutElementTreeRoot *)&CLAY__LAYOUT_ELEMENT_TREE_ROOT_DEFAULT;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__LayoutElementTreeRootArray_capacity_set(void * jarg1, unsigned int jarg2) {
  Clay__LayoutElementTreeRootArray *arg1 = (Clay__LayoutElementTreeRootArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__LayoutElementTreeRootArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->capacity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__LayoutElementTreeRootArray_capacity_get(void * jarg1) {
  unsigned int jresult ;
  Clay__LayoutElementTreeRootArray *arg1 = (Clay__LayoutElementTreeRootArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__LayoutElementTreeRootArray *)jarg1; 
  result = (unsigned int) ((arg1)->capacity);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__LayoutElementTreeRootArray_length_set(void * jarg1, unsigned int jarg2) {
  Clay__LayoutElementTreeRootArray *arg1 = (Clay__LayoutElementTreeRootArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__LayoutElementTreeRootArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__LayoutElementTreeRootArray_length_get(void * jarg1) {
  unsigned int jresult ;
  Clay__LayoutElementTreeRootArray *arg1 = (Clay__LayoutElementTreeRootArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__LayoutElementTreeRootArray *)jarg1; 
  result = (unsigned int) ((arg1)->length);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__LayoutElementTreeRootArray_internalArray_set(void * jarg1, void * jarg2) {
  Clay__LayoutElementTreeRootArray *arg1 = (Clay__LayoutElementTreeRootArray *) 0 ;
  Clay__LayoutElementTreeRoot *arg2 = (Clay__LayoutElementTreeRoot *) 0 ;
  
  arg1 = (Clay__LayoutElementTreeRootArray *)jarg1; 
  arg2 = (Clay__LayoutElementTreeRoot *)jarg2; 
  if (arg1) (arg1)->internalArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__LayoutElementTreeRootArray_internalArray_get(void * jarg1) {
  void * jresult ;
  Clay__LayoutElementTreeRootArray *arg1 = (Clay__LayoutElementTreeRootArray *) 0 ;
  Clay__LayoutElementTreeRoot *result = 0 ;
  
  arg1 = (Clay__LayoutElementTreeRootArray *)jarg1; 
  result = (Clay__LayoutElementTreeRoot *) ((arg1)->internalArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__LayoutElementTreeRootArray() {
  void * jresult ;
  Clay__LayoutElementTreeRootArray *result = 0 ;
  
  result = (Clay__LayoutElementTreeRootArray *)new Clay__LayoutElementTreeRootArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__LayoutElementTreeRootArray(void * jarg1) {
  Clay__LayoutElementTreeRootArray *arg1 = (Clay__LayoutElementTreeRootArray *) 0 ;
  
  arg1 = (Clay__LayoutElementTreeRootArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__LayoutElementTreeRootArray_Allocate_Arena(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  Clay_Arena *arg2 = (Clay_Arena *) 0 ;
  Clay__LayoutElementTreeRootArray result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (Clay_Arena *)jarg2; 
  result = Clay__LayoutElementTreeRootArray_Allocate_Arena(arg1,arg2);
  jresult = new Clay__LayoutElementTreeRootArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__LayoutElementTreeRootArray_Add(void * jarg1, void * jarg2) {
  void * jresult ;
  Clay__LayoutElementTreeRootArray *arg1 = (Clay__LayoutElementTreeRootArray *) 0 ;
  Clay__LayoutElementTreeRoot arg2 ;
  Clay__LayoutElementTreeRoot *argp2 ;
  Clay__LayoutElementTreeRoot *result = 0 ;
  
  arg1 = (Clay__LayoutElementTreeRootArray *)jarg1; 
  argp2 = (Clay__LayoutElementTreeRoot *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay__LayoutElementTreeRoot", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (Clay__LayoutElementTreeRoot *)Clay__LayoutElementTreeRootArray_Add(arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__LayoutElementTreeRootArray_Get(void * jarg1, int jarg2) {
  void * jresult ;
  Clay__LayoutElementTreeRootArray *arg1 = (Clay__LayoutElementTreeRootArray *) 0 ;
  int arg2 ;
  Clay__LayoutElementTreeRoot *result = 0 ;
  
  arg1 = (Clay__LayoutElementTreeRootArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Clay__LayoutElementTreeRoot *)Clay__LayoutElementTreeRootArray_Get(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__CharArray_capacity_set(void * jarg1, unsigned int jarg2) {
  Clay__CharArray *arg1 = (Clay__CharArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__CharArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->capacity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__CharArray_capacity_get(void * jarg1) {
  unsigned int jresult ;
  Clay__CharArray *arg1 = (Clay__CharArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__CharArray *)jarg1; 
  result = (unsigned int) ((arg1)->capacity);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__CharArray_length_set(void * jarg1, unsigned int jarg2) {
  Clay__CharArray *arg1 = (Clay__CharArray *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__CharArray *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__CharArray_length_get(void * jarg1) {
  unsigned int jresult ;
  Clay__CharArray *arg1 = (Clay__CharArray *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__CharArray *)jarg1; 
  result = (unsigned int) ((arg1)->length);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__CharArray_internalArray_set(void * jarg1, void * jarg2) {
  Clay__CharArray *arg1 = (Clay__CharArray *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  arg1 = (Clay__CharArray *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  if (arg1) (arg1)->internalArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__CharArray_internalArray_get(void * jarg1) {
  void * jresult ;
  Clay__CharArray *arg1 = (Clay__CharArray *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (Clay__CharArray *)jarg1; 
  result = (unsigned char *) ((arg1)->internalArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__CharArray() {
  void * jresult ;
  Clay__CharArray *result = 0 ;
  
  result = (Clay__CharArray *)new Clay__CharArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__CharArray(void * jarg1) {
  Clay__CharArray *arg1 = (Clay__CharArray *) 0 ;
  
  arg1 = (Clay__CharArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__CharArray_Allocate_Arena(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  Clay_Arena *arg2 = (Clay_Arena *) 0 ;
  Clay__CharArray result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (Clay_Arena *)jarg2; 
  result = Clay__CharArray_Allocate_Arena(arg1,arg2);
  jresult = new Clay__CharArray(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__WriteStringToCharBuffer(void * jarg1, void * jarg2) {
  void * jresult ;
  Clay__CharArray *arg1 = (Clay__CharArray *) 0 ;
  Clay_String arg2 ;
  Clay_String *argp2 ;
  Clay_String result;
  
  arg1 = (Clay__CharArray *)jarg1; 
  argp2 = (Clay_String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_String", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = Clay__WriteStringToCharBuffer(arg1,SWIG_STD_MOVE(arg2));
  jresult = new Clay_String(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__pointerInfo_set(void * jarg1) {
  Clay_PointerData *arg1 = (Clay_PointerData *) 0 ;
  
  arg1 = (Clay_PointerData *)jarg1; 
  Clay__pointerInfo = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__pointerInfo_get() {
  void * jresult ;
  Clay_PointerData *result = 0 ;
  
  result = (Clay_PointerData *)&Clay__pointerInfo;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__layoutDimensions_set(void * jarg1) {
  Clay_Dimensions *arg1 = (Clay_Dimensions *) 0 ;
  
  arg1 = (Clay_Dimensions *)jarg1; 
  Clay__layoutDimensions = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__layoutDimensions_get() {
  void * jresult ;
  Clay_Dimensions *result = 0 ;
  
  result = (Clay_Dimensions *)&Clay__layoutDimensions;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__dynamicElementIndexBaseHash_set(void * jarg1) {
  Clay_ElementId *arg1 = (Clay_ElementId *) 0 ;
  
  arg1 = (Clay_ElementId *)jarg1; 
  Clay__dynamicElementIndexBaseHash = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__dynamicElementIndexBaseHash_get() {
  void * jresult ;
  Clay_ElementId *result = 0 ;
  
  result = (Clay_ElementId *)&Clay__dynamicElementIndexBaseHash;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__dynamicElementIndex_set(unsigned int jarg1) {
  unsigned int arg1 ;
  
  arg1 = (unsigned int)jarg1; 
  Clay__dynamicElementIndex = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__dynamicElementIndex_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)Clay__dynamicElementIndex;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__debugModeEnabled_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Clay__debugModeEnabled = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__debugModeEnabled_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Clay__debugModeEnabled;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__disableCulling_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Clay__disableCulling = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__disableCulling_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Clay__disableCulling;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__externalScrollHandlingEnabled_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Clay__externalScrollHandlingEnabled = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__externalScrollHandlingEnabled_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Clay__externalScrollHandlingEnabled;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__debugSelectedElementId_set(unsigned int jarg1) {
  unsigned int arg1 ;
  
  arg1 = (unsigned int)jarg1; 
  Clay__debugSelectedElementId = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__debugSelectedElementId_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)Clay__debugSelectedElementId;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__generation_set(unsigned int jarg1) {
  unsigned int arg1 ;
  
  arg1 = (unsigned int)jarg1; 
  Clay__generation = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__generation_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)Clay__generation;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__arenaResetOffset_set(unsigned long long jarg1) {
  unsigned long long arg1 ;
  
  arg1 = (unsigned long long)jarg1; 
  Clay__arenaResetOffset = arg1;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_Clay__arenaResetOffset_get() {
  unsigned long long jresult ;
  unsigned long long result;
  
  result = (unsigned long long)Clay__arenaResetOffset;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__internalArena_set(void * jarg1) {
  Clay_Arena *arg1 = (Clay_Arena *) 0 ;
  
  arg1 = (Clay_Arena *)jarg1; 
  Clay__internalArena = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__internalArena_get() {
  void * jresult ;
  Clay_Arena *result = 0 ;
  
  result = (Clay_Arena *)&Clay__internalArena;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__layoutElements_set(void * jarg1) {
  Clay_LayoutElementArray *arg1 = (Clay_LayoutElementArray *) 0 ;
  
  arg1 = (Clay_LayoutElementArray *)jarg1; 
  Clay__layoutElements = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__layoutElements_get() {
  void * jresult ;
  Clay_LayoutElementArray *result = 0 ;
  
  result = (Clay_LayoutElementArray *)&Clay__layoutElements;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__renderCommands_set(void * jarg1) {
  Clay_RenderCommandArray *arg1 = (Clay_RenderCommandArray *) 0 ;
  
  arg1 = (Clay_RenderCommandArray *)jarg1; 
  Clay__renderCommands = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__renderCommands_get() {
  void * jresult ;
  Clay_RenderCommandArray *result = 0 ;
  
  result = (Clay_RenderCommandArray *)&Clay__renderCommands;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__openLayoutElementStack_set(void * jarg1) {
  Clay__int32_tArray *arg1 = (Clay__int32_tArray *) 0 ;
  
  arg1 = (Clay__int32_tArray *)jarg1; 
  Clay__openLayoutElementStack = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__openLayoutElementStack_get() {
  void * jresult ;
  Clay__int32_tArray *result = 0 ;
  
  result = (Clay__int32_tArray *)&Clay__openLayoutElementStack;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__layoutElementChildren_set(void * jarg1) {
  Clay__int32_tArray *arg1 = (Clay__int32_tArray *) 0 ;
  
  arg1 = (Clay__int32_tArray *)jarg1; 
  Clay__layoutElementChildren = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__layoutElementChildren_get() {
  void * jresult ;
  Clay__int32_tArray *result = 0 ;
  
  result = (Clay__int32_tArray *)&Clay__layoutElementChildren;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__layoutElementChildrenBuffer_set(void * jarg1) {
  Clay__int32_tArray *arg1 = (Clay__int32_tArray *) 0 ;
  
  arg1 = (Clay__int32_tArray *)jarg1; 
  Clay__layoutElementChildrenBuffer = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__layoutElementChildrenBuffer_get() {
  void * jresult ;
  Clay__int32_tArray *result = 0 ;
  
  result = (Clay__int32_tArray *)&Clay__layoutElementChildrenBuffer;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__textElementData_set(void * jarg1) {
  Clay__TextElementDataArray *arg1 = (Clay__TextElementDataArray *) 0 ;
  
  arg1 = (Clay__TextElementDataArray *)jarg1; 
  Clay__textElementData = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__textElementData_get() {
  void * jresult ;
  Clay__TextElementDataArray *result = 0 ;
  
  result = (Clay__TextElementDataArray *)&Clay__textElementData;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__imageElementPointers_set(void * jarg1) {
  Clay__LayoutElementPointerArray *arg1 = (Clay__LayoutElementPointerArray *) 0 ;
  
  arg1 = (Clay__LayoutElementPointerArray *)jarg1; 
  Clay__imageElementPointers = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__imageElementPointers_get() {
  void * jresult ;
  Clay__LayoutElementPointerArray *result = 0 ;
  
  result = (Clay__LayoutElementPointerArray *)&Clay__imageElementPointers;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__reusableElementIndexBuffer_set(void * jarg1) {
  Clay__int32_tArray *arg1 = (Clay__int32_tArray *) 0 ;
  
  arg1 = (Clay__int32_tArray *)jarg1; 
  Clay__reusableElementIndexBuffer = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__reusableElementIndexBuffer_get() {
  void * jresult ;
  Clay__int32_tArray *result = 0 ;
  
  result = (Clay__int32_tArray *)&Clay__reusableElementIndexBuffer;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__layoutElementClipElementIds_set(void * jarg1) {
  Clay__int32_tArray *arg1 = (Clay__int32_tArray *) 0 ;
  
  arg1 = (Clay__int32_tArray *)jarg1; 
  Clay__layoutElementClipElementIds = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__layoutElementClipElementIds_get() {
  void * jresult ;
  Clay__int32_tArray *result = 0 ;
  
  result = (Clay__int32_tArray *)&Clay__layoutElementClipElementIds;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__layoutConfigs_set(void * jarg1) {
  Clay__LayoutConfigArray *arg1 = (Clay__LayoutConfigArray *) 0 ;
  
  arg1 = (Clay__LayoutConfigArray *)jarg1; 
  Clay__layoutConfigs = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__layoutConfigs_get() {
  void * jresult ;
  Clay__LayoutConfigArray *result = 0 ;
  
  result = (Clay__LayoutConfigArray *)&Clay__layoutConfigs;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__elementConfigBuffer_set(void * jarg1) {
  Clay__ElementConfigArray *arg1 = (Clay__ElementConfigArray *) 0 ;
  
  arg1 = (Clay__ElementConfigArray *)jarg1; 
  Clay__elementConfigBuffer = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__elementConfigBuffer_get() {
  void * jresult ;
  Clay__ElementConfigArray *result = 0 ;
  
  result = (Clay__ElementConfigArray *)&Clay__elementConfigBuffer;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__elementConfigs_set(void * jarg1) {
  Clay__ElementConfigArray *arg1 = (Clay__ElementConfigArray *) 0 ;
  
  arg1 = (Clay__ElementConfigArray *)jarg1; 
  Clay__elementConfigs = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__elementConfigs_get() {
  void * jresult ;
  Clay__ElementConfigArray *result = 0 ;
  
  result = (Clay__ElementConfigArray *)&Clay__elementConfigs;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__rectangleElementConfigs_set(void * jarg1) {
  Clay__RectangleElementConfigArray *arg1 = (Clay__RectangleElementConfigArray *) 0 ;
  
  arg1 = (Clay__RectangleElementConfigArray *)jarg1; 
  Clay__rectangleElementConfigs = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__rectangleElementConfigs_get() {
  void * jresult ;
  Clay__RectangleElementConfigArray *result = 0 ;
  
  result = (Clay__RectangleElementConfigArray *)&Clay__rectangleElementConfigs;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__textElementConfigs_set(void * jarg1) {
  Clay__TextElementConfigArray *arg1 = (Clay__TextElementConfigArray *) 0 ;
  
  arg1 = (Clay__TextElementConfigArray *)jarg1; 
  Clay__textElementConfigs = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__textElementConfigs_get() {
  void * jresult ;
  Clay__TextElementConfigArray *result = 0 ;
  
  result = (Clay__TextElementConfigArray *)&Clay__textElementConfigs;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__imageElementConfigs_set(void * jarg1) {
  Clay__ImageElementConfigArray *arg1 = (Clay__ImageElementConfigArray *) 0 ;
  
  arg1 = (Clay__ImageElementConfigArray *)jarg1; 
  Clay__imageElementConfigs = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__imageElementConfigs_get() {
  void * jresult ;
  Clay__ImageElementConfigArray *result = 0 ;
  
  result = (Clay__ImageElementConfigArray *)&Clay__imageElementConfigs;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__floatingElementConfigs_set(void * jarg1) {
  Clay__FloatingElementConfigArray *arg1 = (Clay__FloatingElementConfigArray *) 0 ;
  
  arg1 = (Clay__FloatingElementConfigArray *)jarg1; 
  Clay__floatingElementConfigs = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__floatingElementConfigs_get() {
  void * jresult ;
  Clay__FloatingElementConfigArray *result = 0 ;
  
  result = (Clay__FloatingElementConfigArray *)&Clay__floatingElementConfigs;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__scrollElementConfigs_set(void * jarg1) {
  Clay__ScrollElementConfigArray *arg1 = (Clay__ScrollElementConfigArray *) 0 ;
  
  arg1 = (Clay__ScrollElementConfigArray *)jarg1; 
  Clay__scrollElementConfigs = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__scrollElementConfigs_get() {
  void * jresult ;
  Clay__ScrollElementConfigArray *result = 0 ;
  
  result = (Clay__ScrollElementConfigArray *)&Clay__scrollElementConfigs;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__customElementConfigs_set(void * jarg1) {
  Clay__CustomElementConfigArray *arg1 = (Clay__CustomElementConfigArray *) 0 ;
  
  arg1 = (Clay__CustomElementConfigArray *)jarg1; 
  Clay__customElementConfigs = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__customElementConfigs_get() {
  void * jresult ;
  Clay__CustomElementConfigArray *result = 0 ;
  
  result = (Clay__CustomElementConfigArray *)&Clay__customElementConfigs;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__borderElementConfigs_set(void * jarg1) {
  Clay__BorderElementConfigArray *arg1 = (Clay__BorderElementConfigArray *) 0 ;
  
  arg1 = (Clay__BorderElementConfigArray *)jarg1; 
  Clay__borderElementConfigs = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__borderElementConfigs_get() {
  void * jresult ;
  Clay__BorderElementConfigArray *result = 0 ;
  
  result = (Clay__BorderElementConfigArray *)&Clay__borderElementConfigs;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__layoutElementIdStrings_set(void * jarg1) {
  Clay__StringArray *arg1 = (Clay__StringArray *) 0 ;
  
  arg1 = (Clay__StringArray *)jarg1; 
  Clay__layoutElementIdStrings = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__layoutElementIdStrings_get() {
  void * jresult ;
  Clay__StringArray *result = 0 ;
  
  result = (Clay__StringArray *)&Clay__layoutElementIdStrings;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__wrappedTextLines_set(void * jarg1) {
  Clay__StringArray *arg1 = (Clay__StringArray *) 0 ;
  
  arg1 = (Clay__StringArray *)jarg1; 
  Clay__wrappedTextLines = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__wrappedTextLines_get() {
  void * jresult ;
  Clay__StringArray *result = 0 ;
  
  result = (Clay__StringArray *)&Clay__wrappedTextLines;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__layoutElementTreeNodeArray1_set(void * jarg1) {
  Clay__LayoutElementTreeNodeArray *arg1 = (Clay__LayoutElementTreeNodeArray *) 0 ;
  
  arg1 = (Clay__LayoutElementTreeNodeArray *)jarg1; 
  Clay__layoutElementTreeNodeArray1 = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__layoutElementTreeNodeArray1_get() {
  void * jresult ;
  Clay__LayoutElementTreeNodeArray *result = 0 ;
  
  result = (Clay__LayoutElementTreeNodeArray *)&Clay__layoutElementTreeNodeArray1;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__layoutElementTreeRoots_set(void * jarg1) {
  Clay__LayoutElementTreeRootArray *arg1 = (Clay__LayoutElementTreeRootArray *) 0 ;
  
  arg1 = (Clay__LayoutElementTreeRootArray *)jarg1; 
  Clay__layoutElementTreeRoots = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__layoutElementTreeRoots_get() {
  void * jresult ;
  Clay__LayoutElementTreeRootArray *result = 0 ;
  
  result = (Clay__LayoutElementTreeRootArray *)&Clay__layoutElementTreeRoots;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__layoutElementsHashMapInternal_set(void * jarg1) {
  Clay__LayoutElementHashMapItemArray *arg1 = (Clay__LayoutElementHashMapItemArray *) 0 ;
  
  arg1 = (Clay__LayoutElementHashMapItemArray *)jarg1; 
  Clay__layoutElementsHashMapInternal = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__layoutElementsHashMapInternal_get() {
  void * jresult ;
  Clay__LayoutElementHashMapItemArray *result = 0 ;
  
  result = (Clay__LayoutElementHashMapItemArray *)&Clay__layoutElementsHashMapInternal;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__layoutElementsHashMap_set(void * jarg1) {
  Clay__int32_tArray *arg1 = (Clay__int32_tArray *) 0 ;
  
  arg1 = (Clay__int32_tArray *)jarg1; 
  Clay__layoutElementsHashMap = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__layoutElementsHashMap_get() {
  void * jresult ;
  Clay__int32_tArray *result = 0 ;
  
  result = (Clay__int32_tArray *)&Clay__layoutElementsHashMap;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__measureTextHashMapInternal_set(void * jarg1) {
  Clay__MeasureTextCacheItemArray *arg1 = (Clay__MeasureTextCacheItemArray *) 0 ;
  
  arg1 = (Clay__MeasureTextCacheItemArray *)jarg1; 
  Clay__measureTextHashMapInternal = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__measureTextHashMapInternal_get() {
  void * jresult ;
  Clay__MeasureTextCacheItemArray *result = 0 ;
  
  result = (Clay__MeasureTextCacheItemArray *)&Clay__measureTextHashMapInternal;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__measureTextHashMapInternalFreeList_set(void * jarg1) {
  Clay__int32_tArray *arg1 = (Clay__int32_tArray *) 0 ;
  
  arg1 = (Clay__int32_tArray *)jarg1; 
  Clay__measureTextHashMapInternalFreeList = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__measureTextHashMapInternalFreeList_get() {
  void * jresult ;
  Clay__int32_tArray *result = 0 ;
  
  result = (Clay__int32_tArray *)&Clay__measureTextHashMapInternalFreeList;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__measureTextHashMap_set(void * jarg1) {
  Clay__int32_tArray *arg1 = (Clay__int32_tArray *) 0 ;
  
  arg1 = (Clay__int32_tArray *)jarg1; 
  Clay__measureTextHashMap = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__measureTextHashMap_get() {
  void * jresult ;
  Clay__int32_tArray *result = 0 ;
  
  result = (Clay__int32_tArray *)&Clay__measureTextHashMap;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__measuredWords_set(void * jarg1) {
  Clay__MeasuredWordArray *arg1 = (Clay__MeasuredWordArray *) 0 ;
  
  arg1 = (Clay__MeasuredWordArray *)jarg1; 
  Clay__measuredWords = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__measuredWords_get() {
  void * jresult ;
  Clay__MeasuredWordArray *result = 0 ;
  
  result = (Clay__MeasuredWordArray *)&Clay__measuredWords;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__measuredWordsFreeList_set(void * jarg1) {
  Clay__int32_tArray *arg1 = (Clay__int32_tArray *) 0 ;
  
  arg1 = (Clay__int32_tArray *)jarg1; 
  Clay__measuredWordsFreeList = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__measuredWordsFreeList_get() {
  void * jresult ;
  Clay__int32_tArray *result = 0 ;
  
  result = (Clay__int32_tArray *)&Clay__measuredWordsFreeList;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__openClipElementStack_set(void * jarg1) {
  Clay__int32_tArray *arg1 = (Clay__int32_tArray *) 0 ;
  
  arg1 = (Clay__int32_tArray *)jarg1; 
  Clay__openClipElementStack = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__openClipElementStack_get() {
  void * jresult ;
  Clay__int32_tArray *result = 0 ;
  
  result = (Clay__int32_tArray *)&Clay__openClipElementStack;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__pointerOverIds_set(void * jarg1) {
  Clay__ElementIdArray *arg1 = (Clay__ElementIdArray *) 0 ;
  
  arg1 = (Clay__ElementIdArray *)jarg1; 
  Clay__pointerOverIds = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__pointerOverIds_get() {
  void * jresult ;
  Clay__ElementIdArray *result = 0 ;
  
  result = (Clay__ElementIdArray *)&Clay__pointerOverIds;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__scrollContainerDatas_set(void * jarg1) {
  Clay__ScrollContainerDataInternalArray *arg1 = (Clay__ScrollContainerDataInternalArray *) 0 ;
  
  arg1 = (Clay__ScrollContainerDataInternalArray *)jarg1; 
  Clay__scrollContainerDatas = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__scrollContainerDatas_get() {
  void * jresult ;
  Clay__ScrollContainerDataInternalArray *result = 0 ;
  
  result = (Clay__ScrollContainerDataInternalArray *)&Clay__scrollContainerDatas;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__treeNodeVisited_set(void * jarg1) {
  Clay__BoolArray *arg1 = (Clay__BoolArray *) 0 ;
  
  arg1 = (Clay__BoolArray *)jarg1; 
  Clay__treeNodeVisited = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__treeNodeVisited_get() {
  void * jresult ;
  Clay__BoolArray *result = 0 ;
  
  result = (Clay__BoolArray *)&Clay__treeNodeVisited;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__dynamicStringData_set(void * jarg1) {
  Clay__CharArray *arg1 = (Clay__CharArray *) 0 ;
  
  arg1 = (Clay__CharArray *)jarg1; 
  Clay__dynamicStringData = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__dynamicStringData_get() {
  void * jresult ;
  Clay__CharArray *result = 0 ;
  
  result = (Clay__CharArray *)&Clay__dynamicStringData;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__debugElementData_set(void * jarg1) {
  Clay__DebugElementDataArray *arg1 = (Clay__DebugElementDataArray *) 0 ;
  
  arg1 = (Clay__DebugElementDataArray *)jarg1; 
  Clay__debugElementData = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__debugElementData_get() {
  void * jresult ;
  Clay__DebugElementDataArray *result = 0 ;
  
  result = (Clay__DebugElementDataArray *)&Clay__debugElementData;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__MeasureText_set(void * jarg1) {
  Clay_Dimensions (*arg1)(Clay_String *,Clay_TextElementConfig *) = (Clay_Dimensions (*)(Clay_String *,Clay_TextElementConfig *)) 0 ;
  
  arg1 = (Clay_Dimensions (*)(Clay_String *,Clay_TextElementConfig *))jarg1; 
  Clay__MeasureText = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__MeasureText_get() {
  void * jresult ;
  Clay_Dimensions (*result)(Clay_String *,Clay_TextElementConfig *) = 0 ;
  
  result = (Clay_Dimensions (*)(Clay_String *,Clay_TextElementConfig *))Clay__MeasureText;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__QueryScrollOffset_set(void * jarg1) {
  Clay_Vector2 (*arg1)(unsigned int) = (Clay_Vector2 (*)(unsigned int)) 0 ;
  
  arg1 = (Clay_Vector2 (*)(unsigned int))jarg1; 
  Clay__QueryScrollOffset = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__QueryScrollOffset_get() {
  void * jresult ;
  Clay_Vector2 (*result)(unsigned int) = 0 ;
  
  result = (Clay_Vector2 (*)(unsigned int))Clay__QueryScrollOffset;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__GetOpenLayoutElement() {
  void * jresult ;
  Clay_LayoutElement *result = 0 ;
  
  result = (Clay_LayoutElement *)Clay__GetOpenLayoutElement();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__ElementHasConfig(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Clay_LayoutElement *arg1 = (Clay_LayoutElement *) 0 ;
  Clay__ElementConfigType arg2 ;
  bool result;
  
  arg1 = (Clay_LayoutElement *)jarg1; 
  arg2 = (Clay__ElementConfigType)jarg2; 
  result = (bool)Clay__ElementHasConfig(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__FindElementConfigWithType(void * jarg1, int jarg2) {
  void * jresult ;
  Clay_LayoutElement *arg1 = (Clay_LayoutElement *) 0 ;
  Clay__ElementConfigType arg2 ;
  Clay_ElementConfigUnion result;
  
  arg1 = (Clay_LayoutElement *)jarg1; 
  arg2 = (Clay__ElementConfigType)jarg2; 
  result = Clay__FindElementConfigWithType(arg1,arg2);
  jresult = new Clay_ElementConfigUnion(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__HashNumber(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  Clay_ElementId result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = Clay__HashNumber(arg1,arg2);
  jresult = new Clay_ElementId(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__Rehash(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Clay_ElementId arg1 ;
  unsigned int arg2 ;
  Clay_ElementId *argp1 ;
  Clay_ElementId result;
  
  argp1 = (Clay_ElementId *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_ElementId", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  result = Clay__Rehash(SWIG_STD_MOVE(arg1),arg2);
  jresult = new Clay_ElementId(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__RehashWithNumber(unsigned int jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)Clay__RehashWithNumber(arg1,arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__HashTextWithConfig(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Clay_String *arg1 = (Clay_String *) 0 ;
  Clay_TextElementConfig *arg2 = (Clay_TextElementConfig *) 0 ;
  unsigned int result;
  
  arg1 = (Clay_String *)jarg1; 
  arg2 = (Clay_TextElementConfig *)jarg2; 
  result = (unsigned int)Clay__HashTextWithConfig(arg1,arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__AddMeasuredWord(void * jarg1, void * jarg2) {
  void * jresult ;
  Clay__MeasuredWord arg1 ;
  Clay__MeasuredWord *arg2 = (Clay__MeasuredWord *) 0 ;
  Clay__MeasuredWord *argp1 ;
  Clay__MeasuredWord *result = 0 ;
  
  argp1 = (Clay__MeasuredWord *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay__MeasuredWord", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (Clay__MeasuredWord *)jarg2; 
  result = (Clay__MeasuredWord *)Clay__AddMeasuredWord(SWIG_STD_MOVE(arg1),arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__MeasureTextCached(void * jarg1, void * jarg2) {
  void * jresult ;
  Clay_String *arg1 = (Clay_String *) 0 ;
  Clay_TextElementConfig *arg2 = (Clay_TextElementConfig *) 0 ;
  Clay__MeasureTextCacheItem *result = 0 ;
  
  arg1 = (Clay_String *)jarg1; 
  arg2 = (Clay_TextElementConfig *)jarg2; 
  result = (Clay__MeasureTextCacheItem *)Clay__MeasureTextCached(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__PointIsInsideRect(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Clay_Vector2 arg1 ;
  Clay_BoundingBox arg2 ;
  Clay_Vector2 *argp1 ;
  Clay_BoundingBox *argp2 ;
  bool result;
  
  argp1 = (Clay_Vector2 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_Vector2", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Clay_BoundingBox *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_BoundingBox", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)Clay__PointIsInsideRect(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__AddHashMapItem(void * jarg1, void * jarg2) {
  void * jresult ;
  Clay_ElementId arg1 ;
  Clay_LayoutElement *arg2 = (Clay_LayoutElement *) 0 ;
  Clay_ElementId *argp1 ;
  Clay_LayoutElementHashMapItem *result = 0 ;
  
  argp1 = (Clay_ElementId *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_ElementId", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (Clay_LayoutElement *)jarg2; 
  result = (Clay_LayoutElementHashMapItem *)Clay__AddHashMapItem(SWIG_STD_MOVE(arg1),arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__GetHashMapItem(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  Clay_LayoutElementHashMapItem *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (Clay_LayoutElementHashMapItem *)Clay__GetHashMapItem(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__GenerateIdForAnonymousElement(void * jarg1) {
  Clay_LayoutElement *arg1 = (Clay_LayoutElement *) 0 ;
  
  arg1 = (Clay_LayoutElement *)jarg1; 
  Clay__GenerateIdForAnonymousElement(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__InitializeEphemeralMemory(void * jarg1) {
  Clay_Arena *arg1 = (Clay_Arena *) 0 ;
  
  arg1 = (Clay_Arena *)jarg1; 
  Clay__InitializeEphemeralMemory(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__InitializePersistentMemory(void * jarg1) {
  Clay_Arena *arg1 = (Clay_Arena *) 0 ;
  
  arg1 = (Clay_Arena *)jarg1; 
  Clay__InitializePersistentMemory(arg1);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Clay__DistributeSizeAmongChildren(unsigned int jarg1, float jarg2, void * jarg3, int jarg4) {
  float jresult ;
  bool arg1 ;
  float arg2 ;
  Clay__int32_tArray arg3 ;
  Clay__SizeDistributionType arg4 ;
  Clay__int32_tArray *argp3 ;
  float result;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (float)jarg2; 
  argp3 = (Clay__int32_tArray *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay__int32_tArray", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (Clay__SizeDistributionType)jarg4; 
  result = (float)Clay__DistributeSizeAmongChildren(arg1,arg2,SWIG_STD_MOVE(arg3),arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__SizeContainersAlongAxis(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Clay__SizeContainersAlongAxis(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__IntToString(int jarg1) {
  void * jresult ;
  int arg1 ;
  Clay_String result;
  
  arg1 = (int)jarg1; 
  result = Clay__IntToString(arg1);
  jresult = new Clay_String(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__AddRenderCommand(void * jarg1) {
  Clay_RenderCommand arg1 ;
  Clay_RenderCommand *argp1 ;
  
  argp1 = (Clay_RenderCommand *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_RenderCommand", 0);
    return ;
  }
  arg1 = *argp1; 
  Clay__AddRenderCommand(SWIG_STD_MOVE(arg1));
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__ElementIsOffscreen(void * jarg1) {
  unsigned int jresult ;
  Clay_BoundingBox *arg1 = (Clay_BoundingBox *) 0 ;
  bool result;
  
  arg1 = (Clay_BoundingBox *)jarg1; 
  result = (bool)Clay__ElementIsOffscreen(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__CalculateFinalLayout() {
  Clay__CalculateFinalLayout();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLAY__DEBUGVIEW_COLOR_1_set(void * jarg1) {
  Clay_Color *arg1 = (Clay_Color *) 0 ;
  
  arg1 = (Clay_Color *)jarg1; 
  CLAY__DEBUGVIEW_COLOR_1 = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CLAY__DEBUGVIEW_COLOR_1_get() {
  void * jresult ;
  Clay_Color *result = 0 ;
  
  result = (Clay_Color *)&CLAY__DEBUGVIEW_COLOR_1;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLAY__DEBUGVIEW_COLOR_2_set(void * jarg1) {
  Clay_Color *arg1 = (Clay_Color *) 0 ;
  
  arg1 = (Clay_Color *)jarg1; 
  CLAY__DEBUGVIEW_COLOR_2 = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CLAY__DEBUGVIEW_COLOR_2_get() {
  void * jresult ;
  Clay_Color *result = 0 ;
  
  result = (Clay_Color *)&CLAY__DEBUGVIEW_COLOR_2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLAY__DEBUGVIEW_COLOR_3_set(void * jarg1) {
  Clay_Color *arg1 = (Clay_Color *) 0 ;
  
  arg1 = (Clay_Color *)jarg1; 
  CLAY__DEBUGVIEW_COLOR_3 = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CLAY__DEBUGVIEW_COLOR_3_get() {
  void * jresult ;
  Clay_Color *result = 0 ;
  
  result = (Clay_Color *)&CLAY__DEBUGVIEW_COLOR_3;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLAY__DEBUGVIEW_COLOR_4_set(void * jarg1) {
  Clay_Color *arg1 = (Clay_Color *) 0 ;
  
  arg1 = (Clay_Color *)jarg1; 
  CLAY__DEBUGVIEW_COLOR_4 = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CLAY__DEBUGVIEW_COLOR_4_get() {
  void * jresult ;
  Clay_Color *result = 0 ;
  
  result = (Clay_Color *)&CLAY__DEBUGVIEW_COLOR_4;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLAY__DEBUGVIEW_COLOR_SELECTED_ROW_set(void * jarg1) {
  Clay_Color *arg1 = (Clay_Color *) 0 ;
  
  arg1 = (Clay_Color *)jarg1; 
  CLAY__DEBUGVIEW_COLOR_SELECTED_ROW = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CLAY__DEBUGVIEW_COLOR_SELECTED_ROW_get() {
  void * jresult ;
  Clay_Color *result = 0 ;
  
  result = (Clay_Color *)&CLAY__DEBUGVIEW_COLOR_SELECTED_ROW;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CLAY__DEBUGVIEW_ROW_HEIGHT_get() {
  int jresult ;
  int result;
  
  result = (int)(int)CLAY__DEBUGVIEW_ROW_HEIGHT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CLAY__DEBUGVIEW_OUTER_PADDING_get() {
  int jresult ;
  int result;
  
  result = (int)(int)CLAY__DEBUGVIEW_OUTER_PADDING;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CLAY__DEBUGVIEW_INDENT_WIDTH_get() {
  int jresult ;
  int result;
  
  result = (int)(int)CLAY__DEBUGVIEW_INDENT_WIDTH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__DebugView_TextNameConfig_set(void * jarg1) {
  Clay_TextElementConfig *arg1 = (Clay_TextElementConfig *) 0 ;
  
  arg1 = (Clay_TextElementConfig *)jarg1; 
  Clay__DebugView_TextNameConfig = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__DebugView_TextNameConfig_get() {
  void * jresult ;
  Clay_TextElementConfig *result = 0 ;
  
  result = (Clay_TextElementConfig *)&Clay__DebugView_TextNameConfig;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__DebugView_ScrollViewItemLayoutConfig_set(void * jarg1) {
  Clay_LayoutConfig *arg1 = (Clay_LayoutConfig *) 0 ;
  
  arg1 = (Clay_LayoutConfig *)jarg1; 
  Clay__DebugView_ScrollViewItemLayoutConfig = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__DebugView_ScrollViewItemLayoutConfig_get() {
  void * jresult ;
  Clay_LayoutConfig *result = 0 ;
  
  result = (Clay_LayoutConfig *)&Clay__DebugView_ScrollViewItemLayoutConfig;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__DebugElementConfigTypeLabelConfig_label_set(void * jarg1, void * jarg2) {
  Clay__DebugElementConfigTypeLabelConfig *arg1 = (Clay__DebugElementConfigTypeLabelConfig *) 0 ;
  Clay_String *arg2 = (Clay_String *) 0 ;
  
  arg1 = (Clay__DebugElementConfigTypeLabelConfig *)jarg1; 
  arg2 = (Clay_String *)jarg2; 
  if (arg1) (arg1)->label = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__DebugElementConfigTypeLabelConfig_label_get(void * jarg1) {
  void * jresult ;
  Clay__DebugElementConfigTypeLabelConfig *arg1 = (Clay__DebugElementConfigTypeLabelConfig *) 0 ;
  Clay_String *result = 0 ;
  
  arg1 = (Clay__DebugElementConfigTypeLabelConfig *)jarg1; 
  result = (Clay_String *)& ((arg1)->label);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__DebugElementConfigTypeLabelConfig_color_set(void * jarg1, void * jarg2) {
  Clay__DebugElementConfigTypeLabelConfig *arg1 = (Clay__DebugElementConfigTypeLabelConfig *) 0 ;
  Clay_Color *arg2 = (Clay_Color *) 0 ;
  
  arg1 = (Clay__DebugElementConfigTypeLabelConfig *)jarg1; 
  arg2 = (Clay_Color *)jarg2; 
  if (arg1) (arg1)->color = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__DebugElementConfigTypeLabelConfig_color_get(void * jarg1) {
  void * jresult ;
  Clay__DebugElementConfigTypeLabelConfig *arg1 = (Clay__DebugElementConfigTypeLabelConfig *) 0 ;
  Clay_Color *result = 0 ;
  
  arg1 = (Clay__DebugElementConfigTypeLabelConfig *)jarg1; 
  result = (Clay_Color *)& ((arg1)->color);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__DebugElementConfigTypeLabelConfig() {
  void * jresult ;
  Clay__DebugElementConfigTypeLabelConfig *result = 0 ;
  
  result = (Clay__DebugElementConfigTypeLabelConfig *)new Clay__DebugElementConfigTypeLabelConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__DebugElementConfigTypeLabelConfig(void * jarg1) {
  Clay__DebugElementConfigTypeLabelConfig *arg1 = (Clay__DebugElementConfigTypeLabelConfig *) 0 ;
  
  arg1 = (Clay__DebugElementConfigTypeLabelConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__DebugGetElementConfigTypeLabel(int jarg1) {
  void * jresult ;
  Clay__ElementConfigType arg1 ;
  Clay__DebugElementConfigTypeLabelConfig result;
  
  arg1 = (Clay__ElementConfigType)jarg1; 
  result = Clay__DebugGetElementConfigTypeLabel(arg1);
  jresult = new Clay__DebugElementConfigTypeLabelConfig(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__RenderDebugLayoutData_rowCount_set(void * jarg1, unsigned int jarg2) {
  Clay__RenderDebugLayoutData *arg1 = (Clay__RenderDebugLayoutData *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__RenderDebugLayoutData *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->rowCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__RenderDebugLayoutData_rowCount_get(void * jarg1) {
  unsigned int jresult ;
  Clay__RenderDebugLayoutData *arg1 = (Clay__RenderDebugLayoutData *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__RenderDebugLayoutData *)jarg1; 
  result = (unsigned int) ((arg1)->rowCount);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__RenderDebugLayoutData_selectedElementRowIndex_set(void * jarg1, unsigned int jarg2) {
  Clay__RenderDebugLayoutData *arg1 = (Clay__RenderDebugLayoutData *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Clay__RenderDebugLayoutData *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->selectedElementRowIndex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__RenderDebugLayoutData_selectedElementRowIndex_get(void * jarg1) {
  unsigned int jresult ;
  Clay__RenderDebugLayoutData *arg1 = (Clay__RenderDebugLayoutData *) 0 ;
  unsigned int result;
  
  arg1 = (Clay__RenderDebugLayoutData *)jarg1; 
  result = (unsigned int) ((arg1)->selectedElementRowIndex);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Clay__RenderDebugLayoutData() {
  void * jresult ;
  Clay__RenderDebugLayoutData *result = 0 ;
  
  result = (Clay__RenderDebugLayoutData *)new Clay__RenderDebugLayoutData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Clay__RenderDebugLayoutData(void * jarg1) {
  Clay__RenderDebugLayoutData *arg1 = (Clay__RenderDebugLayoutData *) 0 ;
  
  arg1 = (Clay__RenderDebugLayoutData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__RenderDebugLayoutElementsList(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  Clay__RenderDebugLayoutData result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = Clay__RenderDebugLayoutElementsList(arg1,arg2);
  jresult = new Clay__RenderDebugLayoutData(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__RenderDebugLayoutSizing(void * jarg1, void * jarg2) {
  Clay_SizingAxis arg1 ;
  Clay_TextElementConfig *arg2 = (Clay_TextElementConfig *) 0 ;
  Clay_SizingAxis *argp1 ;
  
  argp1 = (Clay_SizingAxis *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_SizingAxis", 0);
    return ;
  }
  arg1 = *argp1; 
  arg2 = (Clay_TextElementConfig *)jarg2; 
  Clay__RenderDebugLayoutSizing(SWIG_STD_MOVE(arg1),arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__RenderDebugViewElementConfigHeader(void * jarg1, int jarg2) {
  Clay_String arg1 ;
  Clay__ElementConfigType arg2 ;
  Clay_String *argp1 ;
  
  argp1 = (Clay_String *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_String", 0);
    return ;
  }
  arg1 = *argp1; 
  arg2 = (Clay__ElementConfigType)jarg2; 
  Clay__RenderDebugViewElementConfigHeader(SWIG_STD_MOVE(arg1),arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__RenderDebugViewColor(void * jarg1, void * jarg2) {
  Clay_Color arg1 ;
  Clay_TextElementConfig *arg2 = (Clay_TextElementConfig *) 0 ;
  Clay_Color *argp1 ;
  
  argp1 = (Clay_Color *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_Color", 0);
    return ;
  }
  arg1 = *argp1; 
  arg2 = (Clay_TextElementConfig *)jarg2; 
  Clay__RenderDebugViewColor(SWIG_STD_MOVE(arg1),arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__RenderDebugViewCornerRadius(void * jarg1, void * jarg2) {
  Clay_CornerRadius arg1 ;
  Clay_TextElementConfig *arg2 = (Clay_TextElementConfig *) 0 ;
  Clay_CornerRadius *argp1 ;
  
  argp1 = (Clay_CornerRadius *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_CornerRadius", 0);
    return ;
  }
  arg1 = *argp1; 
  arg2 = (Clay_TextElementConfig *)jarg2; 
  Clay__RenderDebugViewCornerRadius(SWIG_STD_MOVE(arg1),arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__RenderDebugViewBorder(int jarg1, void * jarg2, void * jarg3) {
  int arg1 ;
  Clay_Border arg2 ;
  Clay_TextElementConfig *arg3 = (Clay_TextElementConfig *) 0 ;
  Clay_Border *argp2 ;
  
  arg1 = (int)jarg1; 
  argp2 = (Clay_Border *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_Border", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (Clay_TextElementConfig *)jarg3; 
  Clay__RenderDebugViewBorder(arg1,SWIG_STD_MOVE(arg2),arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HandleDebugViewCloseButtonInteraction(void * jarg1, void * jarg2, void * jarg3) {
  Clay_ElementId arg1 ;
  Clay_PointerData arg2 ;
  intptr_t arg3 ;
  Clay_ElementId *argp1 ;
  Clay_PointerData *argp2 ;
  intptr_t *argp3 ;
  
  argp1 = (Clay_ElementId *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_ElementId", 0);
    return ;
  }
  arg1 = *argp1; 
  argp2 = (Clay_PointerData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_PointerData", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (intptr_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null intptr_t", 0);
    return ;
  }
  arg3 = *argp3; 
  HandleDebugViewCloseButtonInteraction(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__RenderDebugView() {
  Clay__RenderDebugView();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay__DebugView_ErrorTextConfig_set(void * jarg1) {
  Clay_TextElementConfig *arg1 = (Clay_TextElementConfig *) 0 ;
  
  arg1 = (Clay_TextElementConfig *)jarg1; 
  Clay__DebugView_ErrorTextConfig = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Clay__DebugView_ErrorTextConfig_get() {
  void * jresult ;
  Clay_TextElementConfig *result = 0 ;
  
  result = (Clay_TextElementConfig *)&Clay__DebugView_ErrorTextConfig;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_PointerOver(void * jarg1) {
  unsigned int jresult ;
  Clay_ElementId arg1 ;
  Clay_ElementId *argp1 ;
  bool result;
  
  argp1 = (Clay_ElementId *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Clay_ElementId", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (bool)Clay_PointerOver(SWIG_STD_MOVE(arg1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Clay_SetExternalScrollHandlingEnabled(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Clay_SetExternalScrollHandlingEnabled(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetMeasureText(void * jarg1) {
  MeasureTextDelegate arg1 = (MeasureTextDelegate) 0 ;
  
  arg1 = (MeasureTextDelegate)jarg1; 
  SetMeasureText(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_ChildAlignment_size_t() {
  unsigned int jresult ;
  size_t result;
  
  result = Clay_ChildAlignment_size_t();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_SizingMinMax_size_t() {
  unsigned int jresult ;
  size_t result;
  
  result = Clay_SizingMinMax_size_t();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_SizingAxis_size_t() {
  unsigned int jresult ;
  size_t result;
  
  result = Clay_SizingAxis_size_t();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_Sizing_size_t() {
  unsigned int jresult ;
  size_t result;
  
  result = Clay_Sizing_size_t();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_Padding_size_t() {
  unsigned int jresult ;
  size_t result;
  
  result = Clay_Padding_size_t();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_LayoutConfig_size_t() {
  unsigned int jresult ;
  size_t result;
  
  result = Clay_LayoutConfig_size_t();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_RectangleElementConfig_size_t() {
  unsigned int jresult ;
  size_t result;
  
  result = Clay_RectangleElementConfig_size_t();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_TextElementConfig_size_t() {
  unsigned int jresult ;
  size_t result;
  
  result = Clay_TextElementConfig_size_t();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_ImageElementConfig_size_t() {
  unsigned int jresult ;
  size_t result;
  
  result = Clay_ImageElementConfig_size_t();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_FloatingAttachPoints_size_t() {
  unsigned int jresult ;
  size_t result;
  
  result = Clay_FloatingAttachPoints_size_t();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_FloatingElementConfig_size_t() {
  unsigned int jresult ;
  size_t result;
  
  result = Clay_FloatingElementConfig_size_t();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_CustomElementConfig_size_t() {
  unsigned int jresult ;
  size_t result;
  
  result = Clay_CustomElementConfig_size_t();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_ScrollElementConfig_size_t() {
  unsigned int jresult ;
  size_t result;
  
  result = Clay_ScrollElementConfig_size_t();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_Border_size_t() {
  unsigned int jresult ;
  size_t result;
  
  result = Clay_Border_size_t();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_BorderElementConfig_size_t() {
  unsigned int jresult ;
  size_t result;
  
  result = Clay_BorderElementConfig_size_t();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_ElementConfigUnion_size_t() {
  unsigned int jresult ;
  size_t result;
  
  result = Clay_ElementConfigUnion_size_t();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_ElementConfig_size_t() {
  unsigned int jresult ;
  size_t result;
  
  result = Clay_ElementConfig_size_t();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_ScrollContainerData_size_t() {
  unsigned int jresult ;
  size_t result;
  
  result = Clay_ScrollContainerData_size_t();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_RenderCommand_size_t() {
  unsigned int jresult ;
  size_t result;
  
  result = Clay_RenderCommand_size_t();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_RenderCommandArray_size_t() {
  unsigned int jresult ;
  size_t result;
  
  result = Clay_RenderCommandArray_size_t();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_PointerData_size_t() {
  unsigned int jresult ;
  size_t result;
  
  result = Clay_PointerData_size_t();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_String_size_t() {
  unsigned int jresult ;
  size_t result;
  
  result = Clay_String_size_t();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay__StringArray_size_t() {
  unsigned int jresult ;
  size_t result;
  
  result = Clay__StringArray_size_t();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_Arena_size_t() {
  unsigned int jresult ;
  size_t result;
  
  result = Clay_Arena_size_t();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_Dimensions_size_t() {
  unsigned int jresult ;
  size_t result;
  
  result = Clay_Dimensions_size_t();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_Vector2_size_t() {
  unsigned int jresult ;
  size_t result;
  
  result = Clay_Vector2_size_t();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_Color_size_t() {
  unsigned int jresult ;
  size_t result;
  
  result = Clay_Color_size_t();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_BoundingBox_size_t() {
  unsigned int jresult ;
  size_t result;
  
  result = Clay_BoundingBox_size_t();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_ElementId_size_t() {
  unsigned int jresult ;
  size_t result;
  
  result = Clay_ElementId_size_t();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Clay_CornerRadius_size_t() {
  unsigned int jresult ;
  size_t result;
  
  result = Clay_CornerRadius_size_t();
  jresult = (unsigned int)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

